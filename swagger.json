{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "<h2> Introduction </h2>\nBasiq provides a collection of APIs to help you build powerful financial solutions for a wide range of use cases. The most common use cases are:\n<ul>\n<li><b>Personal Financial Management.</b> Enable your customers to aggregate all of their financial data in one place, identify expenses and gain valuable insight of their spending.</li>\n<li><b>Wealth Management.</b> Gain valuable insights and a clearer understanding of your customers’ financial positions to customize advice, recommendations, and product offerings. </li>\n<li><b>Risk Insights.</b> Gain real-time and comprehensive visibility of your customers' assets, income, non-credit payment patterns, and transactional details.</li>\n<li><b>Cashflow Analysis.</b> Provide tools that analyze cash flow and forecast future expenses and income.</li>\n<li><b>Account Summary.</b> Display the big picture with financial account data listed alongside balance information.</li>\n<li><b>Account Verification.</b> Instantly verify account ownership and balances in real time to improve the user experience and mitigate fraud and risk.</li>\n<li><b>Data Enhancement.</b> Gain greater financial insights around consumer spending patterns and trends with categorised and enriched transaction data. </li>\n</ul>\nBasiq APIs are currently only available in Australia and New Zealand. We are working to make them available in other countries - so check back soon. Use this link to see a complete list of <a href= 'http://docs.basiq.io/the-basiq-platform/supported-financial-institutions'>supported financial institutions.</a>\n<hr/>\n<h2> Basiq API Services </h2>\n\nBasiq provides three core API services which you can use to develop innovative financial solutions:\n<ul>\n<li><b>Connect</b> provides the ability to easily acquire financial data such as account details and balances and related transactions from various financial institutions.</li>\n<li><b>Enrich</b> classifies all banking, credit and debit card transactions into categories based on specific merchant, merchant type and geographical location data.</li>\n<li><b>Affordability</b> provides a complete 360 degree view of your customers financial health - by breaking down their finances into assets, liabilities, income and expenses. You can use Income and Expenses endpoints separately or as part of the full Affordability API solution.</li>\n</ul>\n\nBase URL is → https://au-api.basiq.io - you can use our sandbox environment for free right now - just grab an API key!\nEnrich URL is → https://au-api.basiq.io/enrich - contact us to have your API key activated to try out this API.\nAffordability URL is → https://au-api.basiq.io/affordability - you can use our sandbox environment for free - contact us to have your API key activated.\n<hr/>\n<h2> Getting Started </h2>\n<b>Start Developing </b>\n\nBefore you can start using any of the available Basiq APIs there are a few things you will need to do first.\n<ol>\n<li> <a href='https://dashboard.basiq.io/login'>Sign-up</a> to the Basiq API service </li>\n<li> Grab your API key for your application (via the <a href= 'https://dashboard.basiq.io/'>Developer Dashboard</a>) </li>\n</ol>\nOnce you have successfully obtained an API key, you can start using any of the available Basiq APIs.\n\nThis <a href='http://docs.basiq.io/getting-started/get-started-with-basiq'>user guide</a> gets you up and running with the Basiq API in the time it takes to make a cup of tea.\nIt includes a <a href='https://documenter.getpostman.com/view/9721346/SztEaSr2?version=latest'>Postman collection</a> to help you get a fast feel for the API.\nPlease note that all of the Basiq's Core API and Affordability APIs are accessible using the sandbox data (see testing for details). We encourage you to play with the sandbox data. Once you are ready you will need to supply payment details in order to use the full set of Basiq API services.\n<hr/>\n<h2> Authentication </h2>\nWhen working with Basiq APIs your application will need to complete the authentication process first before you can access any of the available resources.\n\nThe authentication process is fairly straight forward, and simply requires you to exchange your API key for a token. Once you obtain the token, you can call any of the available API services by simply including the token in the Authorization header of each request.\nYour API keys carry many privileges, so be sure to keep them secret! Do not share your API keys in publicly accessible areas such GitHub, client-side code, etc.\n<h3> Prerequisites </h3>\nPrior to authenticating your application you will need to complete the following steps:\n<ol>\n<li> <a href='https://dashboard.basiq.io/login'>Sign-up</a> to the Basiq API service </li>\n<li> Grab your API key for your application (via the <a href= 'https://dashboard.basiq.io/'>Developer Dashboard</a>) </li>\n</ol>\n\n<h3> Steps to authenticate </h3>\n<ol>\n<li> Call /token passing in the API key in the Authorization header of the request and Basiq API version you intent to use </li>\n<li> The server will validate the key and if everything is successful will issue an access token along with the following properties:</li>\n</ol>\n<table style=\"width: 50%\">\n<tr> <td><b>Property </b><td> <td><b>Description</b> <td><tr>\n<tr> <td>access_token - <i>string, readonly</t><td> <td>The generated access token.<td><tr>\n<tr> <td>expires_in - <i>number, readonly</i><td> <td>The number of seconds left before the token becomes invalid.<td><tr>\n<tr> <td>token_type - <i>string, readonly</i><td> <td>This value will always be <b>Bearer</b>.<td><tr>\n</table>\nThis access token is the key to making successful requests to the Basiq API. From here on you will need to include this access token in the header when requesting any of the secured resources as follows:\n\n<b>Authorization: Bearer [access_token]</b>\nNote that tokens have a short lifespan and as such should not be stored permanently. Once a token has expired your application will need to reauthenticate.\n<hr/>\n<h2> Testing </h2>\nThere’s nothing worse than developing against an API with crappy test data. We get that! This is why we have put a lot of effort into ensuring that our test data mimics real production data that your app will consume.\n<h3> Connect API </h3>\nThe test data that we provide for the Connect API service (below) has been designed to mimic a real life user. This means that just a like a real user would spend and receive funds throughout the day - our test accounts have been designed to do the same thing. Therefore you should expect to see new transaction records being created throughout the day, and the account balances adjusted accordingly.\n\nThis should give you a good feel for the type of data that you should expect to see for your own customers. The transaction data is completely random, and even we are sometimes surprised by transactions that appear :-)\nYou can use our sandbox environment for free right now - just grab an API key to get started (via the <a href='https://dashboard.basiq.io/'>Developer Dashboard</a>).\nEnsure that you pass the institution code AU00000 when using the test accounts.\n<table style=\"width: 50%\">\n<tr> <td> <b>loginId</b> </td><td> <b>password</b> </td</tr>\n<tr> <td> Wentworth-Smith </td><td> whislter </td</tr>\n<tr> <td> gavinBelson </td><td> hooli2016 </td</tr>\n<tr> <td> jared </td><td> django </td</tr>\n<tr> <td> richard </td><td> tabsnotspaces </td</tr>\n</table>\n<h3> Enrich API </h3>\nThe Enrich API returns merchant metadata regarding name, location and category.\n\nThis service can be tested using bank transaction data that you provide. You can use real bank transaction data and the Enrich API will return enriched records for those transactions. Note that the same endpoint is utilised for both testing and production users, however a limit of 100 queries is set for testing users.\nContact us (via the \"help\" icon at the bottom of the page) to have your Enrich access enabled.\n\nYou will need to ensure that the search query is <b>url encoded</b> before calling the resource and must contain at least 3 characters.\n\nExample queries:\nq=garfish%20MANLY%20NS&country=AU&institution=AU06703&accountType=transaction&amount=-12.95\nq=garfish%20MANLY%20NS&institution= AU13601\n\n<table>\n<tr> <td> Example Queries: </td> </tr>\n<tr>\n<td>\n<ol>\n<li> GARFISH MANLY NS </li>\n<li> 12 VOLT DIRECT PTY L LONSDALE AU </li>\n<li> HARVEY NORMAN AV/IT BALGOWLAH AU </li>\n<li> CALTEX ALDINGA BEACH ALDINGA BEACHAU </li>\n<li> KMART 1055 WARRIEWOOD AU </li>\n<li> KAKADU LODGE & CARAV JABIRU AU </li>\n<ol>\n</td>\n</tr>\n</table>\n\n<h3> Affordability API </h3>\nThe test data that we provide for the Affordability API service has been designed to mimic a real life user. This means that just a like a real user would spend and receive funds throughout the day - our test accounts have been designed to do the same thing. Therefore you should expect to see new transaction records being created throughout the day, and the account balances adjusted accordingly.\nYou can use our sandbox environment for free - contact us (via the \"help\" icon at the bottom of the page) to have your API key activated for Affordability.\nEnsure that you pass the institution code AU00000 when using the test accounts.\n<table style=\"width: 50%\">\n<tr> <td> <b>loginId</b> </td><td> <b>password</b> </td</tr>\n<tr> <td> Wentworth-Smith </td><td> whislter </td</tr>\n</table>\n\nOnce you have created a test connection you can access the Affordability, Income and Expense endpoints for this user. The Affordability endpoint returns links to Income and Expense resources or you can use these endpoints independently without Affordability.\n<hr/>\n<h2> Collections </h2>\nCollection resources provide access to information about a list of objects of the same type. For example, you can use a collection resource to access information about a list of users. Collection resources are paged and may be sorted and filtered (depending on availability) - and will always return an object of type list.\n<h3> Filters </h3>\nSome collections support the ability to filter the results. Filtering a collection resource is conducted via the filter query parameter using the following notation:\n\n<b>?filter=[property].[ condition ]([ value ]) </b>\nAll filter values should be URL encoded: ?filter=URLEncode(*)\n\n<h3>Accessing Properties</h3>\nProperties are accessed using the following notation <b>object.property</b>.\n<h3> Supported Conditions </h3>\n<table>\n<tr>  <th>eq</th> <td> Equals <b>?filter=account.id.eq('s55bf3')</b></td> </tr>\n<tr>  <th>bt</th> <td> Between two values - used for date range filtering. <b> ?filter=transaction.postDate.bt('2017-09-28','2018-01-30'). Values are inclusive.</b> </td> </tr>\n<tr>  <th>gt</th> <td> Greater than <b>?filter=transaction.postDate.gt('2018-01-28')</b></td> </tr>\n<tr>  <th>gteq</th> <td> Greater than or equal to <b>?filter=transaction.postDate.gteq('2018-01-28')</b> </td> </tr>\n<tr>  <th>lt</th> <td> Less than <b> ?filter=transaction.postDate.lt('2018-01-28') </b></td> </tr>\n<tr>  <th>lteq</th> <td> Less than or equal to <b> ?filter=transaction.postDate.lteq('2018-01-28') </b> </td> </tr>\n<tr>  <th>ne</th> <td>Not equals (only currently for <b>Institutions </b>endpoint) <b> ?filter=institution.institutionType.ne('Test Bank') </b> </td> </tr>\n</table>\nWhere available, you can apply multiple filters to a collection by separating them with a comma.\n\nMultiple filters are treated as an and (&) operation example:\n\n<b> ?filter=transaction.postDate.bt('2018-01-28','2018-02-27'),account.id.eq('aef3g') </b>\n\nNote the examples above have not url encoded the filters. You will need to ensure that the filter values are url encoded before calling the resource.\n<hr/>\n<h2> Errors </h2>\nThe Connect API uses conventional HTTP response codes to indicate the success or failure of an API request. In general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted, user's credentials are invalid, etc.), and codes in the 5xx range indicate an error with the Connect API's servers (these are rare).\nIn addition to returning an appropriate HTTP code the body will also include a JSON formatted error object that provides more details about the specifics of the error. The error object will return the error as an array to indicate multiple errors (where present).\n<table>\n<tr> <td colspan='2'><b>Attributes</b><td> </tr>\n<tr> <td> <b>correlationId</b> <td>a unique identifier for this particular occurrence of the problem.</td> </tr>\n<tr> <td> <b>code</b> <td>an application-specific error code, expressed as a string value.</td> </tr>\n<tr> <td> <b>title</b> <td>a short, human-readable summary of the problem.</td> </tr>\n<tr> <td> <b>detail</b> <td>a human-readable explanation specific to this occurrence of the problem.</td> </tr>\n<tr> <td> <b>source</b> <td>an object containing references to the source of the error, optionally including any of the following members:\n<ul>\n<li> <b>pointer</b> the location to the object or attribute that the error relates to </li>\n<li> <b>parameter</b> the location to the object or attribute that the error relates to </li>\n</ul>\n</td>\n</tr>\n</table>\n<h3> Error Codes </h3>\nBelow you will find details for our various response codes.\n<table>\n<tbody>\n<tr>\n<th>Code</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>\n<p>invalid-credentials</p>\n</td>\n<td>\n<p><strong>Invalid Attribute </strong><br /> Cannot login to target institution using supplied\ncredentials. Please check credentials and try again.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>internal-server-error</p>\n</td>\n<td>\n<p><strong>Server Error </strong><br /> Internal server error<br /> All endpoints</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>access-denied</p>\n</td>\n<td>\n<p><strong>Access denied</strong><br /> Token has expired</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>invalid-authorization-token</p>\n</td>\n<td>\n<p><strong>Unauthorized </strong><br /> Invalid authorization token. Check details message.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>parameter-not-supplied</p>\n</td>\n<td>\n<p><strong>Missing Attribute </strong><br /> Required parameter not supplied. Check details and source\nmessage.<br /> e.g. One of 'email' or 'mobile' is required.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>parameter-not-valid</p>\n</td>\n<td>\n<p><strong>Invalid Attribute </strong><br /> Parameter value is not valid. Check details and source\nmessage.<br /> e.g.<br /> Provided mobile is in bad format.<br /> User ID value is not valid</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>resource-not-found</p>\n</td>\n<td>\n<p><strong>Invalid Attribute </strong><br /> Requested resource is not found. Check details message.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>resource-already-exists</p>\n</td>\n<td>\n<p><strong>Invalid Attribute </strong><br /> Resource already exists. Check details message.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>invalid-content</p>\n</td>\n<td>\n<p><strong>Invalid Attribute</strong><br /> Invalid request content. Check details message.<br /> e.g.\nempty request body</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsupported-content-type</p>\n</td>\n<td>\n<p><strong>Invalid Attribute </strong><br /> Requested content type is not supported.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unsupported-accept</p>\n</td>\n<td>\n<p><strong>Invalid Attribute </strong><br /> Accept type is not supported.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>service-unavailable</p>\n</td>\n<td>\n<p><strong>Service Unavailable </strong><br /> Service is currently unavailable. Please try again later.\n</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>too-many-requests</p>\n</td>\n<td>\n<p><strong>Service Unavailable </strong><br /> Request rate limit per connection reached. Follow detail\nmessage for futher instructions.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>method-not-allowed</p>\n</td>\n<td>\n<p><strong>Not Allowed </strong><br /> Requested method is not allowed.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>unauthorized-access</p>\n</td>\n<td>\n<p><strong>Unauthorized </strong><br /> Unauthorized access.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>invalid-authorization-request</p>\n</td>\n<td>\n<p><strong>Unauthorized </strong><br /> Invalid authorization request. Check details message.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>no-production-access</p>\n</td>\n<td>\n<p><strong>Unauthorized </strong><br /> Partner has permission to access Sandbox data only. For\naccessing live Institution data, please contact us via Intercom or email.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>account-not-accessible-requires-user-action</p>\n</td>\n<td>\n<p><strong>Not Accessible </strong><br /> An action is required from end-user before account details can\nbe returned.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>maintenance-error</p>\n</td>\n<td>\n<p><strong>Not Accessible </strong><br /> Requested resource is currently unavailable due to maintenance\non Institution's side.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>temporary-unavailable</p>\n</td>\n<td>\n<p><strong>Not Accessible </strong><br /> Requested resource is currently unavailable due to temporary\nissue on Institution's side.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>forbidden-access</p>\n</td>\n<td>\n<p><strong>Forbidden access</strong><br /> Access to this resource is forbidden</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>institution-not-supported</p>\n</td>\n<td>\n<p><strong>Institution is not supported</strong><br /> e.g. Institution AU00000 is not supported on this\nendpoint</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>bank-statement-new-product</p>\n</td>\n<td>\n<p><strong>PDF Bank statement new product</strong><br /> New product requires config</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>bank-statement-parsing-error</p>\n</td>\n<td>\n<p><strong>PDF Bank statement parsing error</strong><br /> Unable to parse statement</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>bank-statement-not-supported</p>\n</td>\n<td>\n<p><strong>PDF bank statement not supported</strong><br /> Statement not supported</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>missing-required-field</p>\n</td>\n<td>\n<p><strong>CSV missing required field</strong><br /> CSV header does not contain required field</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>missing-required-field-value</p>\n</td>\n<td>\n<p><strong>CSV missing required field value</strong><br /> CSV row does not contain value for required\nfield</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>invalid-field-value</p>\n</td>\n<td>\n<p><strong>CSV invalid field value</strong><br /> Field value is not valid</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>account-data-differs</p>\n</td>\n<td>\n<p><strong>CSV account data differs</strong><br /> Data for single account differs across rows</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>empty-file</p>\n</td>\n<td>\n<p><strong>CSV empty file</strong><br /> CSV file has no data rows</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>row-count-exceeded</p>\n</td>\n<td>\n<p><strong>CSV row count exceeded</strong><br /> CSV row count is above limit</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>invalid-request-content</p>\n</td>\n<td>\n<p><strong>PDF/CSV invalid request content (file type)</strong><br /> Statement is not valid</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>request-not-valid</p>\n</td>\n<td>\n<p><strong>PDF/CSV Invalid request</strong><br /> Request too long</p>\n</td>\n</tr>\n</tbody>\n</table>\n\n<hr/>\n<h2> Versioning </h2>\nYour API version controls the API behaviour you see e.g. what properties you see in responses, what parameters you’re permitted to send in requests etc.\nIn order to gain access to the API, you need to pass the appropriate version in HTTP header basiq-version, when exchanging your API key for a token.\nYou don't need to pass basiq-version header in any subsequent requests.",
    "title": "Basiq API.",
    "version": "2.0.0"
  },
  "host": "au-api.basiq.io",
  "paths": {
    "/token": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Use this endpoint to retrieve token that will be passed as authorization header for Basiq API",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Token"
        ],
        "operationId": "postToken",
        "parameters": [
          {
            "in": "formData",
            "name": "scope",
            "type": "string"
          },
          {
            "type": "string",
            "name": "basiq-version",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return token object that will be used for Basiq API requests. ",
            "schema": {
              "$ref": "#/definitions/TokenPostResponse"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "description": "<b>Tracking the status of a job</b><br/>\nEvery step of the job has a status property that depicts its current state.<br/>\n<b>Find out what steps have been completed</b><br/>\nDepending on the job being executed, some jobs will have multiple steps which need to be executed, for e.g. refreshing a connection requires the following steps to be completed:\n<ol><li>Establish successful authentication with institution</li>\n<li>Fetch latest list of accounts</li>\n<li>Fetch latest list of transactions</li></ol>\nYou can keep track of the steps that have been completed by observing the results array property. As each step is successfully completed, its status will be updated and a result object with the link to the affected resource will be present. In the event that a step has failed, the result object will contain an embedded error object.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieves the details of an existing job. You need only supply the unique job identifier that was returned upon job creation.",
        "operationId": "getJobs",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the job to be retrieved.",
            "name": "jobId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a job details if a valid job ID was provided.",
            "schema": {
              "$ref": "#/definitions/JobData"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Use this to create a new user object.",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the user object if the creation succeeded.",
            "schema": {
              "$ref": "#/definitions/UserPostResponse"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Retrieves the details of an existing user. You need only supply the unique user identifier that was returned upon user creation.",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user to be retrieved.",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a user if a valid user ID was provided.",
            "schema": {
              "$ref": "#/definitions/UserGetResponse"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Updates the specified user by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user to be retrieved.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user object if the update succeeded.",
            "schema": {
              "$ref": "#/definitions/UserPostResponse"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "Permanently deletes a user along with all of their associated connection details. All data associated with this user will deleted. You need only supply the unique user identifier that was returned upon user creation.",
        "tags": [
          "Users"
        ],
        "summary": "Delete a user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "User identification.",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion succeeded."
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      }
    },
    "/users/{userId}/accounts": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "Returns a list with a data property that contains an array of accounts. Each entry in the array is a separate object. If no data is returned, the resulting array will be empty. Otherwise, this call returns an error in the event of1 a failure.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "summary": "Use this collection to retrieve a list of accounts. Each entry in the array is a separate account object.",
        "operationId": "getAccounts",
        "parameters": [
          {
            "type": "string",
            "description": "User identifier",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a account with details.",
            "schema": {
              "$ref": "#/definitions/AccountsResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/accounts/{accountId}": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "Returns an account if a valid account ID was provided. Returns an error otherwise.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "summary": "Use this to retrieve the details of a specific account. This request will return back an account object with the latest data since the last refresh. If you require the latest account details you will need to call the connection refresh resource.",
        "operationId": "getAccount",
        "parameters": [
          {
            "type": "string",
            "description": "User identifier",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Account identifier",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a account with details.",
            "schema": {
              "$ref": "#/definitions/AccountResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/affordability": {
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "tags": [
          "Affordability"
        ],
        "summary": "Use this to create a new affordability report.",
        "operationId": "postAffordability",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "AffordabilityPostRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AffordabilityPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a created affordability resource, if the operation succeeded.",
            "schema": {
              "$ref": "#/definitions/AffordabilityResponse"
            }
          },
          "201": {
            "description": "Returns a created affordability PDF Report, if the operation succeeded."
          },
          "204": {
            "description": "Returns no content if there are none transactions for the requested period."
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/affordability/{snapshotId}": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "tags": [
          "Affordability"
        ],
        "summary": "Retrieves the details of an affordability summary. You need only supply the unique affordability identifier.",
        "operationId": "getAffordability",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier of the affordability report to be retrieved.",
            "name": "snapshotId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a saved affordability resource JSON or PDF report file, if the operation succeeded.",
            "schema": {
              "$ref": "#/definitions/AffordabilityResponse"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/affordability/{snapshotId}/transactions": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "produces": [
          "application/json",
          "application/csv"
        ],
        "tags": [
          "Affordability"
        ],
        "summary": "Returns a paginated list with a data property that contains an array of transactions from the affordability snapshot.",
        "operationId": "getAffordabilitySnapshotTransactions",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier of the affordability report to be retrieved.",
            "name": "snapshotId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "This represents the maximum number of transactions that may be included in the response (maximum of 500). Note that by default 500 transactions are returned if this value is not specified.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a affordability resource transactions JSON or CSV file, if the operation succeeded.",
            "schema": {
              "$ref": "#/definitions/AffordabilityTransactionsResponse"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/auth_link": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "Returns the latest/last auth_link generated for the specified user. Returns an error otherwise.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "AuthLinks"
        ],
        "summary": "Use this to retrieve the latest/last auth_link generated for the specified user..",
        "operationId": "getAuthLink",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns details of a connection.",
            "schema": {
              "$ref": "#/definitions/AuthLinksResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "410": {
            "description": "Returns error indicating that access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.",
            "schema": {
              "$ref": "#/definitions/GoneError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "Create a new auth_link object by making a POST request to the auth_link endpoint. The new auth_link will effectively delete previous auth-links for that User/applicant, rendering the previous URL(s) invalid. The 'mobile' attribute is optional. If it is specified this number will take preference over the User object mobile number for 2FA SMS verification.\n\nReturns a created auth_link resource, if the operation succeeded. Returns an error if the post failed (e.g. not supplying required properties).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "AuthLinks"
        ],
        "summary": "An Auth Link object can be generated to securely capture data from a User. Using the URL allows data to be captured via the hosted Basiq Connect Consent workflow for a given User.",
        "operationId": "postAuthLink",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "AuthLinksPostData",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "mobile": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a created auth_link resource, if the operation succeeded",
            "schema": {
              "$ref": "#/definitions/AuthLinksPostResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "description": "<blockquote>Note that this action cannot be undone.</blockquote>\n\n<blockquote>The auth_link is a URL that directs a User to Basiq's hosted consent workflow to link banks and securely share data. When the user selects 'I have disclosed all my accounts' the auth_link is automatically deleted.</blockquote>\n\nReturns an empty body if the delete succeeded. Otherwise, this call returns an error in the event of a failure.",
        "tags": [
          "AuthLinks"
        ],
        "summary": "Permanently deletes an auth_link resource. Once deleted the URL associated with the deleted object will no longer be valid.",
        "operationId": "deleteAuthLink",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty body if the delete succeeded."
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      }
    },
    "/users/{userId}/connections": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "Returns a list with a data property that contains an array of connections. Each entry in the array is a separate object. If no data is returned, the resulting array will be empty.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Connections"
        ],
        "summary": "Use this to retrieve details of the connections.",
        "operationId": "getConnections",
        "parameters": [
          {
            "type": "string",
            "description": "User identifier.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Connections filters, id, status, institution.id. e.g institution.id.eq('AU00000')",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns details of connections.",
            "schema": {
              "$ref": "#/definitions/ConnectionsGetResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "description": "When a new connection request is made the server will create a job that will process the following steps:\n<table>\n<thead>\n<tr><td>#</td><td>Step</td><td>Description</td></tr>\n</thead>\n<tr>\n<td>1</td>\n<td>\nverify-credentials\n</td>\n<td>\nThe server will attempt to authenticate with the target institution using the supplied credentials.\n</td>\n<tr>\n<td>2</td>\n<td>\nretrieve-accounts\n</td>\n<td>\nThe server will retrieve the complete list of accounts and their details e.g. account number, name and balances.\n</td>\n<tr>\n<td>3</td>\n<td>\nretrieve-transactions\n</td>\n<td>\nThe server will fetch the associated transactions for each of the accounts.\n</td>\n</tr>\n</table>\n<br/>\nNote that the time it takes to complete the processes above will vary depending on the volume of data along with the general latency between our servers and the financial institution. As a rough guide this entire process could take anywhere between 3 - 30 secs.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Connections"
        ],
        "summary": "Use this to create a new connection.",
        "operationId": "postConnection",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "UserConnectionsPostData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserConnectionsPostData"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Returns the job object if the creation succeeded.",
            "schema": {
              "$ref": "#/definitions/ConnectionResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "415": {
            "description": "Returns error response code that indicates that the server refuses to accept the request because the payload format is in an unsupported format.",
            "schema": {
              "$ref": "#/definitions/UnsupportedMediaTypeError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      }
    },
    "/users/{userId}/connections/refresh": {
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Connections"
        ],
        "summary": "Use this to refresh of all connections.",
        "operationId": "refreshConnections",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Returns a created jobs resource, if the operation succeeded.",
            "schema": {
              "$ref": "#/definitions/ConnectionsRefreshResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/connections/{connectionId}": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "description": "This request will return back a connection object with most of the fields that were submitted when the connection was first created. The connection object will also return a list of URLs to the associated account, transaction and institution objects.\nThe status property of the connection object identifies the state of the connection. Use this to work out if the connection is still valid, or whether to take further action (e.g. if the connection credentials are no longer valid you may ask the user to re-submit their details).\n<br/>\nNote that due to security the loginId, password, securityCode are never returned.\nProfile data represents the name, phone, email and address of the logged in user or data sharer. Only data made available by institution can be returned. An institution may offer the option for a customer to hide all personal data or add 2FA to access the data - in this case no data would be returned for all data points. Note, that when a Connection is deleted - the profile data will also be deleted. If a phone number or email address is masked by the institution - the string will be shown exactly as it is provided by the institution.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Connections"
        ],
        "summary": "Use this to retrieve details of a specific connection.",
        "operationId": "getConnection",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier of the connection.",
            "name": "connectionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns details of a connection.",
            "schema": {
              "$ref": "#/definitions/ConnectionGetResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Connections"
        ],
        "summary": "Use this to update the details of a specific connection.",
        "operationId": "updateConnection",
        "parameters": [
          {
            "name": "UserConnectionPostData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserConnectionPostData"
            }
          },
          {
            "type": "string",
            "description": "User identifier.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Connection identifier.",
            "name": "connectionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Returns a job object if the request succeeded.",
            "schema": {
              "$ref": "#/definitions/ConnectionResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "415": {
            "description": "Returns error response code that indicates that the server refuses to accept the request because the payload format is in an unsupported format.",
            "schema": {
              "$ref": "#/definitions/UnsupportedMediaTypeError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "Once the connection has been deleted, all of the associated financial data e.g. accounts and transactions can still be accessed via the users end-point.\nNote that this action cannot be undone.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Connections"
        ],
        "summary": "Permanently deletes a connection.",
        "operationId": "deleteConnection",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier of the connection.",
            "name": "connectionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty body if the delete succeeded."
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      }
    },
    "/users/{userId}/connections/{connectionId}/refresh": {
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "Similar to when a connection is first created, the refresh resource will initiate the following series of steps to retrieve the latest financial data from the target institution:\n<table>\n<thead>\n<tr><td>#</td><td>Step</td><td>Description</td></tr>\n</thead>\n<tr><td>1</td><td>verify-credentials</td><td>The server will attempt to authenticate with the target institution using the supplied credentials.</td></tr>\n<tr><td>2</td><td>retrieve-accounts</td><td>\nThe server will retrieve the complete list of accounts and their details e.g. account number, name and balances.</td></tr>\n<tr><td>3</td><td>retrieve-transactions</td><td>The server will fetch the associated transactions for each of the accounts.</td></tr>\n</table>",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Connections"
        ],
        "summary": "Use this to retrieve the latest financial data.",
        "operationId": "refreshConnection",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier of the connection.",
            "name": "connectionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Returns a created job resource, if the operation succeeded.",
            "schema": {
              "$ref": "#/definitions/ConnectionResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      }
    },
    "/users/{userId}/expenses": {
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Expenses"
        ],
        "summary": "Use this to create a new expenses report.",
        "operationId": "postExpenses",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "ExpensesPostRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ExpensesPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a created expenses resource, if the operation succeeded.",
            "schema": {
              "$ref": "#/definitions/ExpensesResponse"
            }
          },
          "204": {
            "description": "Returns no content if there are none transactions for the requested period."
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/expenses/{snapshotId}": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "tags": [
          "Expenses"
        ],
        "summary": "Retrieves the details of an expenses summary. You need only supply the unique expenses identifier.",
        "operationId": "getExpenses",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier of the expenses report to be retrieved.",
            "name": "snapshotId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a saved expenses resource, if the operation succeeded.",
            "schema": {
              "$ref": "#/definitions/ExpensesResponse"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/income": {
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Income"
        ],
        "summary": "Use this to create a new income report.",
        "operationId": "postIncome",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "IncomePostRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IncomePostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a created income resource, if the operation succeeded.",
            "schema": {
              "$ref": "#/definitions/IncomeResponse"
            }
          },
          "204": {
            "description": "Returns no content if there are none transactions for the requested period."
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/income/{snapshotId}": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Income"
        ],
        "summary": "Retrieves the details of an income summary. You need only supply the unique income identifier.",
        "operationId": "getIncome",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier of the income report to be retrieved.",
            "name": "snapshotId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a saved income resource, if the operation succeeded.",
            "schema": {
              "$ref": "#/definitions/IncomeResponse"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/jobs": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "<b>Tracking the status of a job</b><br/>\nEvery step of the job has a status property that depicts its current state.<br/>\n<b>Find out what steps have been completed</b><br/>\nDepending on the job being executed, some jobs will have multiple steps which need to be executed, for e.g. refreshing a connection requires the following steps to be completed:\n<ol><li>Establish successful authentication with institution</li>\n<li>Fetch latest list of accounts</li>\n<li>Fetch latest list of transactions</li></ol>\nYou can keep track of the steps that have been completed by observing the results array property. As each step is successfully completed, its status will be updated and a result object with the link to the affected resource will be present. In the event that a step has failed, the result object will contain an embedded error object.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieves the details of an existing jobs. You need only supply the unique user identifier.",
        "operationId": "getUserJobs",
        "parameters": [
          {
            "type": "string",
            "description": "User identifier",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Connection identification filter. e.g. connection.id.eq('ab63cd')",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of jobs with details.",
            "schema": {
              "$ref": "#/definitions/JobsResponseResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/statements": {
      "post": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "description": "<blockquote>The endpoint also accepts csv files conforming to our file specification. Contact us directly for more details.</blockquote>\n\nCreate a new statement by uploading an official pdf bank statement or csv file statement. When a new statement request is made, the server will create a job that will process the following steps:\n<table>\n<thead><tr><td>#</td><td>Step</td><td>Description</td></tr></thead>\n<tbody>\n<tr><td>1</td><td>verify-credentials</td><td>The server will verify the file, validate the statement layout and attempt to parse the target statement</td></tr>\n<tr><td>2</td><td>retrieve-accounts</td><td>The server will retrieve the complete list of accounts and their details e.g. account number, name and balances</td></tr>\n<tr><td>3</td><td>retrieve-transactions</td><td>The server will fetch the associated transactions for each of the accounts</td></tr>\n</tbody>\n</table>\n\nYou can check the status of each step by querying the job resource (returned when the statement is created).",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Statements"
        ],
        "summary": "A user can choose to share their financial data by uploading official pdf bank statements instead of creating a bank connection. Once the statement object is successfully created you can use it to obtain the user's latest financial data extracted from the bank statement i.e. accounts and transactions.",
        "operationId": "createStatement",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier of the institution to which the statement relates e.g. \"AU01001\". Note that sandbox institutions (i.e. AU00000 do not support the file upload option",
            "name": "institutionId",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "Official PDF bank statement for the specified institution to be uploaded. Csv files conforming to our file specification are also accepted",
            "name": "statement",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Returns a job details if a valid job ID was provided.",
            "schema": {
              "$ref": "#/definitions/StatementUploadResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      }
    },
    "/users/{userId}/transactions": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "The transactions are returned sorted by account and then posted date descending order - with pending transactions appearing first. Transactions are paginated in chunks of 500. Absence of next link means that there are no more pages to retrieve.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Use this collection to retrieve a paginated list of transactions.",
        "operationId": "getTransactions",
        "parameters": [
          {
            "type": "string",
            "description": "User identifier.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 500,
            "description": "This represents the maximum number of items that may be included in the response (maximum of 500). Note that by default 500 items are returned if this value is not specified.",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": [
              "account.id",
              "transaction.postDate",
              "connection.id",
              "transaction.status",
              "institution.id",
              "transaction.direction",
              "transaction.class"
            ],
            "type": "string",
            "description": "Transaction filters.",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list with a data property that contains an array of transactions. Each entry in the array is a separate object. If no data is returned, the resulting array will be empty. ",
            "schema": {
              "$ref": "#/definitions/TransactionsGetResource"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/users/{userId}/transactions/{transactionId}": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS"
            ]
          }
        ],
        "description": "You need only supply the unique transaction identifier.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieves the details of an existing transaction.",
        "operationId": "getTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "The identifier of the user.",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier of the transaction.",
            "name": "transactionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a transaction if a valid transaction ID was provided.",
            "schema": {
              "$ref": "#/definitions/TransactionData"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "403": {
            "description": "Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.",
            "schema": {
              "$ref": "#/definitions/ForbiddenAccessError"
            }
          },
          "404": {
            "description": "Returns error indicating that server can't find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "503": {
            "description": "Returns error response code indicates that the server is not ready to handle the request.",
            "schema": {
              "$ref": "#/definitions/StatusServiceUnavailableError"
            }
          }
        }
      }
    },
    "/enrich": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Enrich"
        ],
        "summary": "The Enrich resource enables you to retrieve details by passing in a search query containing a bank transaction description.",
        "operationId": "getEnrich",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction Description",
            "name": "q",
            "in": "query",
            "required": true
          },
          {
            "pattern": "[AU|NZ]\\d{5}",
            "type": "string",
            "description": "Institution ID",
            "name": "institution",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "description": "Amount",
            "name": "amount",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Account Type",
            "name": "accountType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The service enriches transaction data with multiple attributes, returning a transaction classification and three metadata components. The transaction classification will first determine if the transaction is of type payment, transfer, cash-withdrawal, bank-fee etc. The engine then derives merchant information, purchase location and prescribes an industry standard categorisation for each payment transaction. ",
            "schema": {
              "$ref": "#/definitions/GetEnrichResponse"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          }
        }
      }
    },
    "/institutions": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "description": "NOTE: This end point requires authentication.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Institutions"
        ],
        "summary": "Retrieves institutions list.",
        "operationId": "getInstitutions",
        "parameters": [
          {
            "type": "string",
            "description": "Filter parameter can be used to filter institution list by institution property. This parameter should contain comma separated list of filter statements.</br>\nFilter statement is composed from entity name (in this case it is always `institution`), property name (e.g. `stage`), filter operator (e.g. `eq`) and quoted string value in parentasis (e.g. `('live')`). </br>\nThe Following list of regular expressions descirbes acceptable filter statements: </br>\n• `institution\\.country\\.(eq|ne)\\(('Australia'|'New Zealand')\\)` </br>\n• `institution\\.country\\.in\\(([\\w\\W]+)\\)` </br>\n• `institution\\.tier\\.(eq|ne)\\(('1'|'2'|'3'|'4')\\)` </br>\n• `institution\\.tier\\.in\\('[1-4]'(,'[1-4]')*\\)` </br>\n• `institution\\.authorization\\.(eq|ne)\\(('user'|'other')\\)` </br>\n• `institution\\.serviceType\\.(eq|ne)\\(('Personal Banking'|'Business Banking'|'Card Access'|'Test')\\)` </br>\n• `institution\\.institutionType\\.(eq|ne)\\(('Bank'|'Bank \\(Foreign\\)'|'Test Bank'|'Credit Union'|'Financial Services'|'Superannuation')\\)` </br>\n• `institution\\.stage\\.(eq|ne)\\(('live'|'beta'|'alpha')\\)` </br>\nMultiple filter definitions should be separated with comma (`,`). </br>\nFor example, this is filter statement will keep only live tier 1 and tier 2 institutions: `filter=institution.stage.eq('live'),institution.tier.in('1','2')` </br>",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns data of single institution.",
            "schema": {
              "$ref": "#/definitions/InstitutionsList"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Returns error that indicates unauthorized access.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/institutions/{institutionID}": {
      "get": {
        "security": [
          {
            "application": [
              "SERVER_ACCESS",
              "CLIENT_ACCESS"
            ]
          }
        ],
        "description": "NOTE: This end point requires authentication.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Institutions"
        ],
        "summary": "Retrieves data for single institution.",
        "operationId": "getInstitution",
        "parameters": [
          {
            "pattern": "^[A-Z]{2}[0-9]{5}$",
            "type": "string",
            "description": "Institution ID",
            "name": "institutionID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns data of single institution.",
            "schema": {
              "$ref": "#/definitions/Institution"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Returns error that indicates unauthorized access.",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "Returns error indicating that server cannot find requested resource.",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/public/institutions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Institutions"
        ],
        "summary": "Retrieves publically availiable (no authentication required) institutions list.",
        "operationId": "getPublicInstitutions",
        "parameters": [
          {
            "type": "string",
            "description": "Filter parameter can be used to filter institution list by institution property. This parameter should contain comma separated list of filter statements.</br>\nFilter statement is composed from entity name (in this case it is always `institution`), property name (e.g. `stage`), filter operator (e.g. `eq`) and quoted string value in parentasis (e.g. `('live')`). </br>\nThe Following list of regular expressions descirbes acceptable filter statements: </br>\n• `institution\\.country\\.(eq|ne)\\(('Australia'|'New Zealand')\\)` </br>\n• `institution\\.country\\.in\\(([\\w\\W]+)\\)` </br>\n• `institution\\.tier\\.(eq|ne)\\(('1'|'2'|'3'|'4')\\)` </br>\n• `institution\\.tier\\.in\\('[1-4]'(,'[1-4]')*\\)` </br>\n• `institution\\.authorization\\.(eq|ne)\\(('user'|'other')\\)` </br>\n• `institution\\.serviceType\\.(eq|ne)\\(('Personal Banking'|'Business Banking'|'Card Access'|'Test')\\)` </br>\n• `institution\\.institutionType\\.(eq|ne)\\(('Bank'|'Bank \\(Foreign\\)'|'Test Bank'|'Credit Union'|'Financial Services'|'Superannuation')\\)` </br>\n• `institution\\.stage\\.(eq|ne)\\(('live'|'beta'|'alpha')\\)` </br>\nMultiple filter definitions should be separated with comma (`,`). </br>\nFor example, this is filter statement will keep only live tier 1 and tier 2 institutions: `filter=institution.stage.eq('live'),institution.tier.in('1','2')` </br>",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns data of single institution.",
            "schema": {
              "$ref": "#/definitions/InstitutionsList"
            }
          },
          "400": {
            "description": "Returns error that server cannot or will not process the request due to something that is perceived to be a client error.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "500": {
            "description": "Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccountClass": {
      "type": "object",
      "required": [
        "type",
        "product"
      ],
      "properties": {
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "product": {
          "description": "Product name.",
          "type": "string",
          "example": "saver"
        },
        "type": {
          "description": "Account type",
          "type": "string",
          "example": "savings"
        }
      }
    },
    "AccountHolder": {
      "type": "object",
      "required": [
        "type",
        "product"
      ],
      "properties": {
        "product": {
          "description": "Identifies the Product as defined by institution",
          "type": "string",
          "example": "Hooli Transaction"
        },
        "type": {
          "description": "Identifies the Account type defined by institution",
          "type": "string",
          "example": "transaction"
        }
      }
    },
    "AccountLinks": {
      "type": "object",
      "required": [
        "self",
        "transactions",
        "connection",
        "institution"
      ],
      "properties": {
        "connection": {
          "description": "always null",
          "type": "string",
          "x-nullable": true,
          "example": "null"
        },
        "institution": {
          "description": "institution link to the institution associated with this account",
          "type": "string",
          "example": "https://au-api.basiq.io/institutions/AU00000"
        },
        "self": {
          "description": "self link to the requested account",
          "type": "string",
          "example": "https://au-api.basiq.io/users/cd6fbd92/accounts/319ae910"
        },
        "transactions": {
          "description": "transactions link to the transactions associated with this account",
          "type": "string",
          "example": "https://au-api.basiq.io/users/ea3a81/transactions?filter=account.id.eq('s55bf3')"
        }
      }
    },
    "AccountResponseResource": {
      "description": "Container object, containing account details.\n\nThe account object represents an account held with a financial institution (e.g. a savings account). You can use this object to retrieve specific account details such as the account number, balance and available funds.",
      "type": "object",
      "title": "AccountResponseResource",
      "required": [
        "type",
        "id",
        "accountNo",
        "name",
        "currency",
        "class",
        "balance",
        "availableFunds",
        "lastUpdated",
        "transactionIntervals",
        "institution",
        "accountHolder",
        "connection",
        "status",
        "links"
      ],
      "properties": {
        "accountHolder": {
          "description": "The name of the account holder as returned by the institution. No formatting is applied. Returns a string or null when not available.",
          "type": "string",
          "x-nullable": true,
          "example": "GAVIN BELSON"
        },
        "accountNo": {
          "description": "Full account number.",
          "type": "string",
          "example": "600000-157441965"
        },
        "availableFunds": {
          "description": "Funds that are available to an account holder for withdrawal or other use. This may include funds from an overdraft facility or line of credit. As well as funds classified as the available balance, such as from cleared and existing deposits.",
          "type": "string",
          "x-nullable": true,
          "example": "420.28"
        },
        "balance": {
          "description": "Amount of funds in the account right now - excluding any pending transactions. For a credit card this would be zero or the minus amount spent.",
          "type": "string",
          "x-nullable": true,
          "example": "356.50"
        },
        "class": {
          "$ref": "#/definitions/AccountClass"
        },
        "connection": {
          "description": "The id of the connection resource that was used to retrieve the account.",
          "type": "string",
          "example": "8fce3b"
        },
        "currency": {
          "description": "The currency the funds are stored in, using ISO 4217 standard.",
          "type": "string",
          "example": "AUD"
        },
        "id": {
          "description": "Uniquely identifies the account.",
          "type": "string",
          "example": "s55bf3"
        },
        "institution": {
          "description": "The id of the institution resource the account originated from.",
          "type": "string",
          "example": "AU00000"
        },
        "lastUpdated": {
          "description": "Timestamp of last update, UTC, RFC 3339 format e.g. \"2017-09-28T13:39:33Z\"",
          "type": "string",
          "example": "2019-09-28T13:39:33Z"
        },
        "links": {
          "$ref": "#/definitions/AccountLinks"
        },
        "name": {
          "description": "Account name as defined by institution or user.",
          "type": "string",
          "example": "Master Savings"
        },
        "status": {
          "description": "Indicates the account status. Always set to 'available'. Field kept for backward compatibility. Possible values include:\n<ul><li>available newest account data is available.</li></ul>",
          "type": "string",
          "enum": [
            "available",
            "unavailable"
          ],
          "example": "available"
        },
        "transactionIntervals": {
          "description": "An array of date intervals indicating the coverage of the transaction data relating to the account.\nWill return a single element for accounts sourced from a single bank connection.\nWill return multiple elements in cases where there have been multiple PDF/CSV uploads for an account.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountTransactionInterval"
          }
        },
        "type": {
          "description": "Always \"account\".",
          "type": "string",
          "example": "account"
        }
      }
    },
    "AccountTransactionInterval": {
      "type": "object",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "description": "Date of first transaction on this account",
          "type": "string",
          "example": "2018-07-01"
        },
        "to": {
          "description": "Date of last transaction on this account",
          "type": "string",
          "example": "2018-12-30"
        }
      }
    },
    "AccountsContainer": {
      "type": "object",
      "required": [
        "type",
        "data"
      ],
      "properties": {
        "data": {
          "description": "Accounts details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountsData"
          }
        },
        "type": {
          "description": "Type always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "AccountsData": {
      "type": "object",
      "required": [
        "type",
        "id",
        "accountNo",
        "name",
        "currency",
        "class",
        "balance",
        "availableFunds",
        "lastUpdated",
        "status",
        "links"
      ],
      "properties": {
        "accountNo": {
          "description": "Account number",
          "type": "string",
          "example": "105148119695"
        },
        "availableFunds": {
          "description": "Account available funds, nullable.",
          "type": "string",
          "x-nullable": true,
          "example": "200.54"
        },
        "balance": {
          "description": "Account balance, nullable.",
          "type": "string",
          "x-nullable": true,
          "example": "100.12"
        },
        "class": {
          "$ref": "#/definitions/AccountClass"
        },
        "currency": {
          "description": "Currency",
          "type": "string",
          "example": "AUD"
        },
        "id": {
          "description": "Account identification.",
          "type": "string",
          "example": "319ae910"
        },
        "lastUpdated": {
          "description": "Account last updated date and time.",
          "type": "string",
          "example": "2017-09-28T11:15:09.756Z"
        },
        "links": {
          "$ref": "#/definitions/ConnectionAccountLinks"
        },
        "name": {
          "description": "Account name.",
          "type": "string",
          "example": "Business account"
        },
        "status": {
          "description": "Account status.",
          "type": "string",
          "enum": [
            "available",
            "unavailable"
          ],
          "example": "available"
        },
        "type": {
          "description": "Type always \"account\".",
          "type": "string",
          "example": "account"
        }
      }
    },
    "ConnectionAccountLinks": {
      "type": "object",
      "required": [
        "self",
        "transactions"
      ],
      "properties": {
        "self": {
          "description": "self link to the requested account",
          "type": "string",
          "example": "https://au-api.basiq.io/users/cd6fbd92/accounts/319ae910"
        },
        "transactions": {
          "description": "transactions link to the transactions associated with this account",
          "type": "string",
          "example": "https://au-api.basiq.io/users/ea3a81/transactions?filter=account.id.eq('s55bf3')"
        }
      }
    },
    "AccountsResponseResource": {
      "type": "object",
      "required": [
        "type",
        "data",
        "links"
      ],
      "properties": {
        "data": {
          "description": "Container object, containing account details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountResponseResource"
          }
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "Type of the response, always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "AffordabilityAssetsData": {
      "type": "object",
      "required": [
        "institution",
        "type",
        "balance",
        "availableFunds",
        "previous6Months",
        "currency",
        "account"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountHolder"
        },
        "availableFunds": {
          "description": "The available funds at the time of the query.",
          "type": "string"
        },
        "balance": {
          "description": "The currency in which the account is recorded.",
          "type": "string",
          "example": "35298.67"
        },
        "currency": {
          "description": "The currency in which the account is recorded.",
          "type": "string",
          "example": "AUD"
        },
        "institution": {
          "description": "The name of the financial institution with whom the account is held.",
          "type": "string",
          "example": "Hooli"
        },
        "previous6Months": {
          "$ref": "#/definitions/AssetsPrevious6MonthsData"
        },
        "type": {
          "description": "Type account",
          "type": "string",
          "example": "account"
        }
      }
    },
    "AffordabilityPostRequest": {
      "type": "object",
      "properties": {
        "accounts": {
          "description": "The list of accounts to be included in the affordability otherwise all the user accounts will be included in the report",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "s55bf3",
            "s55bf4"
          ]
        },
        "fromMonth": {
          "description": "The first/start month to be included in the affordability output e.g. \"fromMonth\":\"2019-05\". Resulting affordability resource will be based on data between fromMonth and toMonth.",
          "type": "string",
          "example": "2019-05"
        },
        "toMonth": {
          "description": "The last/end month to be included in the affordability output e.g. \"toMonth\":\"2019-09\". Resulting affordability resource will be based on data between fromMonth and toMonth.",
          "type": "string",
          "example": "2019-09"
        }
      }
    },
    "AffordabilityRegularIncomeData": {
      "type": "object",
      "required": [
        "previous3Months"
      ],
      "properties": {
        "previous3Months": {
          "$ref": "#/definitions/AvgMonthlyData"
        }
      }
    },
    "AffordabilityResponse": {
      "description": "Container object, containing affordability details.\n\nThe affordability object includes a summary of financial position, assets, liabilities, with links to an income object and an expenses object, for an individual user for account and transaction data stored against that user.",
      "type": "object",
      "title": "AffordabilityResponse",
      "required": [
        "type",
        "id",
        "fromMonth",
        "toMonth",
        "generatedDate",
        "summary",
        "assets",
        "liabilities",
        "external",
        "links"
      ],
      "properties": {
        "assets": {
          "description": "Assets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AffordabilityAssetsData"
          }
        },
        "coverageDays": {
          "description": "Number of days covered by the report",
          "type": "integer",
          "format": "int64",
          "example": 392
        },
        "external": {
          "description": "External",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalLiabilityData"
          }
        },
        "fromMonth": {
          "description": "Start month for the period for which the Affordability summary is generated. The period of time relates to the account and transaction data used as input into the report.",
          "type": "string",
          "example": "2019-03"
        },
        "generatedDate": {
          "description": "Date the report was generated.",
          "type": "string",
          "example": "2020-03-26T06:56:44"
        },
        "id": {
          "description": "Uniquely identifies the affordability report.",
          "type": "string",
          "example": "s55bf3"
        },
        "liabilities": {
          "$ref": "#/definitions/LiabilitiesData"
        },
        "links": {
          "$ref": "#/definitions/GetAffordabilityLinks"
        },
        "summary": {
          "$ref": "#/definitions/AffordabilitySummary"
        },
        "toMonth": {
          "description": "End month (usually the current month) for the period for which the Affordability summary is generated.",
          "type": "string",
          "example": "2020-03"
        },
        "type": {
          "description": "Always \"affordability\".",
          "type": "string",
          "example": "affordability"
        }
      }
    },
    "AffordabilitySummary": {
      "type": "object",
      "required": [
        "assets",
        "liabilities",
        "netPosition",
        "creditLimit",
        "regularIncome",
        "expenses",
        "savings",
        "loanRepaymentMonthly",
        "potentialLiabilitiesMonthly"
      ],
      "properties": {
        "assets": {
          "description": "Total of cash based assets",
          "type": "string",
          "x-nullable": true,
          "example": "59983.11"
        },
        "creditLimit": {
          "description": "Total credit limit across all credit cards and overdrafts",
          "type": "string",
          "x-nullable": true,
          "example": "20000.00"
        },
        "expenses": {
          "description": "Provides an average of monthly expenses calculated for the whole period of data retrieved (e.g. 13 months)",
          "type": "string",
          "example": "-12046.00"
        },
        "liabilities": {
          "description": "Total of account based liabilities split into credit and loan liabilities",
          "type": "string",
          "x-nullable": true,
          "example": "-323946.20"
        },
        "loanRepaymentMonthly": {
          "description": "Total of all repayments monthly to disclosed loan liabilities as an average monthly amount",
          "type": "string",
          "x-nullable": true,
          "example": "5284.00"
        },
        "netPosition": {
          "description": "Total assets minus total liabilities",
          "type": "string",
          "x-nullable": true,
          "example": "-263963.09"
        },
        "potentialLiabilitiesMonthly": {
          "description": "Total of all repayments monthly to potential undisclosed loan liabilities as an average monthly amount",
          "type": "string",
          "x-nullable": true,
          "example": "-1727.00"
        },
        "regularIncome": {
          "$ref": "#/definitions/AffordabilityRegularIncomeData"
        },
        "savings": {
          "description": "Average of monthly savings calculated for the whole period of data retrieved (e.g. 13 months)",
          "type": "string",
          "x-nullable": true,
          "example": "93.00"
        }
      }
    },
    "AffordabilityTransactionLinks": {
      "type": "object",
      "required": [
        "account",
        "institution"
      ],
      "properties": {
        "account": {
          "description": "Url of the account.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/6a52015e/accounts/31eb30a0"
        },
        "institution": {
          "description": "Url of the institution.",
          "type": "string",
          "example": "https://au-api.basiq.io/institutions/AU00000"
        }
      }
    },
    "AffordabilityTransactionsGetLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "next": {
          "description": "Url to next result.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/115dc708/affordability/9dedbb28/transactions?next=9b7d9a64"
        },
        "self": {
          "description": "Self reference url.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/115dc708/affordability/9dedbb28/transactions"
        }
      }
    },
    "AffordabilityTransactionsResponse": {
      "description": "Container object, containing affordability snapshot transactions.",
      "type": "object",
      "title": "AffordabilityTransactionsResponse",
      "required": [
        "type",
        "count",
        "size",
        "data",
        "links"
      ],
      "properties": {
        "count": {
          "description": "Count of the transactions in the response.",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionDataAffordability"
          }
        },
        "links": {
          "$ref": "#/definitions/AffordabilityTransactionsGetLinks"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "example": 500
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "AssetsPrevious6MonthsData": {
      "type": "object",
      "required": [
        "minBalance",
        "maxBalance"
      ],
      "properties": {
        "maxBalance": {
          "type": "string",
          "x-nullable": true,
          "example": "38309.44"
        },
        "minBalance": {
          "type": "string",
          "x-nullable": true,
          "example": "10032.81"
        }
      }
    },
    "AuthLinkLinks": {
      "type": "object",
      "required": [
        "self",
        "public"
      ],
      "properties": {
        "public": {
          "description": "Public URL of auth link.",
          "type": "string",
          "example": "https://connect.basiq.io/63448be4"
        },
        "self": {
          "description": "URL of the resource",
          "type": "string",
          "example": "/users/ec4ea48d/auth_link"
        }
      }
    },
    "AuthLinksPostResponseResource": {
      "type": "object",
      "required": [
        "type",
        "userId",
        "expiresAt",
        "mobile"
      ],
      "properties": {
        "expiresAt": {
          "description": "The date time of auth link expiry.",
          "type": "string",
          "example": "2019-11-21T04:08:50Z"
        },
        "links": {
          "$ref": "#/definitions/AuthLinkLinks"
        },
        "mobile": {
          "description": "A user's mobile phone, used as for authentication.",
          "type": "string",
          "example": "+61410000000"
        },
        "type": {
          "description": "Type of the response, always \"auth_link\".",
          "type": "string",
          "example": "auth_link"
        },
        "userId": {
          "description": "A string that uniquely identifies the user.",
          "type": "string",
          "example": "ec4ea48d"
        }
      }
    },
    "AuthLinksResponseResource": {
      "type": "object",
      "required": [
        "type",
        "id",
        "userId",
        "expiresAt",
        "mobile"
      ],
      "properties": {
        "expiresAt": {
          "description": "The date time of auth link expiry.",
          "type": "string",
          "example": "2019-11-21T04:08:50Z"
        },
        "id": {
          "description": "Uniquely identifies the auth link.",
          "type": "string",
          "example": "63448be4"
        },
        "links": {
          "$ref": "#/definitions/AuthLinkLinks"
        },
        "mobile": {
          "description": "A user's mobile phone, used as for authentication.",
          "type": "string",
          "example": "+61410000000"
        },
        "type": {
          "description": "Type of the response, always \"auth_link\".",
          "type": "string",
          "example": "auth_link"
        },
        "userId": {
          "description": "A string that uniquely identifies the user.",
          "type": "string",
          "example": "ec4ea48d"
        }
      }
    },
    "AvgMonthlyData": {
      "type": "object",
      "required": [
        "avgMonthly"
      ],
      "properties": {
        "avgMonthly": {
          "type": "string",
          "x-nullable": true,
          "example": "18098.00"
        }
      }
    },
    "BadRequestError": {
      "type": "object",
      "required": [
        "type",
        "correlationId",
        "data"
      ],
      "properties": {
        "correlationId": {
          "description": "Unique identifier for this particular occurrence of the problem.",
          "type": "string",
          "example": "ac5ah5i"
        },
        "data": {
          "description": "Error data.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "code"
            ],
            "properties": {
              "code": {
                "description": "Application-specific error code, expressed as a string value.",
                "type": "string",
                "enum": [
                  "parameter-not-supplied",
                  "parameter-not-valid",
                  "unsupported-accept",
                  "invalid-content",
                  "institution-not-supported",
                  "temporary-unavailable",
                  "invalid-credentials"
                ],
                "example": "parameter-not-valid"
              },
              "detail": {
                "description": "Human-readable explanation specific to this occurrence of the problem.",
                "type": "string",
                "example": "ID value is not valid."
              },
              "source": {
                "$ref": "#/definitions/Source"
              },
              "title": {
                "description": "Title of the error",
                "type": "string",
                "example": "Parameter not valid."
              },
              "type": {
                "description": "Type of the response, always \"error\"",
                "type": "string",
                "example": "error"
              }
            }
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "CategoryDataExpenses": {
      "description": "Category data",
      "type": "object",
      "required": [
        "expenseClass"
      ],
      "properties": {
        "expenseClass": {
          "$ref": "#/definitions/ExpensesClass"
        }
      }
    },
    "ChangeHistoryAffordabilityData": {
      "type": "object",
      "required": [
        "direction",
        "amount",
        "date",
        "source"
      ],
      "properties": {
        "amount": {
          "description": "Amount loan-interest or loan-repayment",
          "type": "string",
          "example": "5768.00"
        },
        "date": {
          "description": "Date",
          "type": "string",
          "format": "date",
          "example": "2019-03-31"
        },
        "direction": {
          "description": "Debit or Credit",
          "type": "string",
          "enum": [
            "debit",
            "credit"
          ],
          "example": "credit"
        },
        "source": {
          "description": "Cleaned transaction description",
          "type": "string",
          "example": "Transfer Platnm Homeloan 346454"
        }
      }
    },
    "ChangeHistoryExpensesClass": {
      "description": "Amount classified as spent that month (repeated each month of data)",
      "type": "object",
      "required": [
        "date",
        "amount"
      ],
      "properties": {
        "amount": {
          "description": "Amount of expense that period",
          "type": "string",
          "example": "-11.00"
        },
        "date": {
          "description": "Month expense relates",
          "type": "string",
          "example": "2018-09"
        }
      }
    },
    "ChangeHistoryExternal": {
      "type": "object",
      "required": [
        "amount",
        "date",
        "source"
      ],
      "properties": {
        "amount": {
          "description": "Amount of payment",
          "type": "string",
          "example": "-146.50"
        },
        "date": {
          "description": "Date",
          "type": "string",
          "format": "date",
          "example": "2019-03-31"
        },
        "source": {
          "description": "Full transaction description",
          "type": "string",
          "example": "AFTERPAY MELBOURNE VI AUS Card xx3854 Value Date: 10/11/2019"
        }
      }
    },
    "ChangeHistoryIncome": {
      "type": "object",
      "required": [
        "date",
        "amount",
        "source"
      ],
      "properties": {
        "amount": {
          "description": "Amount of income for that period",
          "type": "string",
          "example": "62.00"
        },
        "date": {
          "description": "Date income received",
          "type": "string",
          "example": "2018-10-13T20:03:37"
        },
        "source": {
          "description": "Source income (cleaned transaction description)",
          "type": "string",
          "example": "savings interest cr bal - Account 1"
        }
      }
    },
    "ClassResourceExpenses": {
      "description": "Average monthly amount for given class for defined period",
      "type": "object",
      "required": [
        "avgMonthly",
        "summary",
        "changeHistory"
      ],
      "properties": {
        "avgMonthly": {
          "description": "Average amount monthly",
          "type": "string",
          "example": "-421.00"
        },
        "changeHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeHistoryExpensesClass"
          }
        },
        "summary": {
          "description": "Summary period \"monthly\"",
          "type": "string",
          "example": "monthly"
        }
      }
    },
    "ConnectionGetResponseResource": {
      "description": "Object containing details for connection post.",
      "type": "object",
      "title": "ConnectionGetResponseResource",
      "required": [
        "type",
        "id",
        "createdDate",
        "institution",
        "links"
      ],
      "properties": {
        "accounts": {
          "$ref": "#/definitions/AccountsContainer"
        },
        "id": {
          "description": "A string that uniquely identifies the user connection.",
          "type": "string",
          "example": "61723"
        },
        "institution": {
          "$ref": "#/definitions/ConnectionInstitution"
        },
        "createdDate": {
          "description": "Created date of the connection, available only for SERVER_SCOPE.",
          "type": "string",
          "example": "2019-07-29T07:34:09Z"
        },
        "lastUsed": {
          "description": "UTC Date and Time of when the connection was last used, in RFC 3339 format, available only for SERVER_SCOPE.",
          "type": "string",
          "example": "2020-06-22T11:15:09Z"
        },
        "links": {
          "$ref": "#/definitions/GetConnectionLinks"
        },
        "profile": {
          "$ref": "#/definitions/ConnectionProfile"
        },
        "status": {
          "description": "Indicates the connection status, available only for SERVER_SCOPE.\nPossible values include:\n<ul>\n<li>pending - the connection is in this status briefly until credentials are verified</li>\n<li>active - the connection is valid (is working!) and the credentials have been verified (the jobs steps will continue) </li>\n<li>invalid -  the connection is no longer valid and requires the user to update their logon details. Invalid connections cannot refreshed until the password is updated. </li>\n</ul>",
          "type": "string",
          "enum": [
            "active",
            "pending",
            "invalid"
          ],
          "example": "active"
        },
        "type": {
          "description": "Type, always \"connection\".",
          "type": "string",
          "example": "connection"
        }
      }
    },
    "ConnectionInstitution": {
      "description": "Institution details.",
      "type": "object",
      "title": "ConnectionInstitution",
      "required": [
        "type",
        "id",
        "links"
      ],
      "properties": {
        "id": {
          "description": "Institution id",
          "type": "string",
          "example": "AU00000"
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "Always \"institution\".",
          "type": "string",
          "example": "institution"
        }
      }
    },
    "ConnectionProfile": {
      "type": "object",
      "required": [
        "fullName",
        "firstName",
        "lastName",
        "middleName",
        "phoneNumbers",
        "emailAddresses",
        "physicalAddresses"
      ],
      "properties": {
        "emailAddresses": {
          "description": "User email address",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "gavin@hooli.com"
          ]
        },
        "firstName": {
          "description": "User first name",
          "type": "string",
          "example": "Gavin"
        },
        "fullName": {
          "description": "User full name",
          "type": "string",
          "example": "Gavin Belson"
        },
        "lastName": {
          "description": "User last name",
          "type": "string",
          "example": "Belson"
        },
        "middleName": {
          "description": "User middle name",
          "type": "string"
        },
        "phoneNumbers": {
          "description": "User phone number",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "XXXX 888 991"
          ]
        },
        "physicalAddresses": {
          "description": "Physical user addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhysicalAddresses"
          }
        }
      }
    },
    "ConnectionResponseResource": {
      "description": "Object containing details for connection post.",
      "type": "object",
      "title": "ConnectionResponseResource",
      "required": [
        "type",
        "id",
        "links"
      ],
      "properties": {
        "id": {
          "description": "Job identification.",
          "type": "string",
          "example": "29523951"
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "Type, always \"job\".",
          "type": "string",
          "example": "job"
        }
      }
    },
    "ConnectionsData": {
      "type": "object",
      "required": [
        "type",
        "id",
        "createdDate",
        "links",
        "institution"
      ],
      "properties": {
        "createdDate": {
          "description": "Created date of the connection, available only for SERVER_SCOPE.",
          "type": "string",
          "example": "2019-07-29T07:34:09Z"
        },
        "id": {
          "description": "Connection identification.",
          "type": "string",
          "example": "61723"
        },
        "institution": {
          "$ref": "#/definitions/ConnectionInstitution"
        },
        "lastUsed": {
          "description": "Connection last used date, available only for SERVER_SCOPE.",
          "type": "string",
          "example": "2020-06-22T11:15:09Z"
        },
        "links": {
          "$ref": "#/definitions/GetConnectionsLinks"
        },
        "status": {
          "description": "Connection status, available only for SERVER_SCOPE.",
          "type": "string",
          "enum": [
            "active",
            "pending",
            "invalid"
          ],
          "example": "active"
        },
        "type": {
          "description": "Type, always \"connection\".",
          "type": "string",
          "example": "connection"
        }
      }
    },
    "ConnectionsGetResponseResource": {
      "description": "Object containing details for connections.",
      "type": "object",
      "title": "ConnectionsGetResponseResource",
      "required": [
        "type"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectionsData"
          }
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "Type, always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "ConnectionsRefreshResource": {
      "description": "Object containing details for connections refresh.",
      "type": "object",
      "title": "ConnectionsRefreshResource",
      "required": [
        "type",
        "data"
      ],
      "properties": {
        "data": {
          "description": "Job details data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectionResponseResource"
          }
        },
        "type": {
          "description": "Type, always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "CreditLiabilities": {
      "type": "object",
      "required": [
        "currency",
        "balance",
        "availableFunds",
        "account",
        "institution",
        "previousMonth",
        "previous6Months",
        "creditLimit"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountHolder"
        },
        "availableFunds": {
          "description": "The available funds at the time of the query.",
          "type": "string",
          "x-nullable": true,
          "example": "8286.80"
        },
        "balance": {
          "description": "The balance at the time of the query.",
          "type": "string",
          "x-nullable": true,
          "example": "-11713.20"
        },
        "creditLimit": {
          "description": "Total credit limit available for the specified credit facility.",
          "type": "string",
          "x-nullable": true,
          "example": "20000.00"
        },
        "currency": {
          "description": "The currency in which the account is recorded.",
          "type": "string",
          "example": "AUD"
        },
        "institution": {
          "description": "The name of the financial institution with whom the account is held.",
          "type": "string",
          "example": "Hooli"
        },
        "previous6Months": {
          "$ref": "#/definitions/Previous6MonthsCreditLiabilities"
        },
        "previousMonth": {
          "$ref": "#/definitions/PreviousMonthDataLiabilities"
        }
      }
    },
    "CurrentIrregularSource": {
      "type": "object",
      "required": [
        "date",
        "amount"
      ],
      "properties": {
        "amount": {
          "description": "Most recent irregular income payment amount",
          "type": "string",
          "example": "62.00"
        },
        "date": {
          "description": "Most recent irregular income payment date",
          "type": "string",
          "example": "2018-10-13T20:03:37"
        }
      }
    },
    "CurrentOtherCreditSource": {
      "type": "object",
      "required": [
        "date",
        "amount",
        "otherCreditLabel"
      ],
      "properties": {
        "amount": {
          "description": "Most recent irregular income payment amount",
          "type": "string",
          "example": "92.99"
        },
        "date": {
          "description": "Most recent irregular income payment date",
          "type": "string",
          "example": "2019-10-29T00:00:00"
        },
        "otherCreditLabel": {
          "description": "Description of the other credit series e.g. 'former regular income'",
          "type": "string",
          "example": "regular income small amount"
        }
      }
    },
    "CurrentRegularSource": {
      "type": "object",
      "required": [
        "date",
        "amount",
        "nextDate"
      ],
      "properties": {
        "amount": {
          "description": "Most recent regular income payment amount",
          "type": "string",
          "example": "18098.00"
        },
        "date": {
          "description": "Most recent regular income payment date",
          "type": "string",
          "example": "2018-11-30T09:23:37"
        },
        "nextDate": {
          "description": "Predicted next occurrence for regular income (note: where the pattern has recently ceased there would be no predicted next occurrence)",
          "type": "string",
          "x-nullable": true,
          "example": "2018-12-30T18:30:49"
        }
      }
    },
    "ExpensesClass": {
      "description": "Class represents one class of classification system",
      "type": "object",
      "required": [
        "classCode",
        "classTitle",
        "divisionCode",
        "divisionTitle"
      ],
      "properties": {
        "classCode": {
          "description": "Classification code for HEC classification: 4 levels class, group, subdivision and division.",
          "type": "string",
          "example": "0703030101"
        },
        "classTitle": {
          "description": "Classification code for HEC classification: 4 levels class, group, subdivision and division.",
          "type": "string",
          "example": "Non-electrical household appliances"
        },
        "divisionCode": {
          "type": "string",
          "example": "04"
        },
        "divisionTitle": {
          "type": "string",
          "example": "Alcoholic beverages"
        }
      }
    },
    "ExpensesLinks": {
      "type": "object",
      "required": [
        "self",
        "accounts"
      ],
      "properties": {
        "accounts": {
          "description": "Links of accounts",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "https://au-api.basiq.io/users/25c8d1ed77/accounts/s55bf5",
            "https://au-api.basiq.io/users/25c8d1ed77/accounts/s55bf4"
          ]
        },
        "self": {
          "description": "Link to the requested expenses resource",
          "type": "string",
          "example": "https://au-api.basiq.io/users/25c8d1ed77/expenses/s55bf4"
        }
      }
    },
    "ExpensesPostRequest": {
      "type": "object",
      "properties": {
        "accounts": {
          "description": "The list of accounts to be included in the expenses otherwise all the user accounts will be included in the report",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "s55bf3",
            "s55bf4"
          ]
        },
        "fromMonth": {
          "description": "The first/start month to be included in the expense output e.g. \"fromMonth\":\"2019-05\". Resulting expenses resource will be based on data between fromMonth and toMonth.",
          "type": "string",
          "example": "2019-05"
        },
        "toMonth": {
          "description": "The last/end month to be included in the expense output e.g. \"toMonth\":\"2019-09\". Resulting expenses resource will be based on data between fromMonth and toMonth.",
          "type": "string",
          "example": "2019-09"
        }
      }
    },
    "ExpensesResponse": {
      "description": "Container object, containing expenses details.\n\nThe Expenses object returns an aggregated list of expenses by category of spend.",
      "type": "object",
      "title": "ExpensesResponse",
      "required": [
        "type",
        "id",
        "fromMonth",
        "toMonth",
        "payments",
        "cashWithdrawals",
        "bankFees",
        "loanInterests",
        "loanRepayments",
        "externalTransfers"
      ],
      "properties": {
        "bankFees": {
          "$ref": "#/definitions/ClassResourceExpenses"
        },
        "cashWithdrawals": {
          "$ref": "#/definitions/ClassResourceExpenses"
        },
        "coverageDays": {
          "description": "Number of days covered by the report",
          "type": "integer",
          "format": "int64",
          "example": 392
        },
        "externalTransfers": {
          "$ref": "#/definitions/ClassResourceExpenses"
        },
        "fromMonth": {
          "description": "First 'month' occurrence of expenses categorised going back as far as 13 months.",
          "type": "string",
          "example": "2017-12"
        },
        "id": {
          "description": "Uniquely identifies the expenses report.",
          "type": "string",
          "example": "s55bf3"
        },
        "links": {
          "$ref": "#/definitions/ExpensesLinks"
        },
        "loanInterests": {
          "$ref": "#/definitions/ClassResourceExpenses"
        },
        "loanRepayments": {
          "$ref": "#/definitions/ClassResourceExpenses"
        },
        "payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentsSummaryExpenses"
          }
        },
        "toMonth": {
          "description": "Latest 'month' occurrence of expenses categorised.",
          "type": "string",
          "example": "2018-12"
        },
        "type": {
          "description": "Value of this resource is \"expenses\".",
          "type": "string",
          "example": "expenses"
        }
      }
    },
    "ExternalLiabilityData": {
      "type": "object",
      "required": [
        "source",
        "payments",
        "changeHistory"
      ],
      "properties": {
        "changeHistory": {
          "description": "Each transaction (repeated for each source ordered by most recent)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeHistoryExternal"
          }
        },
        "payments": {
          "description": "Aggregated attributes relating to payments for this source (identified as an external liability)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalPayment"
          }
        },
        "source": {
          "description": "Source of external liability (cleaned transaction description).",
          "type": "string",
          "example": "afterpay"
        }
      }
    },
    "ExternalPayment": {
      "type": "object",
      "required": [
        "first",
        "last",
        "noOccurrences",
        "amountAvg",
        "amountAvgMonthly",
        "total"
      ],
      "properties": {
        "amountAvg": {
          "description": "Number of occurrences for same source (in this group)",
          "type": "string",
          "example": "-50.50"
        },
        "amountAvgMonthly": {
          "description": "Average monthly payment amount",
          "type": "string",
          "example": "-20.00"
        },
        "first": {
          "description": "Date of first payment",
          "type": "string",
          "format": "date",
          "example": "2019-03-15"
        },
        "last": {
          "description": "Date of last payment",
          "type": "string",
          "format": "date",
          "example": "2020-03-15"
        },
        "noOccurrences": {
          "description": "Number of occurrences for same source (in this group)",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "total": {
          "description": "Amount of total payments identified for source in the affordability snapshot",
          "type": "string",
          "example": "-146.50"
        }
      }
    },
    "ForbiddenAccessError": {
      "type": "object",
      "required": [
        "type",
        "correlationId",
        "data"
      ],
      "properties": {
        "correlationId": {
          "description": "Unique identifier for this particular occurrence of the problem.",
          "type": "string",
          "example": "ac5ah5i"
        },
        "data": {
          "description": "Error data.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "code",
              "source"
            ],
            "properties": {
              "code": {
                "description": "Application-specific error code, expressed as a string value.",
                "type": "string",
                "enum": [
                  "forbidden-access",
                  "no-production-access",
                  "access-denied"
                ],
                "example": "forbidden-access"
              },
              "detail": {
                "description": "Human-readable explanation specific to this occurrence of the problem.",
                "type": "string",
                "example": "Access to this resource is forbidden."
              },
              "source": {
                "$ref": "#/definitions/Source"
              },
              "title": {
                "description": "Title of the error",
                "type": "string",
                "example": "Forbidden Access"
              },
              "type": {
                "description": "Type of the response, always \"error\"",
                "type": "string",
                "example": "error"
              }
            }
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "Gap": {
      "type": "string"
    },
    "GetAffordabilityLinks": {
      "description": "Object containing links to resources.",
      "type": "object",
      "title": "GetAffordabilityLinks",
      "required": [
        "self",
        "income",
        "expenses",
        "accounts"
      ],
      "properties": {
        "accounts": {
          "description": "Links of accounts",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "https://au-api.basiq.io/users/25c8d1ed77/accounts/s55bf5",
            "https://au-api.basiq.io/users/25c8d1ed77/accounts/s55bf4"
          ]
        },
        "expenses": {
          "description": "Link to the expenses",
          "type": "string",
          "example": "https://au-api.basiq.io/users/25c8d1ed77/expenses/s55bf5"
        },
        "income": {
          "description": "Link to the income",
          "type": "string",
          "example": "https://au-api.basiq.io/users/25c8d1ed77/income/s55bf4"
        },
        "self": {
          "description": "Link to the affordability resource",
          "type": "string",
          "example": "https://au-api.basiq.io/users/25c8d1ed77/affordability/s55bf3"
        }
      }
    },
    "GetConnectionLinks": {
      "description": "Object containing links to resources.",
      "type": "object",
      "title": "GetConnectionLinks",
      "required": [
        "self",
        "user"
      ],
      "properties": {
        "accounts": {
          "description": "Accounts reference url.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/cd6fbd92/accounts?filter=institution.id.eq('AU00000')"
        },
        "self": {
          "description": "Connection self reference url.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/cd6fbd92-0b12-43ba-a3c1-286dd5f4f396/connections/29523951"
        },
        "transactions": {
          "description": "Transactions reference url.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/cd6fbd92/transactions?filter=institution.id.eq('AU00000')"
        },
        "user": {
          "description": "User reference url.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/cd6fbd92"
        }
      }
    },
    "GetConnectionsLinks": {
      "description": "Object containing links to resources.",
      "type": "object",
      "title": "GetConnectionsLinks",
      "required": [
        "self",
        "institution"
      ],
      "properties": {
        "accounts": {
          "description": "Accounts reference url.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/cd6fbd92/accounts?filter=institution.id.eq('AU00000')"
        },
        "institution": {
          "description": "Institution details.",
          "type": "string",
          "example": "https://au-api.basiq.io/institutions/AU00000"
        },
        "self": {
          "description": "Connection self reference url.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/cd6fbd92/connections/29523951"
        },
        "transactions": {
          "description": "Transactions reference url.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/cd6fbd92/transactions?filter=institution.id.eq('AU00000')"
        }
      }
    },
    "GetUserAccount": {
      "description": "Container object containing account data.",
      "type": "object",
      "title": "UserGetAccount",
      "required": [
        "type",
        "count",
        "data"
      ],
      "properties": {
        "count": {
          "description": "Count of accounts.",
          "type": "integer",
          "format": "int64",
          "example": 7
        },
        "data": {
          "description": "Accounts data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetUserAccountData"
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "GetUserAccountData": {
      "description": "Object containing account data.",
      "type": "object",
      "title": "UserGetAccountData",
      "required": [
        "type",
        "id",
        "links"
      ],
      "properties": {
        "id": {
          "description": "Account identification.",
          "type": "string",
          "example": "aaaf2c3b"
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "Always \"account\".",
          "type": "string",
          "example": "account"
        }
      }
    },
    "GetUserConnection": {
      "description": "Container object containing connection data.",
      "type": "object",
      "title": "UserGetConnection",
      "required": [
        "type",
        "count",
        "data"
      ],
      "properties": {
        "count": {
          "description": "Count of accounts.",
          "type": "integer",
          "format": "int64",
          "example": 5
        },
        "data": {
          "description": "Connections data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetUserConnectionData"
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "GetUserConnectionData": {
      "description": "Object containing connection data.",
      "type": "object",
      "title": "GetUserConnectionData",
      "required": [
        "type",
        "id",
        "links"
      ],
      "properties": {
        "id": {
          "description": "Connection identification.",
          "type": "string",
          "example": "aaaf2c3b"
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "Always \"connection\".",
          "type": "string",
          "example": "connection"
        }
      }
    },
    "GetUserLinks": {
      "description": "Object containing links to resources.",
      "type": "object",
      "title": "GetUserLinks",
      "required": [
        "self",
        "connections",
        "accounts",
        "transactions",
        "auth_link"
      ],
      "properties": {
        "accounts": {
          "description": "Accounts reference url.",
          "type": "string"
        },
        "auth_link": {
          "description": "Auth link, possible null.",
          "type": "string",
          "x-nullable": true
        },
        "connections": {
          "description": "Connections reference url.",
          "type": "string"
        },
        "self": {
          "description": "User self reference url.",
          "type": "string"
        },
        "transactions": {
          "description": "Transactions reference url.",
          "type": "string"
        }
      }
    },
    "GoneError": {
      "type": "object",
      "required": [
        "type",
        "correlationId",
        "data"
      ],
      "properties": {
        "correlationId": {
          "description": "Unique identifier for this particular occurrence of the problem.",
          "type": "string",
          "example": "ac5ah5i"
        },
        "data": {
          "description": "Error data.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "code"
            ],
            "properties": {
              "code": {
                "description": "Application-specific error code, expressed as a string value.",
                "type": "string",
                "enum": [
                  "resource-no-longer-available"
                ],
                "example": "resource-no-longer-available"
              },
              "detail": {
                "description": "Human-readable explanation specific to this occurrence of the problem.",
                "type": "string"
              },
              "title": {
                "description": "Title of the error",
                "type": "string"
              },
              "type": {
                "description": "Type of the response, always \"error\"",
                "type": "string",
                "example": "error"
              }
            }
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "IncomeLinks": {
      "type": "object",
      "required": [
        "self",
        "accounts"
      ],
      "properties": {
        "accounts": {
          "description": "Links of accounts",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "https://au-api.basiq.io/users/25c8d1ed77/accounts/s55bf5",
            "https://au-api.basiq.io/users/25c8d1ed77/accounts/s55bf4"
          ]
        },
        "self": {
          "description": "Link to the requested income resource",
          "type": "string",
          "example": "https://au-api.basiq.io/users/25c8d1ed77/income/s55bf4"
        }
      }
    },
    "IncomePostRequest": {
      "type": "object",
      "properties": {
        "accounts": {
          "description": "The list of accounts to be included in the income otherwise all the user accounts will be included in the report",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "s55bf3",
            "s55bf4"
          ]
        },
        "fromMonth": {
          "description": "The first/start month to be included in the affordability output e.g. \"fromMonth\":\"2019-05\". Resulting income resource will be based on data between fromMonth and toMonth",
          "type": "string",
          "example": "2019-05"
        },
        "toMonth": {
          "description": "The first/start month to be included in the affordability output e.g. \"fromMonth\":\"2019-05\". Resulting income resource will be based on data between fromMonth and toMonth",
          "type": "string",
          "example": "2019-09"
        }
      }
    },
    "IncomeResponse": {
      "description": "Container object, containing income details.\n\nThe Income Summary object with income summarised and classified by type: regular, irregular or other sources (created/refreshed across up to 10 institutions)",
      "type": "object",
      "title": "IncomeResponse",
      "required": [
        "type",
        "id",
        "fromMonth",
        "toMonth",
        "summary"
      ],
      "properties": {
        "coverageDays": {
          "description": "Number of days covered by the report",
          "type": "integer",
          "format": "int64",
          "example": 392
        },
        "fromMonth": {
          "description": "Start month for the period for which the Income summary is generated. The period of time relates to the account and transaction data used as input into the report.",
          "type": "string",
          "example": "2019-03"
        },
        "id": {
          "description": "The identifier of the income resource to be retrieved.",
          "type": "string",
          "example": "s55bf4"
        },
        "irregular": {
          "description": "Required true",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IrregularSource"
          }
        },
        "links": {
          "$ref": "#/definitions/IncomeLinks"
        },
        "otherCredit": {
          "description": "Required true",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OtherCreditSource"
          }
        },
        "regular": {
          "description": "Required true",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegularSource"
          }
        },
        "summary": {
          "$ref": "#/definitions/IncomeSummary"
        },
        "toMonth": {
          "description": "End month (usually the current month) for the period for which the Income summary is generated.",
          "type": "string",
          "example": "2020-03"
        },
        "type": {
          "description": "Always \"income\".",
          "type": "string",
          "example": "income"
        }
      }
    },
    "IncomeSummary": {
      "description": "Summary totals relating to income analysis",
      "type": "object",
      "required": [
        "regularIncomeAvg",
        "regularIncomeYTD",
        "regularIncomeYear",
        "irregularIncomeAvg"
      ],
      "properties": {
        "irregularIncomeAvg": {
          "description": "Total mean of irregular income monthly calculated across the whole time period for all irregular sources",
          "type": "string",
          "x-nullable": true,
          "example": "55.00"
        },
        "regularIncomeAvg": {
          "description": "Total median regular income monthly calculated over the past 3 months for all regular sources",
          "type": "string",
          "x-nullable": true,
          "example": "18098.00"
        },
        "regularIncomeYTD": {
          "description": "Total regular income so far this financial year (year to date)",
          "type": "string",
          "x-nullable": true,
          "example": "90490.00"
        },
        "regularIncomeYear": {
          "description": "Total predicted regular income for this financial year year",
          "type": "string",
          "x-nullable": true,
          "example": "217176.00"
        }
      }
    },
    "InstitutionModel": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Institution identification.",
          "type": "string",
          "example": "AU00000"
        }
      }
    },
    "InternalServerError": {
      "type": "object",
      "required": [
        "type",
        "correlationId",
        "data"
      ],
      "properties": {
        "correlationId": {
          "description": "Unique identifier for this particular occurrence of the problem.",
          "type": "string",
          "example": "ac5ah5i"
        },
        "data": {
          "description": "Error data.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "code"
            ],
            "properties": {
              "code": {
                "description": "Application-specific error code, expressed as a string value.",
                "type": "string",
                "enum": [
                  "internal-server-error"
                ],
                "example": "internal-server-error"
              },
              "detail": {
                "description": "Human-readable explanation specific to this occurrence of the problem.",
                "type": "string",
                "example": "Internal Server error. Contact support."
              },
              "title": {
                "description": "Title of the error",
                "type": "string",
                "example": "Internal Server error."
              },
              "type": {
                "description": "Type of the response, always \"error\"",
                "type": "string",
                "example": "error"
              }
            }
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "IrregularSource": {
      "description": "Irregular Income sources typically require at least 5 credits across a minimum 90 day time period",
      "type": "object",
      "required": [
        "source",
        "frequency",
        "ageDays",
        "amountAvg",
        "noOccurrences",
        "avgMonthlyOccurence",
        "current",
        "changeHistory"
      ],
      "properties": {
        "ageDays": {
          "description": "Duration irregular income (number days from first to last occurrence) returned as an integer with values zero or greater.",
          "type": "integer",
          "format": "int64",
          "example": 334
        },
        "amountAvg": {
          "description": "Mean of irregular income amount - calculated across all occurrences identified.",
          "type": "string",
          "example": "55.00"
        },
        "avgMonthlyOccurence": {
          "description": "Average (mean) number of times per calendar month the credits in the series occur.",
          "type": "string",
          "example": "1"
        },
        "changeHistory": {
          "description": "Each amount classified as income (repeated for each income credit and ordered by most recent)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeHistoryIncome"
          }
        },
        "current": {
          "$ref": "#/definitions/CurrentIrregularSource"
        },
        "frequency": {
          "description": "Frequency is \"irregular\"",
          "type": "string",
          "example": "irregular"
        },
        "noOccurrences": {
          "description": "Number of instances of credits in the series.",
          "type": "integer",
          "format": "int64",
          "example": 5
        },
        "source": {
          "description": "Source irregular income (cleaned transaction description).",
          "type": "string",
          "example": "ctrlink carers 998r6789201610974v"
        }
      }
    },
    "IrregularityIncome": {
      "type": "object",
      "required": [
        "stability",
        "gaps"
      ],
      "properties": {
        "gaps": {
          "description": "Array of dates for which the expected credit is not met",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Gap"
          },
          "example": [
            "2020-03"
          ]
        },
        "stability": {
          "description": "Stability percentage indicator of how stable the income is. 100 = no gaps in the income series from the source. Calculated as (number of transactions that are included in the income report for this source) / (number of transactions that were expected to be included in the income report for this source).",
          "type": "string",
          "example": "100.00"
        }
      }
    },
    "JobData": {
      "description": "Container object, containing job details.",
      "type": "object",
      "title": "JobData",
      "required": [
        "id",
        "created",
        "updated",
        "steps"
      ],
      "properties": {
        "created": {
          "description": "The date time when the job was created.",
          "type": "string",
          "example": "2020-06-10T09:59:00Z"
        },
        "id": {
          "description": "A string that uniquely identifies the job.",
          "type": "string",
          "example": "e9132638"
        },
        "links": {
          "$ref": "#/definitions/JobsLinks"
        },
        "steps": {
          "description": "List of steps that need to be completed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobsStep"
          }
        },
        "type": {
          "description": "Value is \"job\".",
          "type": "string",
          "example": "job"
        },
        "updated": {
          "description": "The date time when the job was last updated.",
          "type": "string",
          "example": "2020-06-10T09:59:00Z"
        }
      }
    },
    "JobsData": {
      "description": "Container object, containing job details.",
      "type": "object",
      "title": "JobsData",
      "required": [
        "id",
        "created",
        "updated",
        "steps",
        "institution"
      ],
      "properties": {
        "created": {
          "description": "The date time when the job was created.",
          "type": "string",
          "example": "2020-06-10T09:59:00Z"
        },
        "id": {
          "description": "A string that uniquely identifies the job.",
          "type": "string",
          "example": "e9132638"
        },
        "institution": {
          "$ref": "#/definitions/JobsInstitution"
        },
        "links": {
          "$ref": "#/definitions/JobsLinks"
        },
        "steps": {
          "description": "List of steps that need to be completed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobsStep"
          }
        },
        "type": {
          "description": "Value is \"job\".",
          "type": "string",
          "example": "job"
        },
        "updated": {
          "description": "The date time when the job was last updated.",
          "type": "string",
          "example": "2020-06-10T09:59:00Z"
        }
      }
    },
    "JobsInstitution": {
      "description": "Institution details.",
      "type": "object",
      "title": "Institution",
      "required": [
        "type",
        "id",
        "links"
      ],
      "properties": {
        "id": {
          "description": "A string that uniquely identifies institution.",
          "type": "string",
          "example": "AU00000"
        },
        "links": {
          "$ref": "#/definitions/JobsLinks"
        },
        "type": {
          "description": "Always \"institution\".",
          "type": "string",
          "example": "institution"
        }
      }
    },
    "JobsLinks": {
      "description": "Links to the resources.",
      "type": "object",
      "title": "JobsLinks",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "description": "URL of the resource",
          "type": "string",
          "example": "/jobs/61723"
        },
        "source": {
          "description": "Resource that initiated creation of this Job. For example, for operations on Connection, this is a Connection URL. This is only returned for Connection jobs and not for Statement jobs.",
          "type": "string"
        }
      }
    },
    "JobsResponseResource": {
      "type": "object",
      "required": [
        "type",
        "size",
        "data",
        "links"
      ],
      "properties": {
        "data": {
          "description": "Container object, containing job details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobsData"
          }
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "size": {
          "description": "Size of the all the jobs.",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "type": {
          "description": "Type of the response, always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "JobsResult": {
      "description": "Result object containing a list of URLs or null. Otherwise if a step failed contains an error response.",
      "type": "object",
      "title": "JobsResult",
      "properties": {
        "code": {
          "description": "In case of failed job, displays error code.",
          "type": "string",
          "enum": [
            "user-action-required",
            "system-unavailable",
            "maintenance",
            "connector-error",
            "institution-not-found",
            "institution-not-available",
            "institution-disabled",
            "missing-required-field",
            "missing-required-field-value",
            "invalid-field-value",
            "invalid-csv-row",
            "row-count-exceeded",
            "account-data-differs",
            "empty-file",
            "bank-statement-invalid",
            "bank-statement-new-product",
            "bank-statement-parsing-error",
            "bank-statement-not-supported",
            "txn-after-last-updated-date",
            "invalid-connection",
            "unknown-error",
            "job-timed-out"
          ]
        },
        "details": {
          "description": "In case of failed job, displays details of the error.",
          "type": "string"
        },
        "title": {
          "description": "In case of failed job, displays error title.",
          "type": "string"
        },
        "type": {
          "description": "In case of success, Always \"link\".",
          "type": "string",
          "example": "link"
        },
        "url": {
          "description": "In case of success, URL of the updated (or created) resources.",
          "type": "string"
        }
      }
    },
    "JobsStep": {
      "description": "List of steps that need to be completed.",
      "type": "object",
      "title": "JobsStep",
      "required": [
        "result",
        "status"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/JobsResult"
        },
        "status": {
          "description": "Step status.\n<ul>\n<li> pending -  The job has been created and is waiting to be started.</li>\n<li> in-progress - The job has started and is currently processing.</li>\n<li> success - The job has successfully completed. </li>\n<li> failed - The job has failed.</li>\n</ul>",
          "type": "string",
          "enum": [
            "pending",
            "in-progress",
            "success",
            "failed"
          ],
          "example": "success"
        },
        "title": {
          "description": "Name of the step the job needs to complete.",
          "type": "string",
          "enum": [
            "verify-credentials",
            "retrieve-accounts",
            "retrieve-transactions",
            "retrieve-statements"
          ],
          "example": "retrieve-accounts"
        }
      }
    },
    "LiabilitiesData": {
      "type": "object",
      "required": [
        "loan",
        "credit"
      ],
      "properties": {
        "credit": {
          "description": "Credit Liabilities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditLiabilities"
          }
        },
        "loan": {
          "description": "Loan Liabilities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoanLiabilities"
          }
        }
      }
    },
    "LoanLiabilities": {
      "type": "object",
      "required": [
        "currency",
        "balance",
        "availableFunds",
        "account",
        "institution",
        "previousMonth",
        "changeHistory",
        "previous6Months"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountHolder"
        },
        "availableFunds": {
          "description": "The available funds at the time of the query.",
          "type": "string",
          "x-nullable": true,
          "example": "87767.00"
        },
        "balance": {
          "description": "The balance at the time of the query.",
          "type": "string",
          "x-nullable": true,
          "example": "-312233.00"
        },
        "changeHistory": {
          "description": "List of account transactions changes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeHistoryAffordabilityData"
          }
        },
        "currency": {
          "description": "The currency in which the account is recorded.",
          "type": "string",
          "example": "AUD"
        },
        "institution": {
          "description": "The name of the financial institution with whom the account is held.",
          "type": "string",
          "example": "Hooli"
        },
        "previous6Months": {
          "$ref": "#/definitions/Previous6MonthsLoan"
        },
        "previousMonth": {
          "$ref": "#/definitions/PreviousMonthDataLoanLiabilities"
        }
      }
    },
    "Meta": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "NotFoundError": {
      "type": "object",
      "required": [
        "type",
        "correlationId",
        "data"
      ],
      "properties": {
        "correlationId": {
          "description": "Unique identifier for this particular occurrence of the problem.",
          "type": "string",
          "example": "ac5ah5i"
        },
        "data": {
          "description": "Error data.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "code"
            ],
            "properties": {
              "code": {
                "description": "Application-specific error code, expressed as a string value.",
                "type": "string",
                "enum": [
                  "resource-not-found"
                ],
                "example": "resource-not-found"
              },
              "detail": {
                "description": "Human-readable explanation specific to this occurrence of the problem.",
                "type": "string",
                "example": "Resource not found."
              },
              "title": {
                "description": "Title of the error",
                "type": "string",
                "example": "Requested resource is not found."
              },
              "type": {
                "description": "Type of the response, always \"error\"",
                "type": "string",
                "example": "error"
              }
            }
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "OtherCreditSource": {
      "description": "Other Credit Series are series where a pattern of credit is detected but the pattern does not meet the requirements for regular or irregular income, or the income series is too old e.g. former regular income or a potential future income",
      "type": "object",
      "required": [
        "source",
        "frequency",
        "ageDays",
        "amountAvg",
        "noOccurrences",
        "avgMonthlyOccurence",
        "current",
        "changeHistory"
      ],
      "properties": {
        "ageDays": {
          "description": "Duration other income (number days from first to last occurrence) returned as an integer with values zero or greater.",
          "type": "integer",
          "format": "int64",
          "example": 335
        },
        "amountAvg": {
          "description": "Mean of irregular income amount - calculated across all occurrences identified.",
          "type": "string",
          "example": "110.85"
        },
        "avgMonthlyOccurence": {
          "description": "Average (mean) number of times per calendar month the credits in the series occur.",
          "type": "string",
          "example": "1"
        },
        "changeHistory": {
          "description": "Each amount classified as income (repeated for each income credit and ordered by most recent)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeHistoryIncome"
          }
        },
        "current": {
          "$ref": "#/definitions/CurrentOtherCreditSource"
        },
        "frequency": {
          "description": "Frequency is \"other\", \"irregular\" or a time period e.g. \"bi-weekly\"",
          "type": "string",
          "enum": [
            "daily",
            "weekly",
            "bi-weekly",
            "monthly",
            "bi-monthly",
            "quarterly",
            "half-year",
            "yearly",
            "other",
            "irregular"
          ],
          "example": "monthly"
        },
        "noOccurrences": {
          "description": "Number of instances of credits in the series.",
          "type": "integer",
          "format": "int64",
          "example": 12
        },
        "source": {
          "description": "Source Other Credit income (cleaned transaction description).",
          "type": "string",
          "example": "savings interest cr bal - Account 1"
        }
      }
    },
    "PaymentsSummaryExpenses": {
      "description": "Payments Summary",
      "type": "object",
      "required": [
        "division",
        "avgMonthly",
        "percentageTotal",
        "subCategory"
      ],
      "properties": {
        "avgMonthly": {
          "description": "Average monthly amount by category for defined period (up to 13 months). This number monthly is calculated as follows: (Total Expenses/Report Coverage Days)*30. This allows data with partial months to be calculated correctly.",
          "type": "string",
          "example": "-636.88"
        },
        "division": {
          "description": "Top level summary: category name. e.g. Medical care and heath expenses, Food and non-alcoholic beverages, Education",
          "type": "string",
          "example": "Education"
        },
        "percentageTotal": {
          "description": "Average monthly amount expressed as a percentage of total expenses.",
          "type": "number",
          "format": "double",
          "example": -636.88
        },
        "subCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubCategoryExpenses"
          }
        }
      }
    },
    "PhysicalAddresses": {
      "description": "User physical addresses holding the connection.",
      "type": "object",
      "title": "PhysicalAddresses",
      "required": [
        "addressLine1",
        "addressLine2",
        "addressLine3",
        "postcode",
        "city",
        "state",
        "countryCode",
        "formattedAddress"
      ],
      "properties": {
        "addressLine1": {
          "description": "User address.",
          "type": "string",
          "example": "13/91 Fisher Rd"
        },
        "addressLine2": {
          "description": "Always \"null\"",
          "type": "string",
          "x-nullable": true
        },
        "addressLine3": {
          "description": "Always \"null\"",
          "type": "string",
          "x-nullable": true
        },
        "city": {
          "description": "City",
          "type": "string",
          "example": "Sydney"
        },
        "country": {
          "type": "string"
        },
        "countryCode": {
          "description": "Country code",
          "type": "string",
          "example": "AU"
        },
        "formattedAddress": {
          "description": "Address formatted.",
          "type": "string",
          "example": "13/91 Fisher Rd, Dee Why NSW 2099, Australia"
        },
        "postcode": {
          "description": "Post code",
          "type": "string",
          "example": "2099"
        },
        "state": {
          "description": "State",
          "type": "string",
          "example": "NSW"
        }
      }
    },
    "Previous3MonthsIncome": {
      "type": "object",
      "required": [
        "amountAvg",
        "amountAvgMonthly",
        "variance"
      ],
      "properties": {
        "amountAvg": {
          "description": "Median regular income amount - calculated across all occurrences in last 3 months (note: median provides a more reliable amount than mean for a regular income source as it is less affected by outliers and skewed data - use variance amount to understand outliers and changeHistory to view actual credits)",
          "type": "string",
          "example": "18098.00"
        },
        "amountAvgMonthly": {
          "description": "Median monthly regular income amount",
          "type": "string",
          "example": "18098.00"
        },
        "variance": {
          "description": "Difference between min and max payment amount for regular income",
          "type": "string",
          "example": "0.00"
        }
      }
    },
    "Previous6MonthsCreditLiabilities": {
      "type": "object",
      "required": [
        "cashAdvances"
      ],
      "properties": {
        "cashAdvances": {
          "description": "Value of cash advances in period",
          "type": "string",
          "example": "-2053.50"
        }
      }
    },
    "Previous6MonthsLoan": {
      "type": "object",
      "required": [
        "arrears"
      ],
      "properties": {
        "arrears": {
          "description": "Has the loan been in arrears in the past 6 months - returned as a string value (true or false or null)",
          "type": "string",
          "x-nullable": true,
          "example": "true"
        }
      }
    },
    "PreviousMonthDataLiabilities": {
      "type": "object",
      "required": [
        "totalCredits",
        "totalDebits",
        "minBalance",
        "maxBalance"
      ],
      "properties": {
        "maxBalance": {
          "type": "string",
          "example": "-12329.16"
        },
        "minBalance": {
          "type": "string",
          "example": "-3174.16"
        },
        "totalCredits": {
          "type": "string",
          "example": "0.00"
        },
        "totalDebits": {
          "type": "string",
          "example": "-8287.10"
        }
      }
    },
    "PreviousMonthDataLoanLiabilities": {
      "type": "object",
      "required": [
        "totalCredits",
        "totalDebits",
        "totalInterestCharged",
        "totalRepayments"
      ],
      "properties": {
        "totalCredits": {
          "type": "string",
          "example": "0.00"
        },
        "totalDebits": {
          "type": "string",
          "example": "-8287.10"
        },
        "totalInterestCharged": {
          "type": "string",
          "example": "-4303.50"
        },
        "totalRepayments": {
          "type": "string",
          "example": "5768.00"
        }
      }
    },
    "RegularSource": {
      "type": "object",
      "title": "Our complex income algorithm uses over 50 rules to identify different types of income sources. For example, to identify a regular income source - the fortnightly salary should have a minimum of 5 credits across a 90 day time period with regular intervals. Additionally, tolerances are applied based on confidence in identified income source patterns (by amount and frequency).",
      "required": [
        "source",
        "frequency",
        "irregularity",
        "ageDays",
        "previous3Months",
        "current",
        "changeHistory"
      ],
      "properties": {
        "ageDays": {
          "description": "Duration regular income (number days from first to last occurrence) returned as an integer with values zero or greater",
          "type": "integer",
          "format": "int64",
          "example": 334
        },
        "changeHistory": {
          "description": "Each amount classified as income (repeated for each income credit and ordered by most recent)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeHistoryIncome"
          }
        },
        "current": {
          "$ref": "#/definitions/CurrentRegularSource"
        },
        "frequency": {
          "description": "Enum detailing frequency regular income",
          "type": "string",
          "enum": [
            "daily",
            "weekly",
            "bi-weekly",
            "monthly",
            "bi-monthly",
            "quarterly",
            "half-year",
            "yearly"
          ],
          "example": "monthly"
        },
        "irregularity": {
          "$ref": "#/definitions/IrregularityIncome"
        },
        "previous3Months": {
          "$ref": "#/definitions/Previous3MonthsIncome"
        },
        "source": {
          "description": "Source regular income (cleaned transaction description).",
          "type": "string",
          "example": "payroll wfrms 15439393"
        }
      }
    },
    "ResourceLink": {
      "description": "Link object containing a link to the resource, self reference.",
      "type": "object",
      "title": "ResourceLink",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "description": "URL of the resource.",
          "type": "string"
        }
      }
    },
    "Source": {
      "description": "An object containing references to the source of the error.",
      "type": "object",
      "title": "Source",
      "properties": {
        "parameter": {
          "description": "String indicating which URI query parameter caused the error.",
          "type": "string",
          "example": "userId"
        },
        "pointer": {
          "description": "Location to the object or attribute that the error relates to.",
          "type": "string",
          "example": "users/userId"
        }
      }
    },
    "StatementUploadResource": {
      "description": "Object containing details for statement upload.",
      "type": "object",
      "title": "StatementUploadResource",
      "required": [
        "type",
        "id",
        "links"
      ],
      "properties": {
        "id": {
          "description": "Job identification.",
          "type": "string",
          "example": "29523951"
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "Type, always \"job\".",
          "type": "string",
          "example": "job"
        }
      }
    },
    "StatusServiceUnavailableError": {
      "type": "object",
      "required": [
        "type",
        "correlationId",
        "data"
      ],
      "properties": {
        "correlationId": {
          "description": "Unique identifier for this particular occurrence of the problem.",
          "type": "string",
          "example": "ac5ah5i"
        },
        "data": {
          "description": "Error data.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "code"
            ],
            "properties": {
              "code": {
                "description": "Application-specific error code, expressed as a string value.",
                "example": "service-unavailable"
              },
              "detail": {
                "description": "Human-readable explanation specific to this occurrence of the problem.",
                "type": "string",
                "example": "Service Unavailable. Try again later."
              },
              "title": {
                "description": "Title of the error",
                "type": "string",
                "example": "Service Unavailable"
              },
              "type": {
                "description": "Type of the response, always \"error\"",
                "type": "string",
                "example": "error"
              }
            }
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "SubCategoryExpenses": {
      "description": "Payments Sub-Category",
      "type": "object",
      "required": [
        "summary",
        "category",
        "changeHistory"
      ],
      "properties": {
        "category": {
          "$ref": "#/definitions/CategoryDataExpenses"
        },
        "changeHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeHistoryExpensesClass"
          }
        },
        "summary": {
          "description": "Summary period \"monthly\".",
          "type": "string",
          "example": "monthly"
        }
      }
    },
    "SubClass": {
      "type": "object",
      "required": [
        "title",
        "code"
      ],
      "properties": {
        "code": {
          "type": "string",
          "example": "0801050199"
        },
        "title": {
          "type": "string",
          "example": "Formal child care services nec"
        }
      }
    },
    "TransactionData": {
      "type": "object",
      "required": [
        "type",
        "id",
        "status",
        "description",
        "amount",
        "account",
        "balance",
        "direction",
        "class",
        "institution",
        "connection",
        "subClass",
        "transactionDate",
        "enrich",
        "postDate",
        "links"
      ],
      "properties": {
        "account": {
          "description": "The id of the account resource the transaction belongs to.",
          "type": "string",
          "example": "d3de1ca1"
        },
        "amount": {
          "description": "Transaction amount. Outgoing funds are expressed as negative values.",
          "type": "string",
          "example": "123.12"
        },
        "balance": {
          "description": "Value of the account balance at time the transaction was completed.",
          "type": "string",
          "example": "123.12"
        },
        "class": {
          "description": "Describes the class(type) of transaction.",
          "type": "string",
          "enum": [
            "bank-fee",
            "payment",
            "cash-withdrawal",
            "transfer",
            "loan-interest",
            "refund",
            "direct-cedit",
            "interest",
            "loan-repayment"
          ],
          "example": "payment"
        },
        "connection": {
          "description": "The id of the connection resource that was used to retrieve the transaction.",
          "type": "string",
          "example": "d3de1ca1"
        },
        "description": {
          "description": "The transaction description as submitted by the institution..",
          "type": "string"
        },
        "direction": {
          "description": "Identifies if the transaction is of debit or credit type.",
          "type": "string",
          "enum": [
            "debit",
            "credit"
          ],
          "example": "credit"
        },
        "enrich": {
          "$ref": "#/definitions/TransactionsEnrich"
        },
        "id": {
          "description": "Uniquely identifies the transaction for this connection. Note that when a connection is refreshed pending transactions will receive new id's, whilst posted transactions will receive the same id's as before the refresh.",
          "type": "string",
          "example": "d3de1ca1"
        },
        "institution": {
          "description": "The id of the institution resource the transaction originated from.",
          "type": "string",
          "example": "AU00000"
        },
        "links": {
          "$ref": "#/definitions/TransactionLinks"
        },
        "postDate": {
          "description": "Date the transaction was posted as provided by the institution (this is the same date that appears on a bank statement). This value is null if the record is pending. e.g. \"2017-11-10T21:46:44Z\" or 2017-11-10T00:00:00Z.",
          "type": "string",
          "example": "2018-11-02T00:00:00Z"
        },
        "status": {
          "description": "Identifies if a transaction is pending or posted. A pending transaction is an approved debit or credit transaction that has not been fully processed yet (i.e. has not been posted). Find out more about pending transaction and how to deal with them within your app. Note that pending transactions are not available for all institutions.",
          "type": "string",
          "enum": [
            "pending",
            "posted"
          ],
          "example": "pending"
        },
        "subClass": {
          "$ref": "#/definitions/SubClass"
        },
        "transactionDate": {
          "description": "Date that the user executed the transaction as provided by the istitution. Note that not all transactions provide this value (varies by institution) e.g. \"2017-11-10T00:00:00Z\"",
          "type": "string",
          "example": "2018-11-02T00:00:00Z"
        },
        "type": {
          "description": "Value is \"transaction\".",
          "type": "string",
          "example": "transaction"
        }
      }
    },
    "TransactionDataAffordability": {
      "type": "object",
      "required": [
        "type",
        "id",
        "status",
        "description",
        "amount",
        "account",
        "balance",
        "direction",
        "class",
        "institution",
        "subClass",
        "transactionDate",
        "postDate",
        "links"
      ],
      "properties": {
        "account": {
          "description": "The id of the account resource the transaction belongs to.",
          "type": "string",
          "example": "d3de1ca1"
        },
        "amount": {
          "description": "Transaction amount. Outgoing funds are expressed as negative values.",
          "type": "string",
          "example": "123.12"
        },
        "balance": {
          "description": "Value of the account balance at time the transaction was completed.",
          "type": "string",
          "example": "123.12"
        },
        "class": {
          "description": "Describes the class(type) of transaction.",
          "type": "string",
          "enum": [
            "bank-fee",
            "payment",
            "cash-withdrawal",
            "transfer",
            "loan-interest",
            "refund",
            "direct-cedit",
            "interest",
            "loan-repayment"
          ],
          "example": "payment"
        },
        "description": {
          "description": "The transaction description as submitted by the institution..",
          "type": "string",
          "example": "DEBIT Only About Children Seaforth"
        },
        "direction": {
          "description": "Identifies if the transaction is of debit or credit type.",
          "type": "string",
          "enum": [
            "debit",
            "credit"
          ],
          "example": "credit"
        },
        "id": {
          "description": "Uniquely identifies the transaction.",
          "type": "string",
          "example": "d3de1ca1"
        },
        "institution": {
          "description": "The id of the institution resource the transaction originated from.",
          "type": "string",
          "example": "AU00000"
        },
        "links": {
          "$ref": "#/definitions/AffordabilityTransactionLinks"
        },
        "postDate": {
          "description": "Date the transaction was posted as provided by the institution (this is the same date that appears on a bank statement). This value is null if the record is pending. e.g. \"2017-11-10T21:46:44Z\" or 2017-11-10T00:00:00Z.",
          "type": "string",
          "example": "2018-11-02T00:00:00Z"
        },
        "status": {
          "description": "Identifies if a transaction is pending or posted. A pending transaction is an approved debit or credit transaction that has not been fully processed yet (i.e. has not been posted). Find out more about pending transaction and how to deal with them within your app. Note that pending transactions are not available for all institutions.",
          "type": "string",
          "enum": [
            "pending",
            "posted"
          ],
          "example": "pending"
        },
        "subClass": {
          "$ref": "#/definitions/SubClass"
        },
        "transactionDate": {
          "description": "Date that the user executed the transaction as provided by the institution. Note that not all transactions provide this value (varies by institution) e.g. \"2017-11-10T00:00:00Z\"",
          "type": "string",
          "example": "2018-11-02T00:00:00Z"
        },
        "type": {
          "description": "Value is \"transaction\".",
          "type": "string",
          "example": "transaction"
        }
      }
    },
    "TransactionLinks": {
      "type": "object",
      "required": [
        "self",
        "account",
        "connection",
        "institution"
      ],
      "properties": {
        "account": {
          "description": "Url of the account.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/6a52015e/accounts/31eb30a0"
        },
        "connection": {
          "description": "Url of the connection, always null.",
          "type": "string",
          "example": "null"
        },
        "institution": {
          "description": "Url of the institution.",
          "type": "string",
          "example": "https://au-api.basiq.io/institutions/AU00000"
        },
        "self": {
          "description": "Transaction self reference.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/6a52015e/transactions/2082c765"
        }
      }
    },
    "TransactionsAnzsic": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/TransactionsClass"
        },
        "division": {
          "$ref": "#/definitions/TransactionsDivision"
        },
        "group": {
          "$ref": "#/definitions/TransactionsGroup"
        },
        "subdivision": {
          "$ref": "#/definitions/TransactionsSubdivision"
        }
      }
    },
    "TransactionsCategory": {
      "type": "object",
      "properties": {
        "anzsic": {
          "$ref": "#/definitions/TransactionsAnzsic"
        }
      }
    },
    "TransactionsClass": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Class Code",
          "type": "string",
          "example": "4511"
        },
        "title": {
          "description": "Class Details",
          "type": "string",
          "example": "Cafes and Restaurants"
        }
      }
    },
    "TransactionsDivision": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Division Code",
          "type": "string",
          "example": "H"
        },
        "title": {
          "description": "Division Details",
          "type": "string",
          "example": "Accommodation and  Food Services"
        }
      }
    },
    "TransactionsEnrich": {
      "type": "object",
      "required": [
        "merchant",
        "location",
        "category"
      ],
      "properties": {
        "category": {
          "$ref": "#/definitions/TransactionsCategory"
        },
        "location": {
          "$ref": "#/definitions/TransactionsLocation"
        },
        "merchant": {
          "$ref": "#/definitions/TransactionsMerchant"
        }
      }
    },
    "TransactionsGeometry": {
      "type": "object",
      "properties": {
        "lat": {
          "description": "Latitude",
          "type": "string",
          "example": "-33.79988520000001"
        },
        "lng": {
          "description": "Longitude",
          "type": "string",
          "example": "151.2858021"
        }
      }
    },
    "TransactionsGetLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "next": {
          "description": "Url to next result.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/6a52015e/transactions?next=bf1ec9d4"
        },
        "self": {
          "description": "Self reference url.",
          "type": "string",
          "example": "https://au-api.basiq.io/users/ea3a81/transactions"
        }
      }
    },
    "TransactionsGetResource": {
      "description": "A transaction object is created whenever money is debited or credited from a particular account.",
      "type": "object",
      "title": "Transactions container object.",
      "required": [
        "type",
        "count",
        "size",
        "data"
      ],
      "properties": {
        "count": {
          "description": "Count of the transactions in the response.",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionData"
          }
        },
        "links": {
          "$ref": "#/definitions/TransactionsGetLinks"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "example": 500
        },
        "type": {
          "description": "Value is \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "TransactionsGroup": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Group Code",
          "type": "string",
          "example": "451"
        },
        "title": {
          "description": "Group Details",
          "type": "string",
          "example": "Cafes, Restaurants and Takeaway Food Services"
        }
      }
    },
    "TransactionsLocation": {
      "type": "object",
      "properties": {
        "country": {
          "description": "Country",
          "type": "string",
          "example": "Australia"
        },
        "formattedAddress": {
          "description": "Address",
          "type": "string",
          "example": "1/39 E Esplanade, Manly NSW 2095"
        },
        "geometry": {
          "$ref": "#/definitions/TransactionsGeometry"
        },
        "postalCode": {
          "description": "Postal Code",
          "type": "string",
          "example": "2095"
        },
        "route": {
          "description": "Route Name",
          "type": "string",
          "example": "E Esplanade"
        },
        "routeNo": {
          "description": "Route Number",
          "type": "string",
          "example": "29"
        },
        "state": {
          "description": "State",
          "type": "string",
          "example": "NSW"
        },
        "suburb": {
          "description": "Suburb",
          "type": "string",
          "example": "Manly"
        }
      }
    },
    "TransactionsMerchant": {
      "type": "object",
      "required": [
        "businessName",
        "website"
      ],
      "properties": {
        "businessName": {
          "description": "Merchant name",
          "type": "string",
          "example": "Garfish Manly"
        },
        "phoneNumber": {
          "$ref": "#/definitions/TransactionsPhoneNumber"
        },
        "website": {
          "description": "Merchant Website",
          "type": "string",
          "example": "http://garfish.com.au/garfish-manly/"
        }
      }
    },
    "TransactionsPhoneNumber": {
      "type": "object",
      "properties": {
        "international": {
          "description": "International Phone Number",
          "type": "string",
          "example": "+61 2 9977 0707"
        },
        "local": {
          "description": "Local Phone Number",
          "type": "string",
          "example": "(02) 9977 0707"
        }
      }
    },
    "TransactionsSubdivision": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Subdivision Code",
          "type": "string",
          "example": "45"
        },
        "title": {
          "description": "Subdivision Details",
          "type": "string",
          "example": "Food and Beverage Services"
        }
      }
    },
    "UnauthorizedError": {
      "type": "object",
      "required": [
        "type",
        "correlationId",
        "data"
      ],
      "properties": {
        "correlationId": {
          "description": "Unique identifier for this particular occurrence of the problem.",
          "type": "string",
          "example": "ac5ah5i"
        },
        "data": {
          "description": "Error data.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "code"
            ],
            "properties": {
              "code": {
                "description": "Application-specific error code, expressed as a string value.",
                "type": "string",
                "enum": [
                  "unauthorized-access",
                  "invalid-authorization-token"
                ],
                "example": "unauthorized-access"
              },
              "detail": {
                "description": "Human-readable explanation specific to this occurrence of the problem.",
                "type": "string",
                "example": "You are not authorized to access this resource"
              },
              "title": {
                "description": "Title of the error",
                "type": "string",
                "example": "Unauthorized Access"
              },
              "type": {
                "description": "Type of the response, always \"error\"",
                "type": "string",
                "example": "error"
              }
            }
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "UnsupportedMediaTypeError": {
      "type": "object",
      "required": [
        "type",
        "correlationId",
        "data"
      ],
      "properties": {
        "correlationId": {
          "description": "Unique identifier for this particular occurrence of the problem.",
          "type": "string",
          "example": "ac5ah5i"
        },
        "data": {
          "description": "Error data.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "code"
            ],
            "properties": {
              "code": {
                "description": "Application-specific error code, expressed as a string value.",
                "type": "string",
                "enum": [
                  "unsupported-content-type"
                ],
                "example": "unsupported-content-type"
              },
              "detail": {
                "description": "Human-readable explanation specific to this occurrence of the problem.",
                "type": "string",
                "example": "Internal Server error. Contact support."
              },
              "title": {
                "description": "Title of the error",
                "type": "string",
                "example": "Internal Server error."
              },
              "type": {
                "description": "Type of the response, always \"error\"",
                "type": "string",
                "example": "error"
              }
            }
          }
        },
        "type": {
          "description": "Always \"list\".",
          "type": "string",
          "example": "list"
        }
      }
    },
    "UserConnectionPostData": {
      "type": "object",
      "required": [
        "password"
      ],
      "properties": {
        "password": {
          "description": "User's (new or old) institution password.",
          "type": "string",
          "example": "1234"
        },
        "secondaryLoginId": {
          "description": "User's institution secondary login id.",
          "type": "string",
          "example": "4321"
        },
        "securityCode": {
          "description": "User's institution security code.",
          "type": "string"
        }
      }
    },
    "UserConnectionsPostData": {
      "type": "object",
      "required": [
        "loginId",
        "password",
        "institution"
      ],
      "properties": {
        "institution": {
          "$ref": "#/definitions/InstitutionModel"
        },
        "loginId": {
          "description": "The users institution login ID",
          "type": "string",
          "example": "gavinBelson"
        },
        "password": {
          "description": "The users institution password",
          "type": "string",
          "example": "hooli2020"
        },
        "secondaryLoginId": {
          "description": "User's institution secondary login id. Mandatory if required by institution's login process",
          "type": "string"
        },
        "securityCode": {
          "description": "User's institution security code. Mandatory if required by institution's login process.",
          "type": "string"
        }
      }
    },
    "UserGetResponse": {
      "description": "User object with details if the creation succeeded.",
      "type": "object",
      "title": "UserGetResponse",
      "required": [
        "type",
        "id",
        "email",
        "mobile",
        "name",
        "links",
        "accounts",
        "connections"
      ],
      "properties": {
        "accounts": {
          "$ref": "#/definitions/GetUserAccount"
        },
        "business": {
          "description": "Business is ignored - it is populated when user has BusinessNumber or BusinessName\nswagger: ignore",
          "type": "string"
        },
        "connections": {
          "$ref": "#/definitions/GetUserConnection"
        },
        "email": {
          "description": "User email or empty.",
          "type": "string",
          "format": "email",
          "example": "gavin@hooli.com"
        },
        "id": {
          "description": "User identification.",
          "type": "string",
          "example": "ea3a81"
        },
        "links": {
          "$ref": "#/definitions/GetUserLinks"
        },
        "mobile": {
          "description": "User mobile number, or empty.",
          "type": "string",
          "example": "+61410888666"
        },
        "name": {
          "description": "Name, or empty.",
          "type": "string"
        },
        "type": {
          "description": "Always \"user\".",
          "type": "string",
          "example": "user"
        }
      }
    },
    "UserPostResponse": {
      "description": "User object with details if the creation succeeded.",
      "type": "object",
      "title": "UserPostResponse",
      "required": [
        "type",
        "id",
        "mobile",
        "links"
      ],
      "properties": {
        "email": {
          "description": "The end-users email address.",
          "type": "string",
          "format": "email",
          "example": "gavin@hooli.com"
        },
        "id": {
          "description": "A string that uniquely identifies the user.",
          "type": "string",
          "example": "e1956419"
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "mobile": {
          "description": "The end-users mobile number.",
          "type": "string",
          "example": "+61410888999"
        },
        "type": {
          "description": "Type of the response, always \"user\".",
          "type": "string",
          "example": "user"
        }
      }
    },
    "createUser": {
      "type": "object",
      "properties": {
        "email": {
          "description": "The end-users email address. Mandatory if mobile is not supplied.",
          "type": "string",
          "example": "gavin@hooli.com"
        },
        "mobile": {
          "description": "The end-users mobile number, supplied in international format.\n+[country-code][mobileno]. Mandatory if email is not supplied.",
          "type": "string",
          "example": "+61410888999"
        }
      }
    },
    "updateUser": {
      "type": "object",
      "properties": {
        "email": {
          "description": "The end-users email address.",
          "type": "string",
          "example": "gavin@hooli.com"
        },
        "mobile": {
          "description": "The end-users mobile number.",
          "type": "string",
          "example": "+61410888666"
        }
      }
    },
    "Anzsic": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/ClassDetails"
        },
        "division": {
          "$ref": "#/definitions/DivisionDetails"
        },
        "group": {
          "$ref": "#/definitions/GroupDetails"
        },
        "subdivision": {
          "$ref": "#/definitions/SubdivisionDetails"
        }
      }
    },
    "ClassDetails": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Class Code",
          "type": "string",
          "example": "4511"
        },
        "title": {
          "description": "Class Details",
          "type": "string",
          "example": "Cafes and Restaurants"
        }
      }
    },
    "DivisionDetails": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Division Code",
          "type": "string",
          "example": "H"
        },
        "title": {
          "description": "Division Details",
          "type": "string",
          "example": "Accommodation and  Food Services"
        }
      }
    },
    "EnrichCategory": {
      "type": "object",
      "properties": {
        "anzsic": {
          "$ref": "#/definitions/Anzsic"
        }
      }
    },
    "EnrichData": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/EnrichCategory"
        },
        "location": {
          "$ref": "#/definitions/EnrichLocation"
        },
        "merchant": {
          "$ref": "#/definitions/EnrichMerchant"
        }
      }
    },
    "EnrichGeometry": {
      "type": "object",
      "properties": {
        "lat": {
          "description": "Latitude",
          "type": "string",
          "example": "-33.79988520000001"
        },
        "lng": {
          "description": "Longitude",
          "type": "string",
          "example": "151.2858021"
        }
      }
    },
    "EnrichLocation": {
      "type": "object",
      "properties": {
        "country": {
          "description": "Country",
          "type": "string",
          "example": "Australia"
        },
        "formattedAddress": {
          "description": "Address",
          "type": "string",
          "example": "1/39 E Esplanade, Manly NSW 2095"
        },
        "geometry": {
          "$ref": "#/definitions/EnrichGeometry"
        },
        "postalCode": {
          "description": "Postal Code",
          "type": "string",
          "example": "2095"
        },
        "route": {
          "description": "Route Name",
          "type": "string",
          "example": "E Esplanade"
        },
        "routeNo": {
          "description": "Route Number",
          "type": "string",
          "example": "29"
        },
        "state": {
          "description": "State",
          "type": "string",
          "example": "NSW"
        },
        "suburb": {
          "description": "Suburb",
          "type": "string",
          "example": "Manly"
        }
      }
    },
    "EnrichMerchant": {
      "type": "object",
      "required": [
        "businessName",
        "website"
      ],
      "properties": {
        "businessName": {
          "description": "Merchant name",
          "type": "string",
          "example": "Garfish Manly"
        },
        "phoneNumber": {
          "$ref": "#/definitions/EnrichPhoneNumber"
        },
        "website": {
          "description": "Merchant Website",
          "type": "string",
          "example": "http://garfish.com.au/garfish-manly/"
        }
      }
    },
    "EnrichPhoneNumber": {
      "type": "object",
      "properties": {
        "international": {
          "description": "International Phone Number",
          "type": "string",
          "example": "+61 2 9977 0707"
        },
        "local": {
          "description": "Local Phone Number",
          "type": "string",
          "example": "(02) 9977 0707"
        }
      }
    },
    "GetEnrichResponse": {
      "type": "object",
      "required": [
        "type",
        "direction",
        "class",
        "data",
        "links"
      ],
      "properties": {
        "class": {
          "description": "Transaction Classification",
          "type": "string",
          "enum": [
            "direct-credit",
            "refund",
            "interest",
            "payment",
            "cash-withdrawal",
            "bank-fee",
            "transfer",
            "loan-interest",
            "loan-repayment"
          ],
          "example": "payment"
        },
        "data": {
          "$ref": "#/definitions/EnrichData"
        },
        "direction": {
          "description": "Direction of transaction",
          "type": "string",
          "enum": [
            "credit",
            "debit",
            "unknown"
          ],
          "example": "credit"
        },
        "links": {
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "Always \"enrich\"",
          "type": "string",
          "example": "enrich"
        }
      }
    },
    "GroupDetails": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Group Code",
          "type": "string",
          "example": "451"
        },
        "title": {
          "description": "Group Details",
          "type": "string",
          "example": "Cafes, Restaurants and Takeaway Food Services"
        }
      }
    },
    "SubdivisionDetails": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Subdivision Code",
          "type": "string",
          "example": "45"
        },
        "title": {
          "description": "Subdivision Details",
          "type": "string",
          "example": "Food and Beverage Services"
        }
      }
    },
    "AccountsFeatures": {
      "description": "AccountsFeatures describes set of institution accounts features",
      "type": "object",
      "required": [
        "accountNo",
        "name",
        "currency",
        "balance",
        "availableFunds",
        "lastUpdated",
        "accountHolder",
        "meta"
      ],
      "properties": {
        "accountHolder": {
          "description": "AccountHolder holds list of data source identifiers which are capable to fetch account holder.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "accountNo": {
          "description": "AccountNumber holds list of data source identifiers which are capable to fetch account number.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "availableFunds": {
          "description": "AvailableFunds holds list of data source identifiers which are capable to fetch available funds.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "balance": {
          "description": "AccountBalance holds list of data source identifiers which are capable to fetch account balance.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "currency": {
          "description": "AccountCurrency holds list of data source identifiers which are capable to fetch account currency.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "lastUpdated": {
          "description": "LastUpdated holds list of data source identifiers which are capable to fetch account last updated date.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "meta": {
          "description": "Meta holds list of data source identifiers which are capable to fetch account meta data (e.g. mortgage data).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "name": {
          "description": "AccountName holds list of data source identifiers which are capable to fetch account name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        }
      }
    },
    "Colors": {
      "description": "Colors contains institution colors type",
      "type": "object",
      "properties": {
        "primary": {
          "description": "Primary primary institution color",
          "type": "string"
        }
      }
    },
    "FeatureCondition": {
      "description": "FeatureCondition type that describes an feature status for institution",
      "type": "string"
    },
    "Features": {
      "description": "Features stucture that describes institution features per data source",
      "type": "object",
      "required": [
        "login"
      ],
      "properties": {
        "accounts": {
          "$ref": "#/definitions/AccountsFeatures"
        },
        "login": {
          "description": "Login holds list of data source identifiers which are capable to do complete login step.\nThis feature is applicable only on web sources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web"
          ]
        },
        "profile": {
          "$ref": "#/definitions/ProfileFeatures"
        },
        "transactions": {
          "$ref": "#/definitions/TransactionsFeatures"
        }
      }
    },
    "Institution": {
      "type": "object",
      "title": "Institution contains instution data.",
      "required": [
        "type",
        "id",
        "name",
        "shortName",
        "institutionType",
        "country",
        "serviceName",
        "serviceType",
        "loginIdCaption",
        "passwordCaption",
        "tier",
        "authorization",
        "features",
        "stage",
        "status",
        "stats",
        "logo",
        "links"
      ],
      "properties": {
        "authorization": {
          "description": "Institution authorization identifier",
          "type": "string",
          "enum": [
            "user",
            "other"
          ],
          "example": "user"
        },
        "country": {
          "description": "Institution country name",
          "type": "string",
          "example": "Australia"
        },
        "features": {
          "$ref": "#/definitions/Features"
        },
        "forgottenPasswordUrl": {
          "description": "URL to institution forgotten password page",
          "type": "string",
          "example": "https://example.com/forgotten-password"
        },
        "id": {
          "description": "Institution ID",
          "type": "string",
          "maxLength": 7,
          "minLength": 7,
          "pattern": "^[A-Z]{2}[0-9]{5}$",
          "uniqueItems": true,
          "example": "AU00000"
        },
        "institutionType": {
          "description": "Institution type identifier",
          "type": "string",
          "enum": [
            "Bank",
            "Bank (Foreign)",
            "Test Bank",
            "Credit Union",
            "Financial Services",
            "Superannuation",
            "Building Society"
          ],
          "example": "Bank"
        },
        "links": {
          "$ref": "#/definitions/ResourceLinks"
        },
        "loginIdCaption": {
          "description": "Login ID field caption that should be shown on UI",
          "type": "string",
          "example": "User name"
        },
        "logo": {
          "$ref": "#/definitions/InstitutionLogoResource"
        },
        "name": {
          "description": "Institution name",
          "type": "string",
          "example": "Hooli Bank"
        },
        "passwordCaption": {
          "description": "Password field caption that should be shown on UI",
          "type": "string",
          "example": "Password"
        },
        "secondaryLoginIdCaption": {
          "description": "Secondary loginID caption that should be shown on UI",
          "type": "string",
          "example": "Secondary login id"
        },
        "securityCodeCaption": {
          "description": "Security code caption that should be shown on UI",
          "type": "string",
          "example": "Security code"
        },
        "serviceName": {
          "description": "Institution service name",
          "type": "string",
          "example": "Personal Online Banking"
        },
        "serviceType": {
          "description": "Institution service name",
          "type": "string",
          "enum": [
            "Personal Banking",
            "Business Banking",
            "Card Access",
            "Test",
            "Superannuation"
          ],
          "example": "Personal Banking"
        },
        "shortName": {
          "description": "Institution short name",
          "type": "string",
          "example": "Hooli"
        },
        "stage": {
          "description": "Institution stage identifier",
          "type": "string",
          "enum": [
            "live",
            "alpha",
            "beta"
          ],
          "example": "live"
        },
        "stats": {
          "$ref": "#/definitions/InstitutionPerformanceStats"
        },
        "status": {
          "$ref": "#/definitions/FeatureCondition"
        },
        "tier": {
          "description": "Institution tier identifier",
          "type": "string",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ],
          "example": "3"
        },
        "type": {
          "description": "Resource type identifier. It is always \"institution\" for this model.",
          "type": "string",
          "enum": [
            "institution"
          ],
          "example": "institution"
        }
      }
    },
    "InstitutionLogoResource": {
      "description": "InstitutionLogoResource linstitution logo resource type",
      "type": "object",
      "required": [
        "type",
        "links"
      ],
      "properties": {
        "colors": {
          "$ref": "#/definitions/Colors"
        },
        "links": {
          "$ref": "#/definitions/LogoResourceLinks"
        },
        "type": {
          "description": "Type resource type identifier",
          "type": "string",
          "enum": [
            "image"
          ],
          "example": "image"
        }
      }
    },
    "InstitutionPerformanceStats": {
      "description": "InstitutionPerformanceStats response type for institution performance stats",
      "type": "object",
      "properties": {
        "averageDurationMs": {
          "description": "AverageDurationMs average connector duration in milliseconds per segments.\nWhen durations are not known for institution this field will be `null`.",
          "type": "object",
          "properties": {
            "retrieveAccounts": {
              "description": "Connector average duration in milliseconds of <b>fetch accounts</b> step for institution",
              "type": "integer",
              "format": "int64"
            },
            "retrieveMeta": {
              "description": "Connector average duration in milliseconds of <b>fetch metadata</b> step for institution",
              "type": "integer",
              "format": "int64"
            },
            "retrieveTransactions": {
              "description": "Connector average duration in milliseconds of <b>fetch transactions</b> step for institution",
              "type": "integer",
              "format": "int64"
            },
            "total": {
              "description": "Total connector average duration in milliseconds",
              "type": "integer",
              "format": "int64"
            },
            "verifyCredentials": {
              "description": "Connector average duration in milliseconds of <b>verifiy credentials</b> step for institution",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "InstitutionsList": {
      "type": "object",
      "title": "InstitutionsList contains list of instutions data.",
      "required": [
        "type",
        "totalCount",
        "data",
        "links"
      ],
      "properties": {
        "data": {
          "description": "Data contains list of institutions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Institution"
          }
        },
        "links": {
          "$ref": "#/definitions/ResourceLinks"
        },
        "totalCount": {
          "description": "TotalCount contains total count of institutions",
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "type": {
          "$ref": "#/definitions/ResponseFormat"
        }
      }
    },
    "LogoResourceLinks": {
      "description": "LogoResourceLinks contains institution logo resource links",
      "type": "object",
      "required": [
        "square",
        "full"
      ],
      "properties": {
        "full": {
          "description": "URL to full size logo",
          "type": "string",
          "example": "https://example.com/AU00000-full.svg"
        },
        "square": {
          "description": "Square formatted logo URL",
          "type": "string",
          "example": "https://example.com/AU00000.svg"
        }
      }
    },
    "ProfileFeatures": {
      "description": "ProfileFeatures describes set of institution profile features",
      "type": "object",
      "required": [
        "fullName",
        "firstName",
        "lastName",
        "middleName",
        "phoneNumbers",
        "emailAddresses",
        "physicalAddresses"
      ],
      "properties": {
        "emailAddresses": {
          "description": "EmailAddresses holds list of data source identifiers which are capable to fetch bank customer e-mail addresses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "firstName": {
          "description": "FirstName holds list of data source identifiers which are capable to fetch bank customer first name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "fullName": {
          "description": "FullName holds list of data source identifiers which are capable to fetch bank customer full name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "lastName": {
          "description": "LastName holds list of data source identifiers which are capable to fetch bank customer last name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "middleName": {
          "description": "MiddleName holds list of data source identifiers which are capable to fetch bank customer middle name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "phoneNumbers": {
          "description": "PhoneNumbers holds list of data source identifiers which are capable to fetch bank customer phone number.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "physicalAddresses": {
          "description": "PhysicalAddresses holds list of data source identifiers which are capable to fetch bank customer physical addresses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        }
      }
    },
    "ResourceLinks": {
      "description": "ResourceLinks contains resource links",
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "description": "URL to resource itself",
          "type": "string"
        }
      }
    },
    "ResponseFormat": {
      "description": "ResponseFormat identifies response data format",
      "type": "string"
    },
    "SourceName": {
      "description": "SourceName feature source name",
      "type": "string"
    },
    "TransactionsFeatures": {
      "description": "TransactionsFeatures describes set of institution transactions features",
      "type": "object",
      "required": [
        "status",
        "description",
        "date",
        "amount",
        "balance",
        "class"
      ],
      "properties": {
        "amount": {
          "description": "TransactionAmount holds list of data source identifiers which are capable to fetch transaction amount.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "balance": {
          "description": "TransactionBalance holds list of data source identifiers which are capable to fetch account balance when transaction occured.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "class": {
          "description": "Class holds list of data source identifiers which are capable to fetch transaction class.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "date": {
          "description": "TransactionDate holds list of data source identifiers which are capable to fetch transaction date.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "description": {
          "description": "TransactionDescription holds list of data source identifiers which are capable to fetch transaction description.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        },
        "status": {
          "description": "TransactionStatus holds list of data source identifiers which are capable to fetch transaction status.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceName"
          },
          "example": [
            "web",
            "pdf",
            "csv"
          ]
        }
      }
    },
    "TokenPostResponse": {
      "type": "object",
      "required": [
        "access_token",
        "token_type",
        "expires_in"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "example": "access_token"
        },
        "expires_in": {
          "description": "Expires in seconds",
          "type": "integer",
          "format": "int64",
          "example": 3600
        },
        "token_type": {
          "type": "string",
          "example": "Bearer"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "application": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://au-api.basiq.io/token",
      "scopes": {
        "SERVER_ACCESS": "Server access scope",
        "CLIENT_ACCESS": "Client access scope"
      }
    }
  }
}
