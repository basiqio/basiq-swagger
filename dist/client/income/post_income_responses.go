// Code generated by go-swagger; DO NOT EDIT.

package income

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// PostIncomeReader is a Reader for the PostIncome structure.
type PostIncomeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostIncomeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostIncomeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPostIncomeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostIncomeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostIncomeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostIncomeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostIncomeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostIncomeOK creates a PostIncomeOK with default headers values
func NewPostIncomeOK() *PostIncomeOK {
	return &PostIncomeOK{}
}

/*
PostIncomeOK describes a response with status code 200, with default header values.

Returns a created income resource, if the operation succeeded.
*/
type PostIncomeOK struct {
	Payload *models.IncomeResponse
}

// IsSuccess returns true when this post income o k response has a 2xx status code
func (o *PostIncomeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post income o k response has a 3xx status code
func (o *PostIncomeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post income o k response has a 4xx status code
func (o *PostIncomeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post income o k response has a 5xx status code
func (o *PostIncomeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post income o k response a status code equal to that given
func (o *PostIncomeOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostIncomeOK) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeOK  %+v", 200, o.Payload)
}

func (o *PostIncomeOK) String() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeOK  %+v", 200, o.Payload)
}

func (o *PostIncomeOK) GetPayload() *models.IncomeResponse {
	return o.Payload
}

func (o *PostIncomeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IncomeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncomeNoContent creates a PostIncomeNoContent with default headers values
func NewPostIncomeNoContent() *PostIncomeNoContent {
	return &PostIncomeNoContent{}
}

/*
PostIncomeNoContent describes a response with status code 204, with default header values.

Returns no content if there are none transactions for the requested period.
*/
type PostIncomeNoContent struct {
}

// IsSuccess returns true when this post income no content response has a 2xx status code
func (o *PostIncomeNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post income no content response has a 3xx status code
func (o *PostIncomeNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post income no content response has a 4xx status code
func (o *PostIncomeNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this post income no content response has a 5xx status code
func (o *PostIncomeNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this post income no content response a status code equal to that given
func (o *PostIncomeNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *PostIncomeNoContent) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeNoContent ", 204)
}

func (o *PostIncomeNoContent) String() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeNoContent ", 204)
}

func (o *PostIncomeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostIncomeBadRequest creates a PostIncomeBadRequest with default headers values
func NewPostIncomeBadRequest() *PostIncomeBadRequest {
	return &PostIncomeBadRequest{}
}

/*
PostIncomeBadRequest describes a response with status code 400, with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error.
*/
type PostIncomeBadRequest struct {
	Payload *models.BadRequestError
}

// IsSuccess returns true when this post income bad request response has a 2xx status code
func (o *PostIncomeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post income bad request response has a 3xx status code
func (o *PostIncomeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post income bad request response has a 4xx status code
func (o *PostIncomeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post income bad request response has a 5xx status code
func (o *PostIncomeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post income bad request response a status code equal to that given
func (o *PostIncomeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostIncomeBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeBadRequest  %+v", 400, o.Payload)
}

func (o *PostIncomeBadRequest) String() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeBadRequest  %+v", 400, o.Payload)
}

func (o *PostIncomeBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *PostIncomeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncomeForbidden creates a PostIncomeForbidden with default headers values
func NewPostIncomeForbidden() *PostIncomeForbidden {
	return &PostIncomeForbidden{}
}

/*
PostIncomeForbidden describes a response with status code 403, with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type PostIncomeForbidden struct {
	Payload *models.ForbiddenAccessError
}

// IsSuccess returns true when this post income forbidden response has a 2xx status code
func (o *PostIncomeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post income forbidden response has a 3xx status code
func (o *PostIncomeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post income forbidden response has a 4xx status code
func (o *PostIncomeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post income forbidden response has a 5xx status code
func (o *PostIncomeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post income forbidden response a status code equal to that given
func (o *PostIncomeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostIncomeForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeForbidden  %+v", 403, o.Payload)
}

func (o *PostIncomeForbidden) String() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeForbidden  %+v", 403, o.Payload)
}

func (o *PostIncomeForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *PostIncomeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncomeNotFound creates a PostIncomeNotFound with default headers values
func NewPostIncomeNotFound() *PostIncomeNotFound {
	return &PostIncomeNotFound{}
}

/*
PostIncomeNotFound describes a response with status code 404, with default header values.

Returns error indicating that server can't find requested resource.
*/
type PostIncomeNotFound struct {
	Payload *models.NotFoundError
}

// IsSuccess returns true when this post income not found response has a 2xx status code
func (o *PostIncomeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post income not found response has a 3xx status code
func (o *PostIncomeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post income not found response has a 4xx status code
func (o *PostIncomeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post income not found response has a 5xx status code
func (o *PostIncomeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post income not found response a status code equal to that given
func (o *PostIncomeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostIncomeNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeNotFound  %+v", 404, o.Payload)
}

func (o *PostIncomeNotFound) String() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeNotFound  %+v", 404, o.Payload)
}

func (o *PostIncomeNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *PostIncomeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncomeInternalServerError creates a PostIncomeInternalServerError with default headers values
func NewPostIncomeInternalServerError() *PostIncomeInternalServerError {
	return &PostIncomeInternalServerError{}
}

/*
PostIncomeInternalServerError describes a response with status code 500, with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type PostIncomeInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this post income internal server error response has a 2xx status code
func (o *PostIncomeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post income internal server error response has a 3xx status code
func (o *PostIncomeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post income internal server error response has a 4xx status code
func (o *PostIncomeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post income internal server error response has a 5xx status code
func (o *PostIncomeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post income internal server error response a status code equal to that given
func (o *PostIncomeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostIncomeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeInternalServerError  %+v", 500, o.Payload)
}

func (o *PostIncomeInternalServerError) String() string {
	return fmt.Sprintf("[POST /users/{userId}/income][%d] postIncomeInternalServerError  %+v", 500, o.Payload)
}

func (o *PostIncomeInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *PostIncomeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
