// Code generated by go-swagger; DO NOT EDIT.

package auth_links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// GetAuthLinkReader is a Reader for the GetAuthLink structure.
type GetAuthLinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthLinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthLinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuthLinkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthLinkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetAuthLinkGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthLinkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAuthLinkServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAuthLinkOK creates a GetAuthLinkOK with default headers values
func NewGetAuthLinkOK() *GetAuthLinkOK {
	return &GetAuthLinkOK{}
}

/*
GetAuthLinkOK describes a response with status code 200, with default header values.

Returns details of a connection.
*/
type GetAuthLinkOK struct {
	Payload *models.AuthLinksResponseResource
}

// IsSuccess returns true when this get auth link o k response has a 2xx status code
func (o *GetAuthLinkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get auth link o k response has a 3xx status code
func (o *GetAuthLinkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth link o k response has a 4xx status code
func (o *GetAuthLinkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get auth link o k response has a 5xx status code
func (o *GetAuthLinkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth link o k response a status code equal to that given
func (o *GetAuthLinkOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAuthLinkOK) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkOK  %+v", 200, o.Payload)
}

func (o *GetAuthLinkOK) String() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkOK  %+v", 200, o.Payload)
}

func (o *GetAuthLinkOK) GetPayload() *models.AuthLinksResponseResource {
	return o.Payload
}

func (o *GetAuthLinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthLinksResponseResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthLinkBadRequest creates a GetAuthLinkBadRequest with default headers values
func NewGetAuthLinkBadRequest() *GetAuthLinkBadRequest {
	return &GetAuthLinkBadRequest{}
}

/*
GetAuthLinkBadRequest describes a response with status code 400, with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error
*/
type GetAuthLinkBadRequest struct {
	Payload *models.BadRequestError
}

// IsSuccess returns true when this get auth link bad request response has a 2xx status code
func (o *GetAuthLinkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth link bad request response has a 3xx status code
func (o *GetAuthLinkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth link bad request response has a 4xx status code
func (o *GetAuthLinkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth link bad request response has a 5xx status code
func (o *GetAuthLinkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth link bad request response a status code equal to that given
func (o *GetAuthLinkBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAuthLinkBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthLinkBadRequest) String() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthLinkBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetAuthLinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthLinkForbidden creates a GetAuthLinkForbidden with default headers values
func NewGetAuthLinkForbidden() *GetAuthLinkForbidden {
	return &GetAuthLinkForbidden{}
}

/*
GetAuthLinkForbidden describes a response with status code 403, with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type GetAuthLinkForbidden struct {
	Payload *models.ForbiddenAccessError
}

// IsSuccess returns true when this get auth link forbidden response has a 2xx status code
func (o *GetAuthLinkForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth link forbidden response has a 3xx status code
func (o *GetAuthLinkForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth link forbidden response has a 4xx status code
func (o *GetAuthLinkForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth link forbidden response has a 5xx status code
func (o *GetAuthLinkForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth link forbidden response a status code equal to that given
func (o *GetAuthLinkForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAuthLinkForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthLinkForbidden) String() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkForbidden  %+v", 403, o.Payload)
}

func (o *GetAuthLinkForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *GetAuthLinkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthLinkNotFound creates a GetAuthLinkNotFound with default headers values
func NewGetAuthLinkNotFound() *GetAuthLinkNotFound {
	return &GetAuthLinkNotFound{}
}

/*
GetAuthLinkNotFound describes a response with status code 404, with default header values.

Returns error indicating that server can't find requested resource.
*/
type GetAuthLinkNotFound struct {
	Payload *models.NotFoundError
}

// IsSuccess returns true when this get auth link not found response has a 2xx status code
func (o *GetAuthLinkNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth link not found response has a 3xx status code
func (o *GetAuthLinkNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth link not found response has a 4xx status code
func (o *GetAuthLinkNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth link not found response has a 5xx status code
func (o *GetAuthLinkNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth link not found response a status code equal to that given
func (o *GetAuthLinkNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAuthLinkNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthLinkNotFound) String() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthLinkNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetAuthLinkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthLinkGone creates a GetAuthLinkGone with default headers values
func NewGetAuthLinkGone() *GetAuthLinkGone {
	return &GetAuthLinkGone{}
}

/*
GetAuthLinkGone describes a response with status code 410, with default header values.

Returns error indicating that access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.
*/
type GetAuthLinkGone struct {
	Payload *models.GoneError
}

// IsSuccess returns true when this get auth link gone response has a 2xx status code
func (o *GetAuthLinkGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth link gone response has a 3xx status code
func (o *GetAuthLinkGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth link gone response has a 4xx status code
func (o *GetAuthLinkGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this get auth link gone response has a 5xx status code
func (o *GetAuthLinkGone) IsServerError() bool {
	return false
}

// IsCode returns true when this get auth link gone response a status code equal to that given
func (o *GetAuthLinkGone) IsCode(code int) bool {
	return code == 410
}

func (o *GetAuthLinkGone) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkGone  %+v", 410, o.Payload)
}

func (o *GetAuthLinkGone) String() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkGone  %+v", 410, o.Payload)
}

func (o *GetAuthLinkGone) GetPayload() *models.GoneError {
	return o.Payload
}

func (o *GetAuthLinkGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GoneError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthLinkInternalServerError creates a GetAuthLinkInternalServerError with default headers values
func NewGetAuthLinkInternalServerError() *GetAuthLinkInternalServerError {
	return &GetAuthLinkInternalServerError{}
}

/*
GetAuthLinkInternalServerError describes a response with status code 500, with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type GetAuthLinkInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get auth link internal server error response has a 2xx status code
func (o *GetAuthLinkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth link internal server error response has a 3xx status code
func (o *GetAuthLinkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth link internal server error response has a 4xx status code
func (o *GetAuthLinkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get auth link internal server error response has a 5xx status code
func (o *GetAuthLinkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get auth link internal server error response a status code equal to that given
func (o *GetAuthLinkInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAuthLinkInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthLinkInternalServerError) String() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthLinkInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetAuthLinkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthLinkServiceUnavailable creates a GetAuthLinkServiceUnavailable with default headers values
func NewGetAuthLinkServiceUnavailable() *GetAuthLinkServiceUnavailable {
	return &GetAuthLinkServiceUnavailable{}
}

/*
GetAuthLinkServiceUnavailable describes a response with status code 503, with default header values.

Returns error response code indicates that the server is not ready to handle the request.
*/
type GetAuthLinkServiceUnavailable struct {
	Payload *models.StatusServiceUnavailableError
}

// IsSuccess returns true when this get auth link service unavailable response has a 2xx status code
func (o *GetAuthLinkServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get auth link service unavailable response has a 3xx status code
func (o *GetAuthLinkServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get auth link service unavailable response has a 4xx status code
func (o *GetAuthLinkServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get auth link service unavailable response has a 5xx status code
func (o *GetAuthLinkServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get auth link service unavailable response a status code equal to that given
func (o *GetAuthLinkServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAuthLinkServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthLinkServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /users/{userId}/auth_link][%d] getAuthLinkServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAuthLinkServiceUnavailable) GetPayload() *models.StatusServiceUnavailableError {
	return o.Payload
}

func (o *GetAuthLinkServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusServiceUnavailableError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
