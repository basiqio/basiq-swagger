// Code generated by go-swagger; DO NOT EDIT.

package expenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// GetExpensesReader is a Reader for the GetExpenses structure.
type GetExpensesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExpensesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExpensesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetExpensesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetExpensesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExpensesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetExpensesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetExpensesOK creates a GetExpensesOK with default headers values
func NewGetExpensesOK() *GetExpensesOK {
	return &GetExpensesOK{}
}

/* GetExpensesOK describes a response with status code 200, with default header values.

Returns a saved expenses resource, if the operation succeeded.
*/
type GetExpensesOK struct {
	Payload *models.ExpensesResponse
}

func (o *GetExpensesOK) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/expenses/{snapshotId}][%d] getExpensesOK  %+v", 200, o.Payload)
}
func (o *GetExpensesOK) GetPayload() *models.ExpensesResponse {
	return o.Payload
}

func (o *GetExpensesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExpensesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExpensesBadRequest creates a GetExpensesBadRequest with default headers values
func NewGetExpensesBadRequest() *GetExpensesBadRequest {
	return &GetExpensesBadRequest{}
}

/* GetExpensesBadRequest describes a response with status code 400, with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error.
*/
type GetExpensesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetExpensesBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/expenses/{snapshotId}][%d] getExpensesBadRequest  %+v", 400, o.Payload)
}
func (o *GetExpensesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetExpensesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExpensesForbidden creates a GetExpensesForbidden with default headers values
func NewGetExpensesForbidden() *GetExpensesForbidden {
	return &GetExpensesForbidden{}
}

/* GetExpensesForbidden describes a response with status code 403, with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type GetExpensesForbidden struct {
	Payload *models.ForbiddenAccessError
}

func (o *GetExpensesForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/expenses/{snapshotId}][%d] getExpensesForbidden  %+v", 403, o.Payload)
}
func (o *GetExpensesForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *GetExpensesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExpensesNotFound creates a GetExpensesNotFound with default headers values
func NewGetExpensesNotFound() *GetExpensesNotFound {
	return &GetExpensesNotFound{}
}

/* GetExpensesNotFound describes a response with status code 404, with default header values.

Returns error indicating that server can't find requested resource.
*/
type GetExpensesNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetExpensesNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/expenses/{snapshotId}][%d] getExpensesNotFound  %+v", 404, o.Payload)
}
func (o *GetExpensesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetExpensesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExpensesInternalServerError creates a GetExpensesInternalServerError with default headers values
func NewGetExpensesInternalServerError() *GetExpensesInternalServerError {
	return &GetExpensesInternalServerError{}
}

/* GetExpensesInternalServerError describes a response with status code 500, with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type GetExpensesInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetExpensesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/expenses/{snapshotId}][%d] getExpensesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetExpensesInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetExpensesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
