// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// GetUserReader is a Reader for the GetUser structure.
type GetUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserOK creates a GetUserOK with default headers values
func NewGetUserOK() *GetUserOK {
	return &GetUserOK{}
}

/*
GetUserOK describes a response with status code 200, with default header values.

Returns a user if a valid user ID was provided.
*/
type GetUserOK struct {
	Payload *models.UserGetResponse
}

// IsSuccess returns true when this get user o k response has a 2xx status code
func (o *GetUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user o k response has a 3xx status code
func (o *GetUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user o k response has a 4xx status code
func (o *GetUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user o k response has a 5xx status code
func (o *GetUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user o k response a status code equal to that given
func (o *GetUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetUserOK) Error() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserOK  %+v", 200, o.Payload)
}

func (o *GetUserOK) String() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserOK  %+v", 200, o.Payload)
}

func (o *GetUserOK) GetPayload() *models.UserGetResponse {
	return o.Payload
}

func (o *GetUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserBadRequest creates a GetUserBadRequest with default headers values
func NewGetUserBadRequest() *GetUserBadRequest {
	return &GetUserBadRequest{}
}

/*
GetUserBadRequest describes a response with status code 400, with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error.
*/
type GetUserBadRequest struct {
	Payload *models.BadRequestError
}

// IsSuccess returns true when this get user bad request response has a 2xx status code
func (o *GetUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user bad request response has a 3xx status code
func (o *GetUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user bad request response has a 4xx status code
func (o *GetUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user bad request response has a 5xx status code
func (o *GetUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get user bad request response a status code equal to that given
func (o *GetUserBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserBadRequest) String() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserUnauthorized creates a GetUserUnauthorized with default headers values
func NewGetUserUnauthorized() *GetUserUnauthorized {
	return &GetUserUnauthorized{}
}

/*
GetUserUnauthorized describes a response with status code 401, with default header values.

Error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.
*/
type GetUserUnauthorized struct {
	Payload *models.UnauthorizedError
}

// IsSuccess returns true when this get user unauthorized response has a 2xx status code
func (o *GetUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user unauthorized response has a 3xx status code
func (o *GetUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user unauthorized response has a 4xx status code
func (o *GetUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user unauthorized response has a 5xx status code
func (o *GetUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get user unauthorized response a status code equal to that given
func (o *GetUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserUnauthorized) String() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserUnauthorized) GetPayload() *models.UnauthorizedError {
	return o.Payload
}

func (o *GetUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthorizedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserForbidden creates a GetUserForbidden with default headers values
func NewGetUserForbidden() *GetUserForbidden {
	return &GetUserForbidden{}
}

/*
GetUserForbidden describes a response with status code 403, with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type GetUserForbidden struct {
	Payload *models.ForbiddenAccessError
}

// IsSuccess returns true when this get user forbidden response has a 2xx status code
func (o *GetUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user forbidden response has a 3xx status code
func (o *GetUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user forbidden response has a 4xx status code
func (o *GetUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user forbidden response has a 5xx status code
func (o *GetUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user forbidden response a status code equal to that given
func (o *GetUserForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetUserForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserForbidden  %+v", 403, o.Payload)
}

func (o *GetUserForbidden) String() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserForbidden  %+v", 403, o.Payload)
}

func (o *GetUserForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *GetUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserNotFound creates a GetUserNotFound with default headers values
func NewGetUserNotFound() *GetUserNotFound {
	return &GetUserNotFound{}
}

/*
GetUserNotFound describes a response with status code 404, with default header values.

Returns error indicating that server can't find requested resource.
*/
type GetUserNotFound struct {
	Payload *models.NotFoundError
}

// IsSuccess returns true when this get user not found response has a 2xx status code
func (o *GetUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user not found response has a 3xx status code
func (o *GetUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user not found response has a 4xx status code
func (o *GetUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user not found response has a 5xx status code
func (o *GetUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user not found response a status code equal to that given
func (o *GetUserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetUserNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserNotFound  %+v", 404, o.Payload)
}

func (o *GetUserNotFound) String() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserNotFound  %+v", 404, o.Payload)
}

func (o *GetUserNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserInternalServerError creates a GetUserInternalServerError with default headers values
func NewGetUserInternalServerError() *GetUserInternalServerError {
	return &GetUserInternalServerError{}
}

/*
GetUserInternalServerError describes a response with status code 500, with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type GetUserInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get user internal server error response has a 2xx status code
func (o *GetUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user internal server error response has a 3xx status code
func (o *GetUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user internal server error response has a 4xx status code
func (o *GetUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user internal server error response has a 5xx status code
func (o *GetUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get user internal server error response a status code equal to that given
func (o *GetUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserInternalServerError) String() string {
	return fmt.Sprintf("[GET /users/{userId}][%d] getUserInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
