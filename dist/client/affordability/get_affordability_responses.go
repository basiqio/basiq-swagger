// Code generated by go-swagger; DO NOT EDIT.

package affordability

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// GetAffordabilityReader is a Reader for the GetAffordability structure.
type GetAffordabilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAffordabilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAffordabilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAffordabilityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAffordabilityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAffordabilityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAffordabilityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAffordabilityOK creates a GetAffordabilityOK with default headers values
func NewGetAffordabilityOK() *GetAffordabilityOK {
	return &GetAffordabilityOK{}
}

/*GetAffordabilityOK handles this case with default header values.

Returns a saved affordability resource JSON or PDF report file, if the operation succeeded.
*/
type GetAffordabilityOK struct {
	Payload *models.AffordabilityResponse
}

func (o *GetAffordabilityOK) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/affordability/{snapshotId}][%d] getAffordabilityOK  %+v", 200, o.Payload)
}

func (o *GetAffordabilityOK) GetPayload() *models.AffordabilityResponse {
	return o.Payload
}

func (o *GetAffordabilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AffordabilityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAffordabilityBadRequest creates a GetAffordabilityBadRequest with default headers values
func NewGetAffordabilityBadRequest() *GetAffordabilityBadRequest {
	return &GetAffordabilityBadRequest{}
}

/*GetAffordabilityBadRequest handles this case with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error.
*/
type GetAffordabilityBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetAffordabilityBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/affordability/{snapshotId}][%d] getAffordabilityBadRequest  %+v", 400, o.Payload)
}

func (o *GetAffordabilityBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetAffordabilityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAffordabilityForbidden creates a GetAffordabilityForbidden with default headers values
func NewGetAffordabilityForbidden() *GetAffordabilityForbidden {
	return &GetAffordabilityForbidden{}
}

/*GetAffordabilityForbidden handles this case with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type GetAffordabilityForbidden struct {
	Payload *models.ForbiddenAccessError
}

func (o *GetAffordabilityForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/affordability/{snapshotId}][%d] getAffordabilityForbidden  %+v", 403, o.Payload)
}

func (o *GetAffordabilityForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *GetAffordabilityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAffordabilityNotFound creates a GetAffordabilityNotFound with default headers values
func NewGetAffordabilityNotFound() *GetAffordabilityNotFound {
	return &GetAffordabilityNotFound{}
}

/*GetAffordabilityNotFound handles this case with default header values.

Returns error indicating that server can't find requested resource.
*/
type GetAffordabilityNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetAffordabilityNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/affordability/{snapshotId}][%d] getAffordabilityNotFound  %+v", 404, o.Payload)
}

func (o *GetAffordabilityNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetAffordabilityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAffordabilityInternalServerError creates a GetAffordabilityInternalServerError with default headers values
func NewGetAffordabilityInternalServerError() *GetAffordabilityInternalServerError {
	return &GetAffordabilityInternalServerError{}
}

/*GetAffordabilityInternalServerError handles this case with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type GetAffordabilityInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetAffordabilityInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/affordability/{snapshotId}][%d] getAffordabilityInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAffordabilityInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetAffordabilityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
