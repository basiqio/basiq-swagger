// Code generated by go-swagger; DO NOT EDIT.

package affordability

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAffordabilitySnapshotTransactionsParams creates a new GetAffordabilitySnapshotTransactionsParams object
// with the default values initialized.
func NewGetAffordabilitySnapshotTransactionsParams() *GetAffordabilitySnapshotTransactionsParams {
	var ()
	return &GetAffordabilitySnapshotTransactionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAffordabilitySnapshotTransactionsParamsWithTimeout creates a new GetAffordabilitySnapshotTransactionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAffordabilitySnapshotTransactionsParamsWithTimeout(timeout time.Duration) *GetAffordabilitySnapshotTransactionsParams {
	var ()
	return &GetAffordabilitySnapshotTransactionsParams{

		timeout: timeout,
	}
}

// NewGetAffordabilitySnapshotTransactionsParamsWithContext creates a new GetAffordabilitySnapshotTransactionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAffordabilitySnapshotTransactionsParamsWithContext(ctx context.Context) *GetAffordabilitySnapshotTransactionsParams {
	var ()
	return &GetAffordabilitySnapshotTransactionsParams{

		Context: ctx,
	}
}

// NewGetAffordabilitySnapshotTransactionsParamsWithHTTPClient creates a new GetAffordabilitySnapshotTransactionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAffordabilitySnapshotTransactionsParamsWithHTTPClient(client *http.Client) *GetAffordabilitySnapshotTransactionsParams {
	var ()
	return &GetAffordabilitySnapshotTransactionsParams{
		HTTPClient: client,
	}
}

/*GetAffordabilitySnapshotTransactionsParams contains all the parameters to send to the API endpoint
for the get affordability snapshot transactions operation typically these are written to a http.Request
*/
type GetAffordabilitySnapshotTransactionsParams struct {

	/*Limit
	  This represents the maximum number of transactions that may be included in the response (maximum of 500). Note that by default 500 transactions are returned if this value is not specified.

	*/
	Limit *int64
	/*SnapshotID
	  The identifier of the affordability report to be retrieved.

	*/
	SnapshotID string
	/*UserID
	  The identifier of the user.

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) WithTimeout(timeout time.Duration) *GetAffordabilitySnapshotTransactionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) WithContext(ctx context.Context) *GetAffordabilitySnapshotTransactionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) WithHTTPClient(client *http.Client) *GetAffordabilitySnapshotTransactionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) WithLimit(limit *int64) *GetAffordabilitySnapshotTransactionsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSnapshotID adds the snapshotID to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) WithSnapshotID(snapshotID string) *GetAffordabilitySnapshotTransactionsParams {
	o.SetSnapshotID(snapshotID)
	return o
}

// SetSnapshotID adds the snapshotId to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) SetSnapshotID(snapshotID string) {
	o.SnapshotID = snapshotID
}

// WithUserID adds the userID to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) WithUserID(userID string) *GetAffordabilitySnapshotTransactionsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get affordability snapshot transactions params
func (o *GetAffordabilitySnapshotTransactionsParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAffordabilitySnapshotTransactionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param snapshotId
	if err := r.SetPathParam("snapshotId", o.SnapshotID); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
