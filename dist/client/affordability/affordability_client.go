// Code generated by go-swagger; DO NOT EDIT.

package affordability

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new affordability API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for affordability API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAffordability(params *GetAffordabilityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffordabilityOK, error)

	GetAffordabilityList(params *GetAffordabilityListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffordabilityListOK, error)

	GetAffordabilitySnapshotTransactions(params *GetAffordabilitySnapshotTransactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffordabilitySnapshotTransactionsOK, error)

	PostAffordability(params *PostAffordabilityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAffordabilityOK, *PostAffordabilityCreated, *PostAffordabilityNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAffordability retrieves the details of an affordability summary you need only supply the unique affordability identifier
*/
func (a *Client) GetAffordability(params *GetAffordabilityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffordabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAffordabilityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAffordability",
		Method:             "GET",
		PathPattern:        "/users/{userId}/affordability/{snapshotId}",
		ProducesMediaTypes: []string{"application/json", "application/pdf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAffordabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAffordabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAffordability: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAffordabilityList returns a list with a data property that contains an array of affordability resources
*/
func (a *Client) GetAffordabilityList(params *GetAffordabilityListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffordabilityListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAffordabilityListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAffordabilityList",
		Method:             "GET",
		PathPattern:        "/users/{userId}/affordability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAffordabilityListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAffordabilityListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAffordabilityList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAffordabilitySnapshotTransactions returns a paginated list with a data property that contains an array of transactions from the affordability snapshot
*/
func (a *Client) GetAffordabilitySnapshotTransactions(params *GetAffordabilitySnapshotTransactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffordabilitySnapshotTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAffordabilitySnapshotTransactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAffordabilitySnapshotTransactions",
		Method:             "GET",
		PathPattern:        "/users/{userId}/affordability/{snapshotId}/transactions",
		ProducesMediaTypes: []string{"application/csv", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAffordabilitySnapshotTransactionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAffordabilitySnapshotTransactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAffordabilitySnapshotTransactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAffordability uses this to create a new affordability report
*/
func (a *Client) PostAffordability(params *PostAffordabilityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAffordabilityOK, *PostAffordabilityCreated, *PostAffordabilityNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAffordabilityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postAffordability",
		Method:             "POST",
		PathPattern:        "/users/{userId}/affordability",
		ProducesMediaTypes: []string{"application/json", "application/pdf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAffordabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *PostAffordabilityOK:
		return value, nil, nil, nil
	case *PostAffordabilityCreated:
		return nil, value, nil, nil
	case *PostAffordabilityNoContent:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for affordability: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
