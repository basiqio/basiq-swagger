// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// UpdateConnectionReader is a Reader for the UpdateConnection structure.
type UpdateConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateConnectionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateConnectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateConnectionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateConnectionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateConnectionAccepted creates a UpdateConnectionAccepted with default headers values
func NewUpdateConnectionAccepted() *UpdateConnectionAccepted {
	return &UpdateConnectionAccepted{}
}

/*
UpdateConnectionAccepted describes a response with status code 202, with default header values.

Returns a job object if the request succeeded.
*/
type UpdateConnectionAccepted struct {
	Payload *models.ConnectionResponseResource
}

// IsSuccess returns true when this update connection accepted response has a 2xx status code
func (o *UpdateConnectionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update connection accepted response has a 3xx status code
func (o *UpdateConnectionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection accepted response has a 4xx status code
func (o *UpdateConnectionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update connection accepted response has a 5xx status code
func (o *UpdateConnectionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection accepted response a status code equal to that given
func (o *UpdateConnectionAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *UpdateConnectionAccepted) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionAccepted  %+v", 202, o.Payload)
}

func (o *UpdateConnectionAccepted) String() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionAccepted  %+v", 202, o.Payload)
}

func (o *UpdateConnectionAccepted) GetPayload() *models.ConnectionResponseResource {
	return o.Payload
}

func (o *UpdateConnectionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConnectionResponseResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectionBadRequest creates a UpdateConnectionBadRequest with default headers values
func NewUpdateConnectionBadRequest() *UpdateConnectionBadRequest {
	return &UpdateConnectionBadRequest{}
}

/*
UpdateConnectionBadRequest describes a response with status code 400, with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error
*/
type UpdateConnectionBadRequest struct {
	Payload *models.BadRequestError
}

// IsSuccess returns true when this update connection bad request response has a 2xx status code
func (o *UpdateConnectionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection bad request response has a 3xx status code
func (o *UpdateConnectionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection bad request response has a 4xx status code
func (o *UpdateConnectionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection bad request response has a 5xx status code
func (o *UpdateConnectionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection bad request response a status code equal to that given
func (o *UpdateConnectionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateConnectionBadRequest) String() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateConnectionBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectionUnauthorized creates a UpdateConnectionUnauthorized with default headers values
func NewUpdateConnectionUnauthorized() *UpdateConnectionUnauthorized {
	return &UpdateConnectionUnauthorized{}
}

/*
UpdateConnectionUnauthorized describes a response with status code 401, with default header values.

Error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.
*/
type UpdateConnectionUnauthorized struct {
	Payload *models.UnauthorizedError
}

// IsSuccess returns true when this update connection unauthorized response has a 2xx status code
func (o *UpdateConnectionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection unauthorized response has a 3xx status code
func (o *UpdateConnectionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection unauthorized response has a 4xx status code
func (o *UpdateConnectionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection unauthorized response has a 5xx status code
func (o *UpdateConnectionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection unauthorized response a status code equal to that given
func (o *UpdateConnectionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateConnectionUnauthorized) String() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateConnectionUnauthorized) GetPayload() *models.UnauthorizedError {
	return o.Payload
}

func (o *UpdateConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthorizedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectionForbidden creates a UpdateConnectionForbidden with default headers values
func NewUpdateConnectionForbidden() *UpdateConnectionForbidden {
	return &UpdateConnectionForbidden{}
}

/*
UpdateConnectionForbidden describes a response with status code 403, with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type UpdateConnectionForbidden struct {
	Payload *models.ForbiddenAccessError
}

// IsSuccess returns true when this update connection forbidden response has a 2xx status code
func (o *UpdateConnectionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection forbidden response has a 3xx status code
func (o *UpdateConnectionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection forbidden response has a 4xx status code
func (o *UpdateConnectionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection forbidden response has a 5xx status code
func (o *UpdateConnectionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection forbidden response a status code equal to that given
func (o *UpdateConnectionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateConnectionForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionForbidden  %+v", 403, o.Payload)
}

func (o *UpdateConnectionForbidden) String() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionForbidden  %+v", 403, o.Payload)
}

func (o *UpdateConnectionForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *UpdateConnectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectionNotFound creates a UpdateConnectionNotFound with default headers values
func NewUpdateConnectionNotFound() *UpdateConnectionNotFound {
	return &UpdateConnectionNotFound{}
}

/*
UpdateConnectionNotFound describes a response with status code 404, with default header values.

Returns error indicating that server can't find requested resource.
*/
type UpdateConnectionNotFound struct {
	Payload *models.NotFoundError
}

// IsSuccess returns true when this update connection not found response has a 2xx status code
func (o *UpdateConnectionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection not found response has a 3xx status code
func (o *UpdateConnectionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection not found response has a 4xx status code
func (o *UpdateConnectionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection not found response has a 5xx status code
func (o *UpdateConnectionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection not found response a status code equal to that given
func (o *UpdateConnectionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateConnectionNotFound) String() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateConnectionNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectionUnsupportedMediaType creates a UpdateConnectionUnsupportedMediaType with default headers values
func NewUpdateConnectionUnsupportedMediaType() *UpdateConnectionUnsupportedMediaType {
	return &UpdateConnectionUnsupportedMediaType{}
}

/*
UpdateConnectionUnsupportedMediaType describes a response with status code 415, with default header values.

Returns error response code that indicates that the server refuses to accept the request because the payload format is in an unsupported format.
*/
type UpdateConnectionUnsupportedMediaType struct {
	Payload *models.UnsupportedMediaTypeError
}

// IsSuccess returns true when this update connection unsupported media type response has a 2xx status code
func (o *UpdateConnectionUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection unsupported media type response has a 3xx status code
func (o *UpdateConnectionUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection unsupported media type response has a 4xx status code
func (o *UpdateConnectionUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update connection unsupported media type response has a 5xx status code
func (o *UpdateConnectionUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update connection unsupported media type response a status code equal to that given
func (o *UpdateConnectionUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateConnectionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateConnectionUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateConnectionUnsupportedMediaType) GetPayload() *models.UnsupportedMediaTypeError {
	return o.Payload
}

func (o *UpdateConnectionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnsupportedMediaTypeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectionInternalServerError creates a UpdateConnectionInternalServerError with default headers values
func NewUpdateConnectionInternalServerError() *UpdateConnectionInternalServerError {
	return &UpdateConnectionInternalServerError{}
}

/*
UpdateConnectionInternalServerError describes a response with status code 500, with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type UpdateConnectionInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this update connection internal server error response has a 2xx status code
func (o *UpdateConnectionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection internal server error response has a 3xx status code
func (o *UpdateConnectionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection internal server error response has a 4xx status code
func (o *UpdateConnectionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update connection internal server error response has a 5xx status code
func (o *UpdateConnectionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update connection internal server error response a status code equal to that given
func (o *UpdateConnectionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateConnectionInternalServerError) String() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateConnectionInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *UpdateConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectionServiceUnavailable creates a UpdateConnectionServiceUnavailable with default headers values
func NewUpdateConnectionServiceUnavailable() *UpdateConnectionServiceUnavailable {
	return &UpdateConnectionServiceUnavailable{}
}

/*
UpdateConnectionServiceUnavailable describes a response with status code 503, with default header values.

Returns error response code indicates that the server is not ready to handle the request.
*/
type UpdateConnectionServiceUnavailable struct {
	Payload *models.StatusServiceUnavailableError
}

// IsSuccess returns true when this update connection service unavailable response has a 2xx status code
func (o *UpdateConnectionServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update connection service unavailable response has a 3xx status code
func (o *UpdateConnectionServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update connection service unavailable response has a 4xx status code
func (o *UpdateConnectionServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update connection service unavailable response has a 5xx status code
func (o *UpdateConnectionServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update connection service unavailable response a status code equal to that given
func (o *UpdateConnectionServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateConnectionServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateConnectionServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}][%d] updateConnectionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateConnectionServiceUnavailable) GetPayload() *models.StatusServiceUnavailableError {
	return o.Payload
}

func (o *UpdateConnectionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusServiceUnavailableError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
