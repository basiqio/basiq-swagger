// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// GetConnectionsReader is a Reader for the GetConnections structure.
type GetConnectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConnectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConnectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConnectionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConnectionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConnectionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConnectionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetConnectionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConnectionsOK creates a GetConnectionsOK with default headers values
func NewGetConnectionsOK() *GetConnectionsOK {
	return &GetConnectionsOK{}
}

/*GetConnectionsOK handles this case with default header values.

Returns details of connections.
*/
type GetConnectionsOK struct {
	Payload *models.ConnectionsGetResponseResource
}

func (o *GetConnectionsOK) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/connections][%d] getConnectionsOK  %+v", 200, o.Payload)
}

func (o *GetConnectionsOK) GetPayload() *models.ConnectionsGetResponseResource {
	return o.Payload
}

func (o *GetConnectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConnectionsGetResponseResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsBadRequest creates a GetConnectionsBadRequest with default headers values
func NewGetConnectionsBadRequest() *GetConnectionsBadRequest {
	return &GetConnectionsBadRequest{}
}

/*GetConnectionsBadRequest handles this case with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error.
*/
type GetConnectionsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetConnectionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/connections][%d] getConnectionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetConnectionsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetConnectionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsForbidden creates a GetConnectionsForbidden with default headers values
func NewGetConnectionsForbidden() *GetConnectionsForbidden {
	return &GetConnectionsForbidden{}
}

/*GetConnectionsForbidden handles this case with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type GetConnectionsForbidden struct {
	Payload *models.ForbiddenAccessError
}

func (o *GetConnectionsForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/connections][%d] getConnectionsForbidden  %+v", 403, o.Payload)
}

func (o *GetConnectionsForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *GetConnectionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsNotFound creates a GetConnectionsNotFound with default headers values
func NewGetConnectionsNotFound() *GetConnectionsNotFound {
	return &GetConnectionsNotFound{}
}

/*GetConnectionsNotFound handles this case with default header values.

Returns error indicating that server can't find requested resource.
*/
type GetConnectionsNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetConnectionsNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/connections][%d] getConnectionsNotFound  %+v", 404, o.Payload)
}

func (o *GetConnectionsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetConnectionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsInternalServerError creates a GetConnectionsInternalServerError with default headers values
func NewGetConnectionsInternalServerError() *GetConnectionsInternalServerError {
	return &GetConnectionsInternalServerError{}
}

/*GetConnectionsInternalServerError handles this case with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type GetConnectionsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetConnectionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/connections][%d] getConnectionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConnectionsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetConnectionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionsServiceUnavailable creates a GetConnectionsServiceUnavailable with default headers values
func NewGetConnectionsServiceUnavailable() *GetConnectionsServiceUnavailable {
	return &GetConnectionsServiceUnavailable{}
}

/*GetConnectionsServiceUnavailable handles this case with default header values.

Returns error response code indicates that the server is not ready to handle the request.
*/
type GetConnectionsServiceUnavailable struct {
	Payload *models.StatusServiceUnavailableError
}

func (o *GetConnectionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/connections][%d] getConnectionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetConnectionsServiceUnavailable) GetPayload() *models.StatusServiceUnavailableError {
	return o.Payload
}

func (o *GetConnectionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusServiceUnavailableError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
