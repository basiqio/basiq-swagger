// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// RefreshConnectionReader is a Reader for the RefreshConnection structure.
type RefreshConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewRefreshConnectionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRefreshConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRefreshConnectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRefreshConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRefreshConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewRefreshConnectionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRefreshConnectionAccepted creates a RefreshConnectionAccepted with default headers values
func NewRefreshConnectionAccepted() *RefreshConnectionAccepted {
	return &RefreshConnectionAccepted{}
}

/*RefreshConnectionAccepted handles this case with default header values.

Returns a created job resource, if the operation succeeded.
*/
type RefreshConnectionAccepted struct {
	Payload *models.ConnectionResponseResource
}

func (o *RefreshConnectionAccepted) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}/refresh][%d] refreshConnectionAccepted  %+v", 202, o.Payload)
}

func (o *RefreshConnectionAccepted) GetPayload() *models.ConnectionResponseResource {
	return o.Payload
}

func (o *RefreshConnectionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConnectionResponseResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshConnectionBadRequest creates a RefreshConnectionBadRequest with default headers values
func NewRefreshConnectionBadRequest() *RefreshConnectionBadRequest {
	return &RefreshConnectionBadRequest{}
}

/*RefreshConnectionBadRequest handles this case with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error
*/
type RefreshConnectionBadRequest struct {
	Payload *models.BadRequestError
}

func (o *RefreshConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}/refresh][%d] refreshConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *RefreshConnectionBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *RefreshConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshConnectionForbidden creates a RefreshConnectionForbidden with default headers values
func NewRefreshConnectionForbidden() *RefreshConnectionForbidden {
	return &RefreshConnectionForbidden{}
}

/*RefreshConnectionForbidden handles this case with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type RefreshConnectionForbidden struct {
	Payload *models.ForbiddenAccessError
}

func (o *RefreshConnectionForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}/refresh][%d] refreshConnectionForbidden  %+v", 403, o.Payload)
}

func (o *RefreshConnectionForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *RefreshConnectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshConnectionNotFound creates a RefreshConnectionNotFound with default headers values
func NewRefreshConnectionNotFound() *RefreshConnectionNotFound {
	return &RefreshConnectionNotFound{}
}

/*RefreshConnectionNotFound handles this case with default header values.

Returns error indicating that server can't find requested resource.
*/
type RefreshConnectionNotFound struct {
	Payload *models.NotFoundError
}

func (o *RefreshConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}/refresh][%d] refreshConnectionNotFound  %+v", 404, o.Payload)
}

func (o *RefreshConnectionNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *RefreshConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshConnectionInternalServerError creates a RefreshConnectionInternalServerError with default headers values
func NewRefreshConnectionInternalServerError() *RefreshConnectionInternalServerError {
	return &RefreshConnectionInternalServerError{}
}

/*RefreshConnectionInternalServerError handles this case with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type RefreshConnectionInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *RefreshConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}/refresh][%d] refreshConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *RefreshConnectionInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *RefreshConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshConnectionServiceUnavailable creates a RefreshConnectionServiceUnavailable with default headers values
func NewRefreshConnectionServiceUnavailable() *RefreshConnectionServiceUnavailable {
	return &RefreshConnectionServiceUnavailable{}
}

/*RefreshConnectionServiceUnavailable handles this case with default header values.

Returns error response code indicates that the server is not ready to handle the request.
*/
type RefreshConnectionServiceUnavailable struct {
	Payload *models.StatusServiceUnavailableError
}

func (o *RefreshConnectionServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /users/{userId}/connections/{connectionId}/refresh][%d] refreshConnectionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *RefreshConnectionServiceUnavailable) GetPayload() *models.StatusServiceUnavailableError {
	return o.Payload
}

func (o *RefreshConnectionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusServiceUnavailableError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
