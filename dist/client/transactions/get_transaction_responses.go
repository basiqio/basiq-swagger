// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// GetTransactionReader is a Reader for the GetTransaction structure.
type GetTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTransactionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTransactionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTransactionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTransactionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetTransactionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTransactionOK creates a GetTransactionOK with default headers values
func NewGetTransactionOK() *GetTransactionOK {
	return &GetTransactionOK{}
}

/*GetTransactionOK handles this case with default header values.

Returns a transaction if a valid transaction ID was provided.
*/
type GetTransactionOK struct {
	Payload *models.TransactionData
}

func (o *GetTransactionOK) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions/{transactionId}][%d] getTransactionOK  %+v", 200, o.Payload)
}

func (o *GetTransactionOK) GetPayload() *models.TransactionData {
	return o.Payload
}

func (o *GetTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransactionData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionBadRequest creates a GetTransactionBadRequest with default headers values
func NewGetTransactionBadRequest() *GetTransactionBadRequest {
	return &GetTransactionBadRequest{}
}

/*GetTransactionBadRequest handles this case with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error.
*/
type GetTransactionBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetTransactionBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions/{transactionId}][%d] getTransactionBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransactionBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetTransactionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionForbidden creates a GetTransactionForbidden with default headers values
func NewGetTransactionForbidden() *GetTransactionForbidden {
	return &GetTransactionForbidden{}
}

/*GetTransactionForbidden handles this case with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type GetTransactionForbidden struct {
	Payload *models.ForbiddenAccessError
}

func (o *GetTransactionForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions/{transactionId}][%d] getTransactionForbidden  %+v", 403, o.Payload)
}

func (o *GetTransactionForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *GetTransactionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionNotFound creates a GetTransactionNotFound with default headers values
func NewGetTransactionNotFound() *GetTransactionNotFound {
	return &GetTransactionNotFound{}
}

/*GetTransactionNotFound handles this case with default header values.

Returns error indicating that server can't find requested resource.
*/
type GetTransactionNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetTransactionNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions/{transactionId}][%d] getTransactionNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetTransactionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionInternalServerError creates a GetTransactionInternalServerError with default headers values
func NewGetTransactionInternalServerError() *GetTransactionInternalServerError {
	return &GetTransactionInternalServerError{}
}

/*GetTransactionInternalServerError handles this case with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type GetTransactionInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetTransactionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions/{transactionId}][%d] getTransactionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTransactionInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetTransactionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionServiceUnavailable creates a GetTransactionServiceUnavailable with default headers values
func NewGetTransactionServiceUnavailable() *GetTransactionServiceUnavailable {
	return &GetTransactionServiceUnavailable{}
}

/*GetTransactionServiceUnavailable handles this case with default header values.

Returns error response code indicates that the server is not ready to handle the request.
*/
type GetTransactionServiceUnavailable struct {
	Payload *models.StatusServiceUnavailableError
}

func (o *GetTransactionServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions/{transactionId}][%d] getTransactionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTransactionServiceUnavailable) GetPayload() *models.StatusServiceUnavailableError {
	return o.Payload
}

func (o *GetTransactionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusServiceUnavailableError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
