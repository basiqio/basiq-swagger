// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// GetTransactionsReader is a Reader for the GetTransactions structure.
type GetTransactionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTransactionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTransactionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTransactionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTransactionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTransactionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTransactionsOK creates a GetTransactionsOK with default headers values
func NewGetTransactionsOK() *GetTransactionsOK {
	return &GetTransactionsOK{}
}

/*
GetTransactionsOK describes a response with status code 200, with default header values.

Returns a paginated list with a data property that contains an array of transactions. Each entry in the array is a separate object. If no data is returned, the resulting array will be empty.
*/
type GetTransactionsOK struct {
	Payload *models.TransactionsGetResource
}

// IsSuccess returns true when this get transactions o k response has a 2xx status code
func (o *GetTransactionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get transactions o k response has a 3xx status code
func (o *GetTransactionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transactions o k response has a 4xx status code
func (o *GetTransactionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get transactions o k response has a 5xx status code
func (o *GetTransactionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get transactions o k response a status code equal to that given
func (o *GetTransactionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetTransactionsOK) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsOK  %+v", 200, o.Payload)
}

func (o *GetTransactionsOK) String() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsOK  %+v", 200, o.Payload)
}

func (o *GetTransactionsOK) GetPayload() *models.TransactionsGetResource {
	return o.Payload
}

func (o *GetTransactionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransactionsGetResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsBadRequest creates a GetTransactionsBadRequest with default headers values
func NewGetTransactionsBadRequest() *GetTransactionsBadRequest {
	return &GetTransactionsBadRequest{}
}

/*
GetTransactionsBadRequest describes a response with status code 400, with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error.
*/
type GetTransactionsBadRequest struct {
	Payload *models.BadRequestError
}

// IsSuccess returns true when this get transactions bad request response has a 2xx status code
func (o *GetTransactionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transactions bad request response has a 3xx status code
func (o *GetTransactionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transactions bad request response has a 4xx status code
func (o *GetTransactionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transactions bad request response has a 5xx status code
func (o *GetTransactionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get transactions bad request response a status code equal to that given
func (o *GetTransactionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetTransactionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransactionsBadRequest) String() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransactionsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetTransactionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsForbidden creates a GetTransactionsForbidden with default headers values
func NewGetTransactionsForbidden() *GetTransactionsForbidden {
	return &GetTransactionsForbidden{}
}

/*
GetTransactionsForbidden describes a response with status code 403, with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type GetTransactionsForbidden struct {
	Payload *models.ForbiddenAccessError
}

// IsSuccess returns true when this get transactions forbidden response has a 2xx status code
func (o *GetTransactionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transactions forbidden response has a 3xx status code
func (o *GetTransactionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transactions forbidden response has a 4xx status code
func (o *GetTransactionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transactions forbidden response has a 5xx status code
func (o *GetTransactionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get transactions forbidden response a status code equal to that given
func (o *GetTransactionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetTransactionsForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsForbidden  %+v", 403, o.Payload)
}

func (o *GetTransactionsForbidden) String() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsForbidden  %+v", 403, o.Payload)
}

func (o *GetTransactionsForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *GetTransactionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsNotFound creates a GetTransactionsNotFound with default headers values
func NewGetTransactionsNotFound() *GetTransactionsNotFound {
	return &GetTransactionsNotFound{}
}

/*
GetTransactionsNotFound describes a response with status code 404, with default header values.

Returns error indicating that server can't find requested resource.
*/
type GetTransactionsNotFound struct {
	Payload *models.NotFoundError
}

// IsSuccess returns true when this get transactions not found response has a 2xx status code
func (o *GetTransactionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transactions not found response has a 3xx status code
func (o *GetTransactionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transactions not found response has a 4xx status code
func (o *GetTransactionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transactions not found response has a 5xx status code
func (o *GetTransactionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get transactions not found response a status code equal to that given
func (o *GetTransactionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetTransactionsNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionsNotFound) String() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetTransactionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsInternalServerError creates a GetTransactionsInternalServerError with default headers values
func NewGetTransactionsInternalServerError() *GetTransactionsInternalServerError {
	return &GetTransactionsInternalServerError{}
}

/*
GetTransactionsInternalServerError describes a response with status code 500, with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type GetTransactionsInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get transactions internal server error response has a 2xx status code
func (o *GetTransactionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transactions internal server error response has a 3xx status code
func (o *GetTransactionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transactions internal server error response has a 4xx status code
func (o *GetTransactionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get transactions internal server error response has a 5xx status code
func (o *GetTransactionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get transactions internal server error response a status code equal to that given
func (o *GetTransactionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetTransactionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTransactionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /users/{userId}/transactions][%d] getTransactionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTransactionsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetTransactionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
