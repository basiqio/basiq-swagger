// Code generated by go-swagger; DO NOT EDIT.

package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// GetUserIdentityReader is a Reader for the GetUserIdentity structure.
type GetUserIdentityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserIdentityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserIdentityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserIdentityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserIdentityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserIdentityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserIdentityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserIdentityOK creates a GetUserIdentityOK with default headers values
func NewGetUserIdentityOK() *GetUserIdentityOK {
	return &GetUserIdentityOK{}
}

/*
GetUserIdentityOK describes a response with status code 200, with default header values.

Returns identity.
*/
type GetUserIdentityOK struct {
	Payload *models.IdentityData
}

// IsSuccess returns true when this get user identity o k response has a 2xx status code
func (o *GetUserIdentityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user identity o k response has a 3xx status code
func (o *GetUserIdentityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user identity o k response has a 4xx status code
func (o *GetUserIdentityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user identity o k response has a 5xx status code
func (o *GetUserIdentityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user identity o k response a status code equal to that given
func (o *GetUserIdentityOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetUserIdentityOK) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityOK  %+v", 200, o.Payload)
}

func (o *GetUserIdentityOK) String() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityOK  %+v", 200, o.Payload)
}

func (o *GetUserIdentityOK) GetPayload() *models.IdentityData {
	return o.Payload
}

func (o *GetUserIdentityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IdentityData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserIdentityBadRequest creates a GetUserIdentityBadRequest with default headers values
func NewGetUserIdentityBadRequest() *GetUserIdentityBadRequest {
	return &GetUserIdentityBadRequest{}
}

/*
GetUserIdentityBadRequest describes a response with status code 400, with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error.
*/
type GetUserIdentityBadRequest struct {
	Payload *models.BadRequestError
}

// IsSuccess returns true when this get user identity bad request response has a 2xx status code
func (o *GetUserIdentityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user identity bad request response has a 3xx status code
func (o *GetUserIdentityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user identity bad request response has a 4xx status code
func (o *GetUserIdentityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user identity bad request response has a 5xx status code
func (o *GetUserIdentityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get user identity bad request response a status code equal to that given
func (o *GetUserIdentityBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetUserIdentityBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserIdentityBadRequest) String() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserIdentityBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetUserIdentityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserIdentityForbidden creates a GetUserIdentityForbidden with default headers values
func NewGetUserIdentityForbidden() *GetUserIdentityForbidden {
	return &GetUserIdentityForbidden{}
}

/*
GetUserIdentityForbidden describes a response with status code 403, with default header values.

Error that access is forbidden and tied to the application logic, such as insufficient rights to a resource.
*/
type GetUserIdentityForbidden struct {
	Payload *models.ForbiddenAccessError
}

// IsSuccess returns true when this get user identity forbidden response has a 2xx status code
func (o *GetUserIdentityForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user identity forbidden response has a 3xx status code
func (o *GetUserIdentityForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user identity forbidden response has a 4xx status code
func (o *GetUserIdentityForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user identity forbidden response has a 5xx status code
func (o *GetUserIdentityForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user identity forbidden response a status code equal to that given
func (o *GetUserIdentityForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetUserIdentityForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityForbidden  %+v", 403, o.Payload)
}

func (o *GetUserIdentityForbidden) String() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityForbidden  %+v", 403, o.Payload)
}

func (o *GetUserIdentityForbidden) GetPayload() *models.ForbiddenAccessError {
	return o.Payload
}

func (o *GetUserIdentityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenAccessError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserIdentityNotFound creates a GetUserIdentityNotFound with default headers values
func NewGetUserIdentityNotFound() *GetUserIdentityNotFound {
	return &GetUserIdentityNotFound{}
}

/*
GetUserIdentityNotFound describes a response with status code 404, with default header values.

Returns error indicating that server can't find requested resource.
*/
type GetUserIdentityNotFound struct {
	Payload *models.NotFoundError
}

// IsSuccess returns true when this get user identity not found response has a 2xx status code
func (o *GetUserIdentityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user identity not found response has a 3xx status code
func (o *GetUserIdentityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user identity not found response has a 4xx status code
func (o *GetUserIdentityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user identity not found response has a 5xx status code
func (o *GetUserIdentityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user identity not found response a status code equal to that given
func (o *GetUserIdentityNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetUserIdentityNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityNotFound  %+v", 404, o.Payload)
}

func (o *GetUserIdentityNotFound) String() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityNotFound  %+v", 404, o.Payload)
}

func (o *GetUserIdentityNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetUserIdentityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserIdentityInternalServerError creates a GetUserIdentityInternalServerError with default headers values
func NewGetUserIdentityInternalServerError() *GetUserIdentityInternalServerError {
	return &GetUserIdentityInternalServerError{}
}

/*
GetUserIdentityInternalServerError describes a response with status code 500, with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type GetUserIdentityInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get user identity internal server error response has a 2xx status code
func (o *GetUserIdentityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user identity internal server error response has a 3xx status code
func (o *GetUserIdentityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user identity internal server error response has a 4xx status code
func (o *GetUserIdentityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user identity internal server error response has a 5xx status code
func (o *GetUserIdentityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get user identity internal server error response a status code equal to that given
func (o *GetUserIdentityInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetUserIdentityInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserIdentityInternalServerError) String() string {
	return fmt.Sprintf("[GET /users/{userId}/identitites/{identityId}][%d] getUserIdentityInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserIdentityInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetUserIdentityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
