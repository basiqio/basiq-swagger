// Code generated by go-swagger; DO NOT EDIT.

package connectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/basiqio/basiq-swagger/dist/models"
)

// GetPublicConnectorReader is a Reader for the GetPublicConnector structure.
type GetPublicConnectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPublicConnectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPublicConnectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPublicConnectorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPublicConnectorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPublicConnectorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPublicConnectorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPublicConnectorOK creates a GetPublicConnectorOK with default headers values
func NewGetPublicConnectorOK() *GetPublicConnectorOK {
	return &GetPublicConnectorOK{}
}

/*
GetPublicConnectorOK describes a response with status code 200, with default header values.

Returns data of single connector.
*/
type GetPublicConnectorOK struct {
	Payload *models.Connector
}

// IsSuccess returns true when this get public connector o k response has a 2xx status code
func (o *GetPublicConnectorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get public connector o k response has a 3xx status code
func (o *GetPublicConnectorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get public connector o k response has a 4xx status code
func (o *GetPublicConnectorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get public connector o k response has a 5xx status code
func (o *GetPublicConnectorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get public connector o k response a status code equal to that given
func (o *GetPublicConnectorOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetPublicConnectorOK) Error() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorOK  %+v", 200, o.Payload)
}

func (o *GetPublicConnectorOK) String() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorOK  %+v", 200, o.Payload)
}

func (o *GetPublicConnectorOK) GetPayload() *models.Connector {
	return o.Payload
}

func (o *GetPublicConnectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Connector)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicConnectorBadRequest creates a GetPublicConnectorBadRequest with default headers values
func NewGetPublicConnectorBadRequest() *GetPublicConnectorBadRequest {
	return &GetPublicConnectorBadRequest{}
}

/*
GetPublicConnectorBadRequest describes a response with status code 400, with default header values.

Returns error that server cannot or will not process the request due to something that is perceived to be a client error.
*/
type GetPublicConnectorBadRequest struct {
	Payload *models.BadRequestError
}

// IsSuccess returns true when this get public connector bad request response has a 2xx status code
func (o *GetPublicConnectorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get public connector bad request response has a 3xx status code
func (o *GetPublicConnectorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get public connector bad request response has a 4xx status code
func (o *GetPublicConnectorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get public connector bad request response has a 5xx status code
func (o *GetPublicConnectorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get public connector bad request response a status code equal to that given
func (o *GetPublicConnectorBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetPublicConnectorBadRequest) Error() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorBadRequest  %+v", 400, o.Payload)
}

func (o *GetPublicConnectorBadRequest) String() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorBadRequest  %+v", 400, o.Payload)
}

func (o *GetPublicConnectorBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetPublicConnectorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicConnectorUnauthorized creates a GetPublicConnectorUnauthorized with default headers values
func NewGetPublicConnectorUnauthorized() *GetPublicConnectorUnauthorized {
	return &GetPublicConnectorUnauthorized{}
}

/*
GetPublicConnectorUnauthorized describes a response with status code 401, with default header values.

Returns error that indicates unauthorized access.
*/
type GetPublicConnectorUnauthorized struct {
	Payload *models.UnauthorizedError
}

// IsSuccess returns true when this get public connector unauthorized response has a 2xx status code
func (o *GetPublicConnectorUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get public connector unauthorized response has a 3xx status code
func (o *GetPublicConnectorUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get public connector unauthorized response has a 4xx status code
func (o *GetPublicConnectorUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get public connector unauthorized response has a 5xx status code
func (o *GetPublicConnectorUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get public connector unauthorized response a status code equal to that given
func (o *GetPublicConnectorUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetPublicConnectorUnauthorized) Error() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPublicConnectorUnauthorized) String() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPublicConnectorUnauthorized) GetPayload() *models.UnauthorizedError {
	return o.Payload
}

func (o *GetPublicConnectorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnauthorizedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicConnectorNotFound creates a GetPublicConnectorNotFound with default headers values
func NewGetPublicConnectorNotFound() *GetPublicConnectorNotFound {
	return &GetPublicConnectorNotFound{}
}

/*
GetPublicConnectorNotFound describes a response with status code 404, with default header values.

Returns error indicating that server cannot find requested resource.
*/
type GetPublicConnectorNotFound struct {
	Payload *models.NotFoundError
}

// IsSuccess returns true when this get public connector not found response has a 2xx status code
func (o *GetPublicConnectorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get public connector not found response has a 3xx status code
func (o *GetPublicConnectorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get public connector not found response has a 4xx status code
func (o *GetPublicConnectorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get public connector not found response has a 5xx status code
func (o *GetPublicConnectorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get public connector not found response a status code equal to that given
func (o *GetPublicConnectorNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetPublicConnectorNotFound) Error() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorNotFound  %+v", 404, o.Payload)
}

func (o *GetPublicConnectorNotFound) String() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorNotFound  %+v", 404, o.Payload)
}

func (o *GetPublicConnectorNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetPublicConnectorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicConnectorInternalServerError creates a GetPublicConnectorInternalServerError with default headers values
func NewGetPublicConnectorInternalServerError() *GetPublicConnectorInternalServerError {
	return &GetPublicConnectorInternalServerError{}
}

/*
GetPublicConnectorInternalServerError describes a response with status code 500, with default header values.

Returns error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
*/
type GetPublicConnectorInternalServerError struct {
	Payload *models.InternalServerError
}

// IsSuccess returns true when this get public connector internal server error response has a 2xx status code
func (o *GetPublicConnectorInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get public connector internal server error response has a 3xx status code
func (o *GetPublicConnectorInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get public connector internal server error response has a 4xx status code
func (o *GetPublicConnectorInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get public connector internal server error response has a 5xx status code
func (o *GetPublicConnectorInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get public connector internal server error response a status code equal to that given
func (o *GetPublicConnectorInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetPublicConnectorInternalServerError) Error() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPublicConnectorInternalServerError) String() string {
	return fmt.Sprintf("[GET /public/connectors/{connectorId}/{method}][%d] getPublicConnectorInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPublicConnectorInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *GetPublicConnectorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
