// Code generated by go-swagger; DO NOT EDIT.

package connectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new connectors API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for connectors API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetConnector(params *GetConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectorOK, error)

	GetConnectors(params *GetConnectorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectorsOK, error)

	GetPublicConnector(params *GetPublicConnectorParams, opts ...ClientOption) (*GetPublicConnectorOK, error)

	GetPublicConnectors(params *GetPublicConnectorsParams, opts ...ClientOption) (*GetPublicConnectorsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetConnector retrieves data for single connector

NOTE: This end point requires authentication.
*/
func (a *Client) GetConnector(params *GetConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConnector",
		Method:             "GET",
		PathPattern:        "/connectors/{connectorId}/{method}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConnectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConnector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConnectors retrieves connectors list

NOTE: This end point requires authentication.
*/
func (a *Client) GetConnectors(params *GetConnectorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConnectorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConnectors",
		Method:             "GET",
		PathPattern:        "/connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConnectorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConnectorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConnectors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPublicConnector retrieves data for single public connector

NOTE: This end point requires authentication.
*/
func (a *Client) GetPublicConnector(params *GetPublicConnectorParams, opts ...ClientOption) (*GetPublicConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPublicConnector",
		Method:             "GET",
		PathPattern:        "/public/connectors/{connectorId}/{method}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPublicConnectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPublicConnector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPublicConnectors retrieves publically availiable no authentication required connectors list
*/
func (a *Client) GetPublicConnectors(params *GetPublicConnectorsParams, opts ...ClientOption) (*GetPublicConnectorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicConnectorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPublicConnectors",
		Method:             "GET",
		PathPattern:        "/public/connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPublicConnectorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicConnectorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPublicConnectors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
