// Code generated by go-swagger; DO NOT EDIT.

package statements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateStatementParams creates a new CreateStatementParams object
// with the default values initialized.
func NewCreateStatementParams() *CreateStatementParams {
	var ()
	return &CreateStatementParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateStatementParamsWithTimeout creates a new CreateStatementParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateStatementParamsWithTimeout(timeout time.Duration) *CreateStatementParams {
	var ()
	return &CreateStatementParams{

		timeout: timeout,
	}
}

// NewCreateStatementParamsWithContext creates a new CreateStatementParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateStatementParamsWithContext(ctx context.Context) *CreateStatementParams {
	var ()
	return &CreateStatementParams{

		Context: ctx,
	}
}

// NewCreateStatementParamsWithHTTPClient creates a new CreateStatementParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateStatementParamsWithHTTPClient(client *http.Client) *CreateStatementParams {
	var ()
	return &CreateStatementParams{
		HTTPClient: client,
	}
}

/*CreateStatementParams contains all the parameters to send to the API endpoint
for the create statement operation typically these are written to a http.Request
*/
type CreateStatementParams struct {

	/*InstitutionID
	  The identifier of the institution to which the statement relates e.g. "AU01001". Note that sandbox institutions (i.e. AU00000 do not support the file upload option

	*/
	InstitutionID string
	/*Statements
	  Official PDF bank statement for the specified institution to be uploaded. Csv files conforming to our file specification are also accepted

	*/
	Statement runtime.NamedReadCloser
	/*UserID*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create statement params
func (o *CreateStatementParams) WithTimeout(timeout time.Duration) *CreateStatementParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create statement params
func (o *CreateStatementParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create statement params
func (o *CreateStatementParams) WithContext(ctx context.Context) *CreateStatementParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create statement params
func (o *CreateStatementParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create statement params
func (o *CreateStatementParams) WithHTTPClient(client *http.Client) *CreateStatementParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create statement params
func (o *CreateStatementParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInstitutionID adds the institutionID to the create statement params
func (o *CreateStatementParams) WithInstitutionID(institutionID string) *CreateStatementParams {
	o.SetInstitutionID(institutionID)
	return o
}

// SetInstitutionID adds the institutionId to the create statement params
func (o *CreateStatementParams) SetInstitutionID(institutionID string) {
	o.InstitutionID = institutionID
}

// WithStatement adds the statements to the create statement params
func (o *CreateStatementParams) WithStatement(statements runtime.NamedReadCloser) *CreateStatementParams {
	o.SetStatement(statements)
	return o
}

// SetStatement adds the statements to the create statement params
func (o *CreateStatementParams) SetStatement(statements runtime.NamedReadCloser) {
	o.Statement = statements
}

// WithUserID adds the userID to the create statement params
func (o *CreateStatementParams) WithUserID(userID string) *CreateStatementParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the create statement params
func (o *CreateStatementParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateStatementParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param institutionId
	frInstitutionID := o.InstitutionID
	fInstitutionID := frInstitutionID
	if fInstitutionID != "" {
		if err := r.SetFormParam("institutionId", fInstitutionID); err != nil {
			return err
		}
	}

	// form file param statements
	if err := r.SetFileParam("statements", o.Statement); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
