// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChangeHistoryExternal change history external
//
// swagger:model ChangeHistoryExternal
type ChangeHistoryExternal struct {

	// Amount of payment
	// Example: -146.50
	// Required: true
	Amount *string `json:"amount"`

	// Date
	// Example: 2019-03-31
	// Required: true
	// Format: date
	Date *strfmt.Date `json:"date"`

	// Full transaction description
	// Example: AFTERPAY MELBOURNE VI AUS Card xx3854 Value Date: 10/11/2019
	// Required: true
	Source *string `json:"source"`
}

// Validate validates this change history external
func (m *ChangeHistoryExternal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangeHistoryExternal) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *ChangeHistoryExternal) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ChangeHistoryExternal) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this change history external based on context it is used
func (m *ChangeHistoryExternal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChangeHistoryExternal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangeHistoryExternal) UnmarshalBinary(b []byte) error {
	var res ChangeHistoryExternal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
