// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobsResult JobsResult
//
// Result object containing a list of URLs or null. Otherwise if a step failed contains an error response.
//
// swagger:model JobsResult
type JobsResult struct {

	// In case of failed job, displays error code.
	// Enum: [user-action-required system-unavailable maintenance connector-error institution-not-found institution-not-available institution-disabled missing-required-field missing-required-field-value invalid-field-value invalid-csv-row row-count-exceeded account-data-differs empty-file bank-statement-invalid bank-statement-new-product bank-statement-parsing-error bank-statement-not-supported txn-after-last-updated-date invalid-connection unknown-error job-timed-out]
	Code string `json:"code,omitempty"`

	// For mfa - A description to be presented to the user that includes instructions
	// Example: An SMS code has been sent to your device, please enter valid number
	Description string `json:"description,omitempty"`

	// In case of failed job, displays details of the error.
	Details string `json:"details,omitempty"`

	// For mfa - Maximum time to enter MFA before expiry
	// Example: 3600
	ExpiryMs int64 `json:"expiryMs,omitempty"`

	// For mfa - An array of inputs (mfa challenges) that the end-user must complete.
	// Example: ["OTP Password"]
	Input []string `json:"input,omitempty"`

	// links
	Links *JobsStepResultLinks `json:"links,omitempty"`

	// For mfa - This will list out the type of mfa challenge presented to the userThe values can include:
	// token - The user is asked to enter the token associated with the account. This token may be generated by an app like Google Authenticator or delivered to the user via email, SMS or phone.
	// security-questions - Security questions are a type of knowledge-based authentication (KBA) where the user is presented with a series of personal questions that they are meant to answer.
	Method string `json:"method,omitempty"`

	// In case of failed job, displays error title.
	Title string `json:"title,omitempty"`

	// In case of success, Could be "link" or "mfa".
	// Example: link
	Type string `json:"type,omitempty"`

	// In case of success, URL of the updated (or created) resources.
	URL string `json:"url,omitempty"`
}

// Validate validates this jobs result
func (m *JobsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var jobsResultTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user-action-required","system-unavailable","maintenance","connector-error","institution-not-found","institution-not-available","institution-disabled","missing-required-field","missing-required-field-value","invalid-field-value","invalid-csv-row","row-count-exceeded","account-data-differs","empty-file","bank-statement-invalid","bank-statement-new-product","bank-statement-parsing-error","bank-statement-not-supported","txn-after-last-updated-date","invalid-connection","unknown-error","job-timed-out"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobsResultTypeCodePropEnum = append(jobsResultTypeCodePropEnum, v)
	}
}

const (

	// JobsResultCodeUserDashActionDashRequired captures enum value "user-action-required"
	JobsResultCodeUserDashActionDashRequired string = "user-action-required"

	// JobsResultCodeSystemDashUnavailable captures enum value "system-unavailable"
	JobsResultCodeSystemDashUnavailable string = "system-unavailable"

	// JobsResultCodeMaintenance captures enum value "maintenance"
	JobsResultCodeMaintenance string = "maintenance"

	// JobsResultCodeConnectorDashError captures enum value "connector-error"
	JobsResultCodeConnectorDashError string = "connector-error"

	// JobsResultCodeInstitutionDashNotDashFound captures enum value "institution-not-found"
	JobsResultCodeInstitutionDashNotDashFound string = "institution-not-found"

	// JobsResultCodeInstitutionDashNotDashAvailable captures enum value "institution-not-available"
	JobsResultCodeInstitutionDashNotDashAvailable string = "institution-not-available"

	// JobsResultCodeInstitutionDashDisabled captures enum value "institution-disabled"
	JobsResultCodeInstitutionDashDisabled string = "institution-disabled"

	// JobsResultCodeMissingDashRequiredDashField captures enum value "missing-required-field"
	JobsResultCodeMissingDashRequiredDashField string = "missing-required-field"

	// JobsResultCodeMissingDashRequiredDashFieldDashValue captures enum value "missing-required-field-value"
	JobsResultCodeMissingDashRequiredDashFieldDashValue string = "missing-required-field-value"

	// JobsResultCodeInvalidDashFieldDashValue captures enum value "invalid-field-value"
	JobsResultCodeInvalidDashFieldDashValue string = "invalid-field-value"

	// JobsResultCodeInvalidDashCsvDashRow captures enum value "invalid-csv-row"
	JobsResultCodeInvalidDashCsvDashRow string = "invalid-csv-row"

	// JobsResultCodeRowDashCountDashExceeded captures enum value "row-count-exceeded"
	JobsResultCodeRowDashCountDashExceeded string = "row-count-exceeded"

	// JobsResultCodeAccountDashDataDashDiffers captures enum value "account-data-differs"
	JobsResultCodeAccountDashDataDashDiffers string = "account-data-differs"

	// JobsResultCodeEmptyDashFile captures enum value "empty-file"
	JobsResultCodeEmptyDashFile string = "empty-file"

	// JobsResultCodeBankDashStatementDashInvalid captures enum value "bank-statement-invalid"
	JobsResultCodeBankDashStatementDashInvalid string = "bank-statement-invalid"

	// JobsResultCodeBankDashStatementDashNewDashProduct captures enum value "bank-statement-new-product"
	JobsResultCodeBankDashStatementDashNewDashProduct string = "bank-statement-new-product"

	// JobsResultCodeBankDashStatementDashParsingDashError captures enum value "bank-statement-parsing-error"
	JobsResultCodeBankDashStatementDashParsingDashError string = "bank-statement-parsing-error"

	// JobsResultCodeBankDashStatementDashNotDashSupported captures enum value "bank-statement-not-supported"
	JobsResultCodeBankDashStatementDashNotDashSupported string = "bank-statement-not-supported"

	// JobsResultCodeTxnDashAfterDashLastDashUpdatedDashDate captures enum value "txn-after-last-updated-date"
	JobsResultCodeTxnDashAfterDashLastDashUpdatedDashDate string = "txn-after-last-updated-date"

	// JobsResultCodeInvalidDashConnection captures enum value "invalid-connection"
	JobsResultCodeInvalidDashConnection string = "invalid-connection"

	// JobsResultCodeUnknownDashError captures enum value "unknown-error"
	JobsResultCodeUnknownDashError string = "unknown-error"

	// JobsResultCodeJobDashTimedDashOut captures enum value "job-timed-out"
	JobsResultCodeJobDashTimedDashOut string = "job-timed-out"
)

// prop value enum
func (m *JobsResult) validateCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobsResultTypeCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobsResult) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *JobsResult) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this jobs result based on the context it is used
func (m *JobsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobsResult) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobsResult) UnmarshalBinary(b []byte) error {
	var res JobsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
