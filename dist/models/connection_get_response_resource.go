// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectionGetResponseResource ConnectionGetResponseResource
//
// Object containing details for connection post.
//
// swagger:model ConnectionGetResponseResource
type ConnectionGetResponseResource struct {

	// A string that uniquely identifies the user connection.
	// Required: true
	ID *string `json:"id"`

	// UTC Date and Time of when the connection was last used, in RFC 3339 format, available only for SERVER_SCOPE.
	// Format: date-time
	LastUsed strfmt.DateTime `json:"lastUsed,omitempty"`

	// Indicates the connection status, available only for SERVER_SCOPE.
	// Possible values include:
	// <ul>
	// <li>pending - the connection is in this status briefly until credentials are verified</li>
	// <li>active - the connection is valid (is working!) and the credentials have been verified (the jobs steps will continue) </li>
	// <li>invalid -  the connection is no longer valid and requires the user to update their logon details. Invalid connections cannot refreshed until the password is updated. </li>
	// </ul>
	// Enum: [active pending invalid]
	Status string `json:"status,omitempty"`

	// Type, always "connection".
	// Required: true
	Type *string `json:"type"`

	// accounts
	Accounts *AccountsContainer `json:"accounts,omitempty"`

	// institution
	// Required: true
	Institution *ConnectionInstitution `json:"institution"`

	// links
	// Required: true
	Links *GetConnectionLinks `json:"links"`

	// profile
	Profile *ConnectionProfile `json:"profile,omitempty"`
}

// Validate validates this connection get response resource
func (m *ConnectionGetResponseResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstitution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionGetResponseResource) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionGetResponseResource) validateLastUsed(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUsed) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUsed", "body", "date-time", m.LastUsed.String(), formats); err != nil {
		return err
	}

	return nil
}

var connectionGetResponseResourceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","pending","invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectionGetResponseResourceTypeStatusPropEnum = append(connectionGetResponseResourceTypeStatusPropEnum, v)
	}
}

const (

	// ConnectionGetResponseResourceStatusActive captures enum value "active"
	ConnectionGetResponseResourceStatusActive string = "active"

	// ConnectionGetResponseResourceStatusPending captures enum value "pending"
	ConnectionGetResponseResourceStatusPending string = "pending"

	// ConnectionGetResponseResourceStatusInvalid captures enum value "invalid"
	ConnectionGetResponseResourceStatusInvalid string = "invalid"
)

// prop value enum
func (m *ConnectionGetResponseResource) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, connectionGetResponseResourceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConnectionGetResponseResource) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionGetResponseResource) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionGetResponseResource) validateAccounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	if m.Accounts != nil {
		if err := m.Accounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accounts")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionGetResponseResource) validateInstitution(formats strfmt.Registry) error {

	if err := validate.Required("institution", "body", m.Institution); err != nil {
		return err
	}

	if m.Institution != nil {
		if err := m.Institution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("institution")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionGetResponseResource) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionGetResponseResource) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionGetResponseResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionGetResponseResource) UnmarshalBinary(b []byte) error {
	var res ConnectionGetResponseResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
