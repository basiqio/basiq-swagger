// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegularSource Our complex income algorithm uses over 50 rules to identify different types of income sources. For example, to identify a regular income source - the fortnightly salary should have a minimum of 5 credits across a 90 day time period with regular intervals. Additionally, tolerances are applied based on confidence in identified income source patterns (by amount and frequency).
//
// swagger:model RegularSource
type RegularSource struct {

	// Duration regular income (number days from first to last occurrence) returned as an integer with values zero or greater
	// Required: true
	AgeDays *int64 `json:"ageDays"`

	// Each amount classified as income (repeated for each income credit and ordered by most recent)
	// Required: true
	ChangeHistory []*ChangeHistoryIncome `json:"changeHistory"`

	// Enum detailing frequency regular income
	// Required: true
	// Enum: [daily weekly bi-weekly monthly bi-monthly quarterly half-year yearly]
	Frequency *string `json:"frequency"`

	// Source regular income (cleaned transaction description).
	// Required: true
	Source *string `json:"source"`

	// current
	// Required: true
	Current *CurrentRegularSource `json:"current"`

	// irregularity
	// Required: true
	Irregularity *IrregularityIncome `json:"irregularity"`

	// previous3 months
	// Required: true
	Previous3Months *Previous3MonthsIncome `json:"previous3Months"`
}

// Validate validates this regular source
func (m *RegularSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgeDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIrregularity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevious3Months(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegularSource) validateAgeDays(formats strfmt.Registry) error {

	if err := validate.Required("ageDays", "body", m.AgeDays); err != nil {
		return err
	}

	return nil
}

func (m *RegularSource) validateChangeHistory(formats strfmt.Registry) error {

	if err := validate.Required("changeHistory", "body", m.ChangeHistory); err != nil {
		return err
	}

	for i := 0; i < len(m.ChangeHistory); i++ {
		if swag.IsZero(m.ChangeHistory[i]) { // not required
			continue
		}

		if m.ChangeHistory[i] != nil {
			if err := m.ChangeHistory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changeHistory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var regularSourceTypeFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["daily","weekly","bi-weekly","monthly","bi-monthly","quarterly","half-year","yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		regularSourceTypeFrequencyPropEnum = append(regularSourceTypeFrequencyPropEnum, v)
	}
}

const (

	// RegularSourceFrequencyDaily captures enum value "daily"
	RegularSourceFrequencyDaily string = "daily"

	// RegularSourceFrequencyWeekly captures enum value "weekly"
	RegularSourceFrequencyWeekly string = "weekly"

	// RegularSourceFrequencyBiWeekly captures enum value "bi-weekly"
	RegularSourceFrequencyBiWeekly string = "bi-weekly"

	// RegularSourceFrequencyMonthly captures enum value "monthly"
	RegularSourceFrequencyMonthly string = "monthly"

	// RegularSourceFrequencyBiMonthly captures enum value "bi-monthly"
	RegularSourceFrequencyBiMonthly string = "bi-monthly"

	// RegularSourceFrequencyQuarterly captures enum value "quarterly"
	RegularSourceFrequencyQuarterly string = "quarterly"

	// RegularSourceFrequencyHalfYear captures enum value "half-year"
	RegularSourceFrequencyHalfYear string = "half-year"

	// RegularSourceFrequencyYearly captures enum value "yearly"
	RegularSourceFrequencyYearly string = "yearly"
)

// prop value enum
func (m *RegularSource) validateFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, regularSourceTypeFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegularSource) validateFrequency(formats strfmt.Registry) error {

	if err := validate.Required("frequency", "body", m.Frequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateFrequencyEnum("frequency", "body", *m.Frequency); err != nil {
		return err
	}

	return nil
}

func (m *RegularSource) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *RegularSource) validateCurrent(formats strfmt.Registry) error {

	if err := validate.Required("current", "body", m.Current); err != nil {
		return err
	}

	if m.Current != nil {
		if err := m.Current.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current")
			}
			return err
		}
	}

	return nil
}

func (m *RegularSource) validateIrregularity(formats strfmt.Registry) error {

	if err := validate.Required("irregularity", "body", m.Irregularity); err != nil {
		return err
	}

	if m.Irregularity != nil {
		if err := m.Irregularity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("irregularity")
			}
			return err
		}
	}

	return nil
}

func (m *RegularSource) validatePrevious3Months(formats strfmt.Registry) error {

	if err := validate.Required("previous3Months", "body", m.Previous3Months); err != nil {
		return err
	}

	if m.Previous3Months != nil {
		if err := m.Previous3Months.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previous3Months")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegularSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegularSource) UnmarshalBinary(b []byte) error {
	var res RegularSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
