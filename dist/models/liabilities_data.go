// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LiabilitiesData liabilities data
//
// swagger:model LiabilitiesData
type LiabilitiesData struct {

	// Credit Liabilities
	// Required: true
	Credit []*CreditLiabilities `json:"credit"`

	// Loan Liabilities
	// Required: true
	Loan []*LoanLiabilities `json:"loan"`
}

// Validate validates this liabilities data
func (m *LiabilitiesData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LiabilitiesData) validateCredit(formats strfmt.Registry) error {

	if err := validate.Required("credit", "body", m.Credit); err != nil {
		return err
	}

	for i := 0; i < len(m.Credit); i++ {
		if swag.IsZero(m.Credit[i]) { // not required
			continue
		}

		if m.Credit[i] != nil {
			if err := m.Credit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LiabilitiesData) validateLoan(formats strfmt.Registry) error {

	if err := validate.Required("loan", "body", m.Loan); err != nil {
		return err
	}

	for i := 0; i < len(m.Loan); i++ {
		if swag.IsZero(m.Loan[i]) { // not required
			continue
		}

		if m.Loan[i] != nil {
			if err := m.Loan[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loan" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LiabilitiesData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LiabilitiesData) UnmarshalBinary(b []byte) error {
	var res LiabilitiesData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
