// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhysicalAddresses PhysicalAddresses
//
// User physical addresses holding the connection.
//
// swagger:model PhysicalAddresses
type PhysicalAddresses struct {

	// User address.
	// Required: true
	AddressLine1 *string `json:"addressLine1"`

	// Always "null"
	// Required: true
	AddressLine2 *string `json:"addressLine2"`

	// Always "null"
	// Required: true
	AddressLine3 *string `json:"addressLine3"`

	// City
	// Required: true
	City *string `json:"city"`

	// country
	Country string `json:"country,omitempty"`

	// Country code
	// Required: true
	CountryCode *string `json:"countryCode"`

	// Address formatted.
	// Required: true
	FormattedAddress *string `json:"formattedAddress"`

	// Post code
	// Required: true
	Postcode *string `json:"postcode"`

	// State
	// Required: true
	State *string `json:"state"`
}

// Validate validates this physical addresses
func (m *PhysicalAddresses) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormattedAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicalAddresses) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.Required("addressLine1", "body", m.AddressLine1); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalAddresses) validateAddressLine2(formats strfmt.Registry) error {

	if err := validate.Required("addressLine2", "body", m.AddressLine2); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalAddresses) validateAddressLine3(formats strfmt.Registry) error {

	if err := validate.Required("addressLine3", "body", m.AddressLine3); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalAddresses) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalAddresses) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalAddresses) validateFormattedAddress(formats strfmt.Registry) error {

	if err := validate.Required("formattedAddress", "body", m.FormattedAddress); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalAddresses) validatePostcode(formats strfmt.Registry) error {

	if err := validate.Required("postcode", "body", m.Postcode); err != nil {
		return err
	}

	return nil
}

func (m *PhysicalAddresses) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicalAddresses) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicalAddresses) UnmarshalBinary(b []byte) error {
	var res PhysicalAddresses
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
