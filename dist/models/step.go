// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Step JobsStep
//
// List of steps that need to be completed.
//
// swagger:model Step
type Step struct {

	// Step status.
	// <ul>
	// <li> pending -  The job has been created and is waiting to be started.</li>
	// <li> in-progress - The job has started and is currently processing.</li>
	// <li> success - The job has successfully completed. </li>
	// <li> failed - The job has failed.</li>
	// </ul>
	// Required: true
	// Enum: [pending in-progress success failed]
	Status *string `json:"status"`

	// Name of the step the job needs to complete.
	// Enum: [verify-credentials retrieve-accounts retrieve-transactions retrieve-statements]
	Title string `json:"title,omitempty"`

	// result
	// Required: true
	Result *JobsResult `json:"result"`
}

// Validate validates this step
func (m *Step) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stepTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","in-progress","success","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stepTypeStatusPropEnum = append(stepTypeStatusPropEnum, v)
	}
}

const (

	// StepStatusPending captures enum value "pending"
	StepStatusPending string = "pending"

	// StepStatusInProgress captures enum value "in-progress"
	StepStatusInProgress string = "in-progress"

	// StepStatusSuccess captures enum value "success"
	StepStatusSuccess string = "success"

	// StepStatusFailed captures enum value "failed"
	StepStatusFailed string = "failed"
)

// prop value enum
func (m *Step) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stepTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Step) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var stepTypeTitlePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["verify-credentials","retrieve-accounts","retrieve-transactions","retrieve-statements"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stepTypeTitlePropEnum = append(stepTypeTitlePropEnum, v)
	}
}

const (

	// StepTitleVerifyCredentials captures enum value "verify-credentials"
	StepTitleVerifyCredentials string = "verify-credentials"

	// StepTitleRetrieveAccounts captures enum value "retrieve-accounts"
	StepTitleRetrieveAccounts string = "retrieve-accounts"

	// StepTitleRetrieveTransactions captures enum value "retrieve-transactions"
	StepTitleRetrieveTransactions string = "retrieve-transactions"

	// StepTitleRetrieveStatements captures enum value "retrieve-statements"
	StepTitleRetrieveStatements string = "retrieve-statements"
)

// prop value enum
func (m *Step) validateTitleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stepTypeTitlePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Step) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	// value enum
	if err := m.validateTitleEnum("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *Step) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Step) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Step) UnmarshalBinary(b []byte) error {
	var res Step
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
