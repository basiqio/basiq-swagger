// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrentRegularSource current regular source
//
// swagger:model CurrentRegularSource
type CurrentRegularSource struct {

	// Most recent regular income payment amount
	// Required: true
	Amount *string `json:"amount"`

	// Most recent regular income payment date
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// Predicted next occurrence for regular income (note: where the pattern has recently ceased there would be no predicted next occurrence)
	// Required: true
	NextDate *string `json:"nextDate"`
}

// Validate validates this current regular source
func (m *CurrentRegularSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrentRegularSource) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *CurrentRegularSource) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CurrentRegularSource) validateNextDate(formats strfmt.Registry) error {

	if err := validate.Required("nextDate", "body", m.NextDate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CurrentRegularSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentRegularSource) UnmarshalBinary(b []byte) error {
	var res CurrentRegularSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
