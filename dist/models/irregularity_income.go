// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IrregularityIncome irregularity income
//
// swagger:model IrregularityIncome
type IrregularityIncome struct {

	// Array of dates for which the expected credit is not met
	// Example: ["2020-03"]
	// Required: true
	Gaps []Gap `json:"gaps"`

	// Stability percentage indicator of how stable the income is. 100 = no gaps in the income series from the source. Calculated as (number of transactions that are included in the income report for this source) / (number of transactions that were expected to be included in the income report for this source).
	// Example: 100.00
	// Required: true
	Stability *string `json:"stability"`
}

// Validate validates this irregularity income
func (m *IrregularityIncome) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGaps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IrregularityIncome) validateGaps(formats strfmt.Registry) error {

	if err := validate.Required("gaps", "body", m.Gaps); err != nil {
		return err
	}

	for i := 0; i < len(m.Gaps); i++ {

		if err := m.Gaps[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gaps" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gaps" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *IrregularityIncome) validateStability(formats strfmt.Registry) error {

	if err := validate.Required("stability", "body", m.Stability); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this irregularity income based on the context it is used
func (m *IrregularityIncome) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGaps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IrregularityIncome) contextValidateGaps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Gaps); i++ {

		if err := m.Gaps[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gaps" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gaps" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IrregularityIncome) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IrregularityIncome) UnmarshalBinary(b []byte) error {
	var res IrregularityIncome
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
