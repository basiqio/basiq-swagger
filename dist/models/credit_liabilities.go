// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreditLiabilities credit liabilities
//
// swagger:model CreditLiabilities
type CreditLiabilities struct {

	// account
	// Required: true
	Account *AccountHolder `json:"account"`

	// The available funds at the time of the query.
	// Example: 8286.80
	// Required: true
	AvailableFunds *string `json:"availableFunds"`

	// The balance at the time of the query.
	// Example: -11713.20
	// Required: true
	Balance *string `json:"balance"`

	// Total credit limit available for the specified credit facility.
	// Example: 20000.00
	// Required: true
	CreditLimit *string `json:"creditLimit"`

	// The currency in which the account is recorded.
	// Example: AUD
	// Required: true
	Currency *string `json:"currency"`

	// The name of the financial institution with whom the account is held.
	// Example: Hooli
	// Required: true
	Institution *string `json:"institution"`

	// previous6 months
	// Required: true
	Previous6Months *Previous6MonthsCreditLiabilities `json:"previous6Months"`

	// previous month
	// Required: true
	PreviousMonth *PreviousMonthDataLiabilities `json:"previousMonth"`
}

// Validate validates this credit liabilities
func (m *CreditLiabilities) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableFunds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstitution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevious6Months(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousMonth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreditLiabilities) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *CreditLiabilities) validateAvailableFunds(formats strfmt.Registry) error {

	if err := validate.Required("availableFunds", "body", m.AvailableFunds); err != nil {
		return err
	}

	return nil
}

func (m *CreditLiabilities) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *CreditLiabilities) validateCreditLimit(formats strfmt.Registry) error {

	if err := validate.Required("creditLimit", "body", m.CreditLimit); err != nil {
		return err
	}

	return nil
}

func (m *CreditLiabilities) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *CreditLiabilities) validateInstitution(formats strfmt.Registry) error {

	if err := validate.Required("institution", "body", m.Institution); err != nil {
		return err
	}

	return nil
}

func (m *CreditLiabilities) validatePrevious6Months(formats strfmt.Registry) error {

	if err := validate.Required("previous6Months", "body", m.Previous6Months); err != nil {
		return err
	}

	if m.Previous6Months != nil {
		if err := m.Previous6Months.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previous6Months")
			}
			return err
		}
	}

	return nil
}

func (m *CreditLiabilities) validatePreviousMonth(formats strfmt.Registry) error {

	if err := validate.Required("previousMonth", "body", m.PreviousMonth); err != nil {
		return err
	}

	if m.PreviousMonth != nil {
		if err := m.PreviousMonth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousMonth")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this credit liabilities based on the context it is used
func (m *CreditLiabilities) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrevious6Months(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviousMonth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreditLiabilities) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.Account != nil {
		if err := m.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *CreditLiabilities) contextValidatePrevious6Months(ctx context.Context, formats strfmt.Registry) error {

	if m.Previous6Months != nil {
		if err := m.Previous6Months.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previous6Months")
			}
			return err
		}
	}

	return nil
}

func (m *CreditLiabilities) contextValidatePreviousMonth(ctx context.Context, formats strfmt.Registry) error {

	if m.PreviousMonth != nil {
		if err := m.PreviousMonth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousMonth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreditLiabilities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreditLiabilities) UnmarshalBinary(b []byte) error {
	var res CreditLiabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
