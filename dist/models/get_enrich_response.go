// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetEnrichResponse get enrich response
//
// swagger:model GetEnrichResponse
type GetEnrichResponse struct {

	// Transaction Classification
	// Example: payment
	// Required: true
	// Enum: [direct-credit refund interest payment cash-withdrawal bank-fee transfer loan-interest loan-repayment]
	Class *string `json:"class"`

	// data
	// Required: true
	Data *EnrichData `json:"data"`

	// Direction of transaction
	// Example: credit
	// Required: true
	// Enum: [credit debit unknown]
	Direction *string `json:"direction"`

	// links
	// Required: true
	Links *ResourceLink `json:"links"`

	// Always "enrich"
	// Example: enrich
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get enrich response
func (m *GetEnrichResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getEnrichResponseTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["direct-credit","refund","interest","payment","cash-withdrawal","bank-fee","transfer","loan-interest","loan-repayment"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getEnrichResponseTypeClassPropEnum = append(getEnrichResponseTypeClassPropEnum, v)
	}
}

const (

	// GetEnrichResponseClassDirectDashCredit captures enum value "direct-credit"
	GetEnrichResponseClassDirectDashCredit string = "direct-credit"

	// GetEnrichResponseClassRefund captures enum value "refund"
	GetEnrichResponseClassRefund string = "refund"

	// GetEnrichResponseClassInterest captures enum value "interest"
	GetEnrichResponseClassInterest string = "interest"

	// GetEnrichResponseClassPayment captures enum value "payment"
	GetEnrichResponseClassPayment string = "payment"

	// GetEnrichResponseClassCashDashWithdrawal captures enum value "cash-withdrawal"
	GetEnrichResponseClassCashDashWithdrawal string = "cash-withdrawal"

	// GetEnrichResponseClassBankDashFee captures enum value "bank-fee"
	GetEnrichResponseClassBankDashFee string = "bank-fee"

	// GetEnrichResponseClassTransfer captures enum value "transfer"
	GetEnrichResponseClassTransfer string = "transfer"

	// GetEnrichResponseClassLoanDashInterest captures enum value "loan-interest"
	GetEnrichResponseClassLoanDashInterest string = "loan-interest"

	// GetEnrichResponseClassLoanDashRepayment captures enum value "loan-repayment"
	GetEnrichResponseClassLoanDashRepayment string = "loan-repayment"
)

// prop value enum
func (m *GetEnrichResponse) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getEnrichResponseTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetEnrichResponse) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	// value enum
	if err := m.validateClassEnum("class", "body", *m.Class); err != nil {
		return err
	}

	return nil
}

func (m *GetEnrichResponse) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

var getEnrichResponseTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["credit","debit","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getEnrichResponseTypeDirectionPropEnum = append(getEnrichResponseTypeDirectionPropEnum, v)
	}
}

const (

	// GetEnrichResponseDirectionCredit captures enum value "credit"
	GetEnrichResponseDirectionCredit string = "credit"

	// GetEnrichResponseDirectionDebit captures enum value "debit"
	GetEnrichResponseDirectionDebit string = "debit"

	// GetEnrichResponseDirectionUnknown captures enum value "unknown"
	GetEnrichResponseDirectionUnknown string = "unknown"
)

// prop value enum
func (m *GetEnrichResponse) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getEnrichResponseTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetEnrichResponse) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *GetEnrichResponse) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *GetEnrichResponse) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get enrich response based on the context it is used
func (m *GetEnrichResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetEnrichResponse) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *GetEnrichResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetEnrichResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetEnrichResponse) UnmarshalBinary(b []byte) error {
	var res GetEnrichResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
