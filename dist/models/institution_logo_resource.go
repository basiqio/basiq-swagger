// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstitutionLogoResource InstitutionLogoResource linstitution logo resource type
//
// swagger:model InstitutionLogoResource
type InstitutionLogoResource struct {

	// colors
	Colors *Colors `json:"colors,omitempty"`

	// links
	// Required: true
	Links *LogoResourceLinks `json:"links"`

	// Type resource type identifier
	// Example: image
	// Required: true
	// Enum: [image]
	Type *string `json:"type"`
}

// Validate validates this institution logo resource
func (m *InstitutionLogoResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstitutionLogoResource) validateColors(formats strfmt.Registry) error {

	if swag.IsZero(m.Colors) { // not required
		return nil
	}

	if m.Colors != nil {
		if err := m.Colors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("colors")
			}
			return err
		}
	}

	return nil
}

func (m *InstitutionLogoResource) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

var institutionLogoResourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["image"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		institutionLogoResourceTypeTypePropEnum = append(institutionLogoResourceTypeTypePropEnum, v)
	}
}

const (

	// InstitutionLogoResourceTypeImage captures enum value "image"
	InstitutionLogoResourceTypeImage string = "image"
)

// prop value enum
func (m *InstitutionLogoResource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, institutionLogoResourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InstitutionLogoResource) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstitutionLogoResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstitutionLogoResource) UnmarshalBinary(b []byte) error {
	var res InstitutionLogoResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
