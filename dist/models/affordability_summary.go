// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AffordabilitySummary affordability summary
//
// swagger:model AffordabilitySummary
type AffordabilitySummary struct {

	// Total of all repayments monthly to disclosed loan liabilities as an average monthly amount
	// Required: true
	LoanRepaymentMonthly *string `json:"loanRepaymentMonthly"`

	// Total of all repayments monthly to potential undisclosed loan liabilities as an average monthly amount
	// Required: true
	PotentialLiabilitiesMonthly *string `json:"potentialLiabilitiesMonthly"`

	// Total of cash based assets
	// Required: true
	Assets *string `json:"assets"`

	// Total credit limit across all credit cards and overdrafts
	// Required: true
	CreditLimit *string `json:"creditLimit"`

	// Provides an average of monthly expenses calculated for the whole period of data retrieved (e.g. 13 months)
	// Required: true
	Expenses *string `json:"expenses"`

	// Total of account based liabilities split into credit and loan liabilities
	// Required: true
	Liabilities *string `json:"liabilities"`

	// Total assets minus total liabilities
	// Required: true
	NetPosition *string `json:"netPosition"`

	// regular income
	// Required: true
	RegularIncome *AffordabilityRegularIncomeData `json:"regularIncome"`

	// Average of monthly savings calculated for the whole period of data retrieved (e.g. 13 months)
	// Required: true
	Savings *string `json:"savings"`
}

// Validate validates this affordability summary
func (m *AffordabilitySummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoanRepaymentMonthly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePotentialLiabilitiesMonthly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegularIncome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSavings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffordabilitySummary) validateLoanRepaymentMonthly(formats strfmt.Registry) error {

	if err := validate.Required("loanRepaymentMonthly", "body", m.LoanRepaymentMonthly); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilitySummary) validatePotentialLiabilitiesMonthly(formats strfmt.Registry) error {

	if err := validate.Required("potentialLiabilitiesMonthly", "body", m.PotentialLiabilitiesMonthly); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilitySummary) validateAssets(formats strfmt.Registry) error {

	if err := validate.Required("assets", "body", m.Assets); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilitySummary) validateCreditLimit(formats strfmt.Registry) error {

	if err := validate.Required("creditLimit", "body", m.CreditLimit); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilitySummary) validateExpenses(formats strfmt.Registry) error {

	if err := validate.Required("expenses", "body", m.Expenses); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilitySummary) validateLiabilities(formats strfmt.Registry) error {

	if err := validate.Required("liabilities", "body", m.Liabilities); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilitySummary) validateNetPosition(formats strfmt.Registry) error {

	if err := validate.Required("netPosition", "body", m.NetPosition); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilitySummary) validateRegularIncome(formats strfmt.Registry) error {

	if err := validate.Required("regularIncome", "body", m.RegularIncome); err != nil {
		return err
	}

	if m.RegularIncome != nil {
		if err := m.RegularIncome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regularIncome")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilitySummary) validateSavings(formats strfmt.Registry) error {

	if err := validate.Required("savings", "body", m.Savings); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AffordabilitySummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AffordabilitySummary) UnmarshalBinary(b []byte) error {
	var res AffordabilitySummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
