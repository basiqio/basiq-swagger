// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Institution Institution contains instution data.
//
// swagger:model Institution
type Institution struct {

	// Institution authorization identifier
	// Required: true
	// Enum: [user other]
	Authorization *string `json:"authorization"`

	// Institution country name
	// Required: true
	Country *string `json:"country"`

	// features
	// Required: true
	Features *Features `json:"features"`

	// URL to institution forgotten password page
	ForgottenPasswordURL string `json:"forgottenPasswordUrl,omitempty"`

	// Institution ID
	// Required: true
	// Max Length: 7
	// Min Length: 7
	// Pattern: ^[A-Z]{2}[0-9]{5}$
	// Unique: true
	ID *string `json:"id"`

	// Institution type identifier
	// Required: true
	// Enum: [Bank Bank (Foreign) Test Bank Credit Union Financial Services Superannuation Building Society]
	InstitutionType *string `json:"institutionType"`

	// links
	// Required: true
	Links *ResourceLinks `json:"links"`

	// Login ID field caption that should be shown on UI
	// Required: true
	LoginIDCaption *string `json:"loginIdCaption"`

	// logo
	// Required: true
	Logo *InstitutionLogoResource `json:"logo"`

	// Institution name
	// Required: true
	Name *string `json:"name"`

	// Password field caption that should be shown on UI
	// Required: true
	PasswordCaption *string `json:"passwordCaption"`

	// Secondary loginID caption that should be shown on UI
	SecondaryLoginIDCaption string `json:"secondaryLoginIdCaption,omitempty"`

	// Security code caption that should be shown on UI
	SecurityCodeCaption string `json:"securityCodeCaption,omitempty"`

	// Institution service name
	// Required: true
	ServiceName *string `json:"serviceName"`

	// Institution service name
	// Required: true
	// Enum: [Personal Banking Business Banking Card Access Test Superannuation]
	ServiceType *string `json:"serviceType"`

	// Institution short name
	// Required: true
	ShortName *string `json:"shortName"`

	// Institution stage identifier
	// Required: true
	// Enum: [live beta]
	Stage *string `json:"stage"`

	// stats
	// Required: true
	Stats *InstitutionPerformanceStats `json:"stats"`

	// status
	// Required: true
	Status FeatureCondition `json:"status"`

	// Institution tier identifier
	// Required: true
	// Enum: [1 2 3 4]
	Tier *string `json:"tier"`

	// Resource type identifier. It is always "institution" for this model.
	// Required: true
	// Enum: [institution]
	Type *string `json:"type"`
}

// Validate validates this institution
func (m *Institution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstitutionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginIDCaption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordCaption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var institutionTypeAuthorizationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		institutionTypeAuthorizationPropEnum = append(institutionTypeAuthorizationPropEnum, v)
	}
}

const (

	// InstitutionAuthorizationUser captures enum value "user"
	InstitutionAuthorizationUser string = "user"

	// InstitutionAuthorizationOther captures enum value "other"
	InstitutionAuthorizationOther string = "other"
)

// prop value enum
func (m *Institution) validateAuthorizationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, institutionTypeAuthorizationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Institution) validateAuthorization(formats strfmt.Registry) error {

	if err := validate.Required("authorization", "body", m.Authorization); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthorizationEnum("authorization", "body", *m.Authorization); err != nil {
		return err
	}

	return nil
}

func (m *Institution) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *Institution) validateFeatures(formats strfmt.Registry) error {

	if err := validate.Required("features", "body", m.Features); err != nil {
		return err
	}

	if m.Features != nil {
		if err := m.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *Institution) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 7); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 7); err != nil {
		return err
	}

	if err := validate.Pattern("id", "body", string(*m.ID), `^[A-Z]{2}[0-9]{5}$`); err != nil {
		return err
	}

	return nil
}

var institutionTypeInstitutionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bank","Bank (Foreign)","Test Bank","Credit Union","Financial Services","Superannuation","Building Society"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		institutionTypeInstitutionTypePropEnum = append(institutionTypeInstitutionTypePropEnum, v)
	}
}

const (

	// InstitutionInstitutionTypeBank captures enum value "Bank"
	InstitutionInstitutionTypeBank string = "Bank"

	// InstitutionInstitutionTypeBankForeign captures enum value "Bank (Foreign)"
	InstitutionInstitutionTypeBankForeign string = "Bank (Foreign)"

	// InstitutionInstitutionTypeTestBank captures enum value "Test Bank"
	InstitutionInstitutionTypeTestBank string = "Test Bank"

	// InstitutionInstitutionTypeCreditUnion captures enum value "Credit Union"
	InstitutionInstitutionTypeCreditUnion string = "Credit Union"

	// InstitutionInstitutionTypeFinancialServices captures enum value "Financial Services"
	InstitutionInstitutionTypeFinancialServices string = "Financial Services"

	// InstitutionInstitutionTypeSuperannuation captures enum value "Superannuation"
	InstitutionInstitutionTypeSuperannuation string = "Superannuation"

	// InstitutionInstitutionTypeBuildingSociety captures enum value "Building Society"
	InstitutionInstitutionTypeBuildingSociety string = "Building Society"
)

// prop value enum
func (m *Institution) validateInstitutionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, institutionTypeInstitutionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Institution) validateInstitutionType(formats strfmt.Registry) error {

	if err := validate.Required("institutionType", "body", m.InstitutionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateInstitutionTypeEnum("institutionType", "body", *m.InstitutionType); err != nil {
		return err
	}

	return nil
}

func (m *Institution) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Institution) validateLoginIDCaption(formats strfmt.Registry) error {

	if err := validate.Required("loginIdCaption", "body", m.LoginIDCaption); err != nil {
		return err
	}

	return nil
}

func (m *Institution) validateLogo(formats strfmt.Registry) error {

	if err := validate.Required("logo", "body", m.Logo); err != nil {
		return err
	}

	if m.Logo != nil {
		if err := m.Logo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logo")
			}
			return err
		}
	}

	return nil
}

func (m *Institution) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Institution) validatePasswordCaption(formats strfmt.Registry) error {

	if err := validate.Required("passwordCaption", "body", m.PasswordCaption); err != nil {
		return err
	}

	return nil
}

func (m *Institution) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

var institutionTypeServiceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Personal Banking","Business Banking","Card Access","Test","Superannuation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		institutionTypeServiceTypePropEnum = append(institutionTypeServiceTypePropEnum, v)
	}
}

const (

	// InstitutionServiceTypePersonalBanking captures enum value "Personal Banking"
	InstitutionServiceTypePersonalBanking string = "Personal Banking"

	// InstitutionServiceTypeBusinessBanking captures enum value "Business Banking"
	InstitutionServiceTypeBusinessBanking string = "Business Banking"

	// InstitutionServiceTypeCardAccess captures enum value "Card Access"
	InstitutionServiceTypeCardAccess string = "Card Access"

	// InstitutionServiceTypeTest captures enum value "Test"
	InstitutionServiceTypeTest string = "Test"

	// InstitutionServiceTypeSuperannuation captures enum value "Superannuation"
	InstitutionServiceTypeSuperannuation string = "Superannuation"
)

// prop value enum
func (m *Institution) validateServiceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, institutionTypeServiceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Institution) validateServiceType(formats strfmt.Registry) error {

	if err := validate.Required("serviceType", "body", m.ServiceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateServiceTypeEnum("serviceType", "body", *m.ServiceType); err != nil {
		return err
	}

	return nil
}

func (m *Institution) validateShortName(formats strfmt.Registry) error {

	if err := validate.Required("shortName", "body", m.ShortName); err != nil {
		return err
	}

	return nil
}

var institutionTypeStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["live","beta"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		institutionTypeStagePropEnum = append(institutionTypeStagePropEnum, v)
	}
}

const (

	// InstitutionStageLive captures enum value "live"
	InstitutionStageLive string = "live"

	// InstitutionStageBeta captures enum value "beta"
	InstitutionStageBeta string = "beta"
)

// prop value enum
func (m *Institution) validateStageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, institutionTypeStagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Institution) validateStage(formats strfmt.Registry) error {

	if err := validate.Required("stage", "body", m.Stage); err != nil {
		return err
	}

	// value enum
	if err := m.validateStageEnum("stage", "body", *m.Stage); err != nil {
		return err
	}

	return nil
}

func (m *Institution) validateStats(formats strfmt.Registry) error {

	if err := validate.Required("stats", "body", m.Stats); err != nil {
		return err
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *Institution) validateStatus(formats strfmt.Registry) error {

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

var institutionTypeTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1","2","3","4"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		institutionTypeTierPropEnum = append(institutionTypeTierPropEnum, v)
	}
}

const (

	// InstitutionTierNr1 captures enum value "1"
	InstitutionTierNr1 string = "1"

	// InstitutionTierNr2 captures enum value "2"
	InstitutionTierNr2 string = "2"

	// InstitutionTierNr3 captures enum value "3"
	InstitutionTierNr3 string = "3"

	// InstitutionTierNr4 captures enum value "4"
	InstitutionTierNr4 string = "4"
)

// prop value enum
func (m *Institution) validateTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, institutionTypeTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Institution) validateTier(formats strfmt.Registry) error {

	if err := validate.Required("tier", "body", m.Tier); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierEnum("tier", "body", *m.Tier); err != nil {
		return err
	}

	return nil
}

var institutionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["institution"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		institutionTypeTypePropEnum = append(institutionTypeTypePropEnum, v)
	}
}

const (

	// InstitutionTypeInstitution captures enum value "institution"
	InstitutionTypeInstitution string = "institution"
)

// prop value enum
func (m *Institution) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, institutionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Institution) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Institution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Institution) UnmarshalBinary(b []byte) error {
	var res Institution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
