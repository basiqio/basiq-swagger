// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentsSummaryExpenses Payments Summary
//
// swagger:model PaymentsSummaryExpenses
type PaymentsSummaryExpenses struct {

	// Average monthly amount by category for defined period (up to 13 months). This number monthly is calculated as follows: (Total Expenses/Report Coverage Days)*30. This allows data with partial months to be calculated correctly.
	// Example: -636.88
	// Required: true
	AvgMonthly *string `json:"avgMonthly"`

	// Top level summary: category name. e.g. Medical care and heath expenses, Food and non-alcoholic beverages, Education
	// Example: Education
	// Required: true
	Division *string `json:"division"`

	// Average monthly amount expressed as a percentage of total expenses.
	// Example: -636.88
	// Required: true
	PercentageTotal *float64 `json:"percentageTotal"`

	// sub category
	// Required: true
	SubCategory []*SubCategoryExpenses `json:"subCategory"`
}

// Validate validates this payments summary expenses
func (m *PaymentsSummaryExpenses) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvgMonthly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentageTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentsSummaryExpenses) validateAvgMonthly(formats strfmt.Registry) error {

	if err := validate.Required("avgMonthly", "body", m.AvgMonthly); err != nil {
		return err
	}

	return nil
}

func (m *PaymentsSummaryExpenses) validateDivision(formats strfmt.Registry) error {

	if err := validate.Required("division", "body", m.Division); err != nil {
		return err
	}

	return nil
}

func (m *PaymentsSummaryExpenses) validatePercentageTotal(formats strfmt.Registry) error {

	if err := validate.Required("percentageTotal", "body", m.PercentageTotal); err != nil {
		return err
	}

	return nil
}

func (m *PaymentsSummaryExpenses) validateSubCategory(formats strfmt.Registry) error {

	if err := validate.Required("subCategory", "body", m.SubCategory); err != nil {
		return err
	}

	for i := 0; i < len(m.SubCategory); i++ {
		if swag.IsZero(m.SubCategory[i]) { // not required
			continue
		}

		if m.SubCategory[i] != nil {
			if err := m.SubCategory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subCategory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentsSummaryExpenses) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentsSummaryExpenses) UnmarshalBinary(b []byte) error {
	var res PaymentsSummaryExpenses
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
