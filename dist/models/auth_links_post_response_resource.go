// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthLinksPostResponseResource auth links post response resource
//
// swagger:model AuthLinksPostResponseResource
type AuthLinksPostResponseResource struct {

	// The date time of auth link expiry.
	// Example: 2019-11-21T04:08:50Z
	// Required: true
	ExpiresAt *string `json:"expiresAt"`

	// links
	Links *AuthLinkLinks `json:"links,omitempty"`

	// A user's mobile phone, used as for authentication.
	// Example: +61410000000
	// Required: true
	Mobile *string `json:"mobile"`

	// Type of the response, always "auth_link".
	// Example: auth_link
	// Required: true
	Type *string `json:"type"`

	// A string that uniquely identifies the user.
	// Example: ec4ea48d
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this auth links post response resource
func (m *AuthLinksPostResponseResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthLinksPostResponseResource) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expiresAt", "body", m.ExpiresAt); err != nil {
		return err
	}

	return nil
}

func (m *AuthLinksPostResponseResource) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *AuthLinksPostResponseResource) validateMobile(formats strfmt.Registry) error {

	if err := validate.Required("mobile", "body", m.Mobile); err != nil {
		return err
	}

	return nil
}

func (m *AuthLinksPostResponseResource) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AuthLinksPostResponseResource) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this auth links post response resource based on the context it is used
func (m *AuthLinksPostResponseResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthLinksPostResponseResource) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthLinksPostResponseResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthLinksPostResponseResource) UnmarshalBinary(b []byte) error {
	var res AuthLinksPostResponseResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
