// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AffordabilityListData affordability list data
//
// swagger:model AffordabilityListData
type AffordabilityListData struct {

	// Number of days covered by the report
	CoverageDays int64 `json:"coverageDays,omitempty"`

	// Start month for the period for which the Affordability summary is generated. The period of time relates to the account and transaction data used as input into the report.
	// Required: true
	FromMonth *string `json:"fromMonth"`

	// Date the report was generated.
	// Required: true
	GeneratedDate *string `json:"generatedDate"`

	// Uniquely identifies the affordability report.
	// Required: true
	ID *string `json:"id"`

	// An array of institution ids to indicate the sources of transaction data, aggregated to generate the affordability resource.
	Institutions []string `json:"institutions"`

	// links
	// Required: true
	Links *AffordabilityLinksInList `json:"links"`

	// End month (usually the current month) for the period for which the Affordability summary is generated.
	// Required: true
	ToMonth *string `json:"toMonth"`

	// Always "affordability".
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this affordability list data
func (m *AffordabilityListData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneratedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffordabilityListData) validateFromMonth(formats strfmt.Registry) error {

	if err := validate.Required("fromMonth", "body", m.FromMonth); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilityListData) validateGeneratedDate(formats strfmt.Registry) error {

	if err := validate.Required("generatedDate", "body", m.GeneratedDate); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilityListData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilityListData) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilityListData) validateToMonth(formats strfmt.Registry) error {

	if err := validate.Required("toMonth", "body", m.ToMonth); err != nil {
		return err
	}

	return nil
}

func (m *AffordabilityListData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AffordabilityListData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AffordabilityListData) UnmarshalBinary(b []byte) error {
	var res AffordabilityListData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
