// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionsFeatures TransactionsFeatures describes set of institution transactions features
//
// swagger:model TransactionsFeatures
type TransactionsFeatures struct {

	// Class holds list of data source identifiers which are capable to fetch transaction class.
	// Required: true
	Class []SourceName `json:"class"`

	// TransactionAmount holds list of data source identifiers which are capable to fetch transaction amount.
	// Required: true
	TransactionAmount []SourceName `json:"amount"`

	// TransactionBalance holds list of data source identifiers which are capable to fetch account balance when transaction occured.
	// Required: true
	TransactionBalance []SourceName `json:"balance"`

	// TransactionDate holds list of data source identifiers which are capable to fetch transaction date.
	// Required: true
	TransactionDate []SourceName `json:"date"`

	// TransactionDescription holds list of data source identifiers which are capable to fetch transaction description.
	// Required: true
	TransactionDescription []SourceName `json:"description"`

	// TransactionStatus holds list of data source identifiers which are capable to fetch transaction status.
	// Required: true
	TransactionStatus []SourceName `json:"status"`
}

// Validate validates this transactions features
func (m *TransactionsFeatures) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionsFeatures) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	for i := 0; i < len(m.Class); i++ {

		if err := m.Class[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("class" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TransactionsFeatures) validateTransactionAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.TransactionAmount); err != nil {
		return err
	}

	for i := 0; i < len(m.TransactionAmount); i++ {

		if err := m.TransactionAmount[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TransactionsFeatures) validateTransactionBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.TransactionBalance); err != nil {
		return err
	}

	for i := 0; i < len(m.TransactionBalance); i++ {

		if err := m.TransactionBalance[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TransactionsFeatures) validateTransactionDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.TransactionDate); err != nil {
		return err
	}

	for i := 0; i < len(m.TransactionDate); i++ {

		if err := m.TransactionDate[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("date" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TransactionsFeatures) validateTransactionDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.TransactionDescription); err != nil {
		return err
	}

	for i := 0; i < len(m.TransactionDescription); i++ {

		if err := m.TransactionDescription[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TransactionsFeatures) validateTransactionStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.TransactionStatus); err != nil {
		return err
	}

	for i := 0; i < len(m.TransactionStatus); i++ {

		if err := m.TransactionStatus[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionsFeatures) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionsFeatures) UnmarshalBinary(b []byte) error {
	var res TransactionsFeatures
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
