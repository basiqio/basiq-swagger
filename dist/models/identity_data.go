// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IdentityData identity data
//
// swagger:model IdentityData
type IdentityData struct {

	// Date of birth of the identity owner.
	DOB string `json:"DOB,omitempty"`

	// Created date of the identity.
	// Example: 2019-07-29T07:34:09Z
	// Required: true
	Created *string `json:"created"`

	// List of email addresses of the identity owner.
	Emails []string `json:"emails"`

	// FirstName of the identity owner.
	FirstName string `json:"firstName,omitempty"`

	// FullName of the identity owner.
	FullName string `json:"fullName,omitempty"`

	// Identity identification.
	// Example: 61723
	// Required: true
	ID *string `json:"id"`

	// LastName of the identity owner.
	LastName string `json:"lastName,omitempty"`

	// links
	// Required: true
	Links *IdentityLinks `json:"links"`

	// MiddleName of the identity owner.
	MiddleName string `json:"middleName,omitempty"`

	// Code relating to the occupation held by the identity owner.
	OccupationCode string `json:"occupationCode,omitempty"`

	// Occupation Code Version.
	OccupationCodeVersion string `json:"occupationCodeVersion,omitempty"`

	// organisation
	Organisation *IdentityDataOrganisation `json:"organisation,omitempty"`

	// List of phone numbers of the identity owner.
	PhoneNumbers []string `json:"phoneNumbers"`

	// List of physical addresses of the identity owner.
	PhysicalAddresses []*PhysicalAddressData `json:"physicalAddresses"`

	// Data source.
	// Example: web
	Source string `json:"source,omitempty"`

	// Title is the prefix to the name of the identity owner.
	Title string `json:"title,omitempty"`

	// Type, always "identity".
	// Example: identity
	// Required: true
	Type *string `json:"type"`

	// Created date of the identity.
	// Example: 2019-07-29T07:34:09Z
	// Required: true
	Updated *string `json:"updated"`
}

// Validate validates this identity data
func (m *IdentityData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentityData) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *IdentityData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IdentityData) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *IdentityData) validateOrganisation(formats strfmt.Registry) error {
	if swag.IsZero(m.Organisation) { // not required
		return nil
	}

	if m.Organisation != nil {
		if err := m.Organisation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organisation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organisation")
			}
			return err
		}
	}

	return nil
}

func (m *IdentityData) validatePhysicalAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicalAddresses); i++ {
		if swag.IsZero(m.PhysicalAddresses[i]) { // not required
			continue
		}

		if m.PhysicalAddresses[i] != nil {
			if err := m.PhysicalAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicalAddresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("physicalAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdentityData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *IdentityData) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this identity data based on the context it is used
func (m *IdentityData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganisation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentityData) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *IdentityData) contextValidateOrganisation(ctx context.Context, formats strfmt.Registry) error {

	if m.Organisation != nil {
		if err := m.Organisation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organisation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organisation")
			}
			return err
		}
	}

	return nil
}

func (m *IdentityData) contextValidatePhysicalAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhysicalAddresses); i++ {

		if m.PhysicalAddresses[i] != nil {
			if err := m.PhysicalAddresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicalAddresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("physicalAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdentityData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentityData) UnmarshalBinary(b []byte) error {
	var res IdentityData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IdentityDataOrganisation Organisation data.
//
// swagger:model IdentityDataOrganisation
type IdentityDataOrganisation struct {

	// Australian Business Number.
	Abn string `json:"abn,omitempty"`

	// Australian Company Number.
	Acn string `json:"acn,omitempty"`

	// Agent first name.
	AgentFirstName string `json:"agentFirstName,omitempty"`

	// Agent last name.
	AgentLastName string `json:"agentLastName,omitempty"`

	// Agent role.
	AgentRole string `json:"agentRole,omitempty"`

	// Business name.
	BusinessName string `json:"businessName,omitempty"`

	// Industry Code.
	IndustryCode string `json:"industryCode,omitempty"`

	// Industry Code Version.
	IndustryCodeVersion string `json:"industryCodeVersion,omitempty"`

	// Indicates whether is Australian Company Number registered.
	IsACNCRegistered bool `json:"isACNCRegistered,omitempty"`

	// Legal name.
	LegalName string `json:"legalName,omitempty"`

	// Organisation Type.
	OrganisationType string `json:"organisationType,omitempty"`

	// Registered Country.
	RegisteredCountry string `json:"registeredCountry,omitempty"`

	// Short name.
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this identity data organisation
func (m *IdentityDataOrganisation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this identity data organisation based on context it is used
func (m *IdentityDataOrganisation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IdentityDataOrganisation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentityDataOrganisation) UnmarshalBinary(b []byte) error {
	var res IdentityDataOrganisation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
