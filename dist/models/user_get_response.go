// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserGetResponse UserGetResponse
//
// User object with details if the creation succeeded.
//
// swagger:model UserGetResponse
type UserGetResponse struct {

	// accounts
	// Required: true
	Accounts *GetUserAccount `json:"accounts"`

	// Business is ignored - it is populated when user has BusinessNumber or BusinessName
	// swagger: ignore
	Business string `json:"business,omitempty"`

	// connections
	// Required: true
	Connections *GetUserConnection `json:"connections"`

	// User email or empty.
	// Example: gavin@hooli.com
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// User identification.
	// Example: ea3a81
	// Required: true
	ID *string `json:"id"`

	// links
	// Required: true
	Links *GetUserLinks `json:"links"`

	// User mobile number, or empty.
	// Example: +61410888666
	// Required: true
	Mobile *string `json:"mobile"`

	// Name, or empty.
	// Required: true
	Name *string `json:"name"`

	// Always "user".
	// Example: user
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this user get response
func (m *UserGetResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGetResponse) validateAccounts(formats strfmt.Registry) error {

	if err := validate.Required("accounts", "body", m.Accounts); err != nil {
		return err
	}

	if m.Accounts != nil {
		if err := m.Accounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accounts")
			}
			return err
		}
	}

	return nil
}

func (m *UserGetResponse) validateConnections(formats strfmt.Registry) error {

	if err := validate.Required("connections", "body", m.Connections); err != nil {
		return err
	}

	if m.Connections != nil {
		if err := m.Connections.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connections")
			}
			return err
		}
	}

	return nil
}

func (m *UserGetResponse) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserGetResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserGetResponse) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *UserGetResponse) validateMobile(formats strfmt.Registry) error {

	if err := validate.Required("mobile", "body", m.Mobile); err != nil {
		return err
	}

	return nil
}

func (m *UserGetResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserGetResponse) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user get response based on the context it is used
func (m *UserGetResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGetResponse) contextValidateAccounts(ctx context.Context, formats strfmt.Registry) error {

	if m.Accounts != nil {
		if err := m.Accounts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accounts")
			}
			return err
		}
	}

	return nil
}

func (m *UserGetResponse) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	if m.Connections != nil {
		if err := m.Connections.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connections")
			}
			return err
		}
	}

	return nil
}

func (m *UserGetResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserGetResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGetResponse) UnmarshalBinary(b []byte) error {
	var res UserGetResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
